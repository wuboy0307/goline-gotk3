// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ApplicationType int64

const (
	ApplicationType_IOS              ApplicationType = 16
	ApplicationType_IOS_RC           ApplicationType = 17
	ApplicationType_IOS_BETA         ApplicationType = 18
	ApplicationType_IOS_ALPHA        ApplicationType = 19
	ApplicationType_ANDROID          ApplicationType = 32
	ApplicationType_ANDROID_RC       ApplicationType = 33
	ApplicationType_ANDROID_BETA     ApplicationType = 34
	ApplicationType_ANDROID_ALPHA    ApplicationType = 35
	ApplicationType_WAP              ApplicationType = 48
	ApplicationType_WAP_RC           ApplicationType = 49
	ApplicationType_WAP_BETA         ApplicationType = 50
	ApplicationType_WAP_ALPHA        ApplicationType = 51
	ApplicationType_BOT              ApplicationType = 64
	ApplicationType_BOT_RC           ApplicationType = 65
	ApplicationType_BOT_BETA         ApplicationType = 66
	ApplicationType_BOT_ALPHA        ApplicationType = 67
	ApplicationType_WEB              ApplicationType = 80
	ApplicationType_WEB_RC           ApplicationType = 81
	ApplicationType_WEB_BETA         ApplicationType = 82
	ApplicationType_WEB_ALPHA        ApplicationType = 83
	ApplicationType_DESKTOPWIN       ApplicationType = 96
	ApplicationType_DESKTOPWIN_RC    ApplicationType = 97
	ApplicationType_DESKTOPWIN_BETA  ApplicationType = 98
	ApplicationType_DESKTOPWIN_ALPHA ApplicationType = 99
	ApplicationType_DESKTOPMAC       ApplicationType = 112
	ApplicationType_DESKTOPMAC_RC    ApplicationType = 113
	ApplicationType_DESKTOPMAC_BETA  ApplicationType = 114
	ApplicationType_DESKTOPMAC_ALPHA ApplicationType = 115
	ApplicationType_CHANNELGW        ApplicationType = 128
	ApplicationType_CHANNELGW_RC     ApplicationType = 129
	ApplicationType_CHANNELGW_BETA   ApplicationType = 130
	ApplicationType_CHANNELGW_ALPHA  ApplicationType = 131
	ApplicationType_CHANNELCP        ApplicationType = 144
	ApplicationType_CHANNELCP_RC     ApplicationType = 145
	ApplicationType_CHANNELCP_BETA   ApplicationType = 146
	ApplicationType_CHANNELCP_ALPHA  ApplicationType = 147
	ApplicationType_WINPHONE         ApplicationType = 160
	ApplicationType_WINPHONE_RC      ApplicationType = 161
	ApplicationType_WINPHONE_BETA    ApplicationType = 162
	ApplicationType_WINPHONE_ALPHA   ApplicationType = 163
	ApplicationType_BLACKBERRY       ApplicationType = 176
	ApplicationType_BLACKBERRY_RC    ApplicationType = 177
	ApplicationType_BLACKBERRY_BETA  ApplicationType = 178
	ApplicationType_BLACKBERRY_ALPHA ApplicationType = 179
	ApplicationType_WINMETRO         ApplicationType = 192
	ApplicationType_WINMETRO_RC      ApplicationType = 193
	ApplicationType_WINMETRO_BETA    ApplicationType = 194
	ApplicationType_WINMETRO_ALPHA   ApplicationType = 195
	ApplicationType_S40              ApplicationType = 208
	ApplicationType_S40_RC           ApplicationType = 209
	ApplicationType_S40_BETA         ApplicationType = 210
	ApplicationType_S40_ALPHA        ApplicationType = 211
	ApplicationType_CHRONO           ApplicationType = 224
	ApplicationType_CHRONO_RC        ApplicationType = 225
	ApplicationType_CHRONO_BETA      ApplicationType = 226
	ApplicationType_CHRONO_ALPHA     ApplicationType = 227
	ApplicationType_TIZEN            ApplicationType = 256
	ApplicationType_TIZEN_RC         ApplicationType = 257
	ApplicationType_TIZEN_BETA       ApplicationType = 258
	ApplicationType_TIZEN_ALPHA      ApplicationType = 259
	ApplicationType_VIRTUAL          ApplicationType = 272
)

func (p ApplicationType) String() string {
	switch p {
	case ApplicationType_IOS:
		return "ApplicationType_IOS"
	case ApplicationType_IOS_RC:
		return "ApplicationType_IOS_RC"
	case ApplicationType_IOS_BETA:
		return "ApplicationType_IOS_BETA"
	case ApplicationType_IOS_ALPHA:
		return "ApplicationType_IOS_ALPHA"
	case ApplicationType_ANDROID:
		return "ApplicationType_ANDROID"
	case ApplicationType_ANDROID_RC:
		return "ApplicationType_ANDROID_RC"
	case ApplicationType_ANDROID_BETA:
		return "ApplicationType_ANDROID_BETA"
	case ApplicationType_ANDROID_ALPHA:
		return "ApplicationType_ANDROID_ALPHA"
	case ApplicationType_WAP:
		return "ApplicationType_WAP"
	case ApplicationType_WAP_RC:
		return "ApplicationType_WAP_RC"
	case ApplicationType_WAP_BETA:
		return "ApplicationType_WAP_BETA"
	case ApplicationType_WAP_ALPHA:
		return "ApplicationType_WAP_ALPHA"
	case ApplicationType_BOT:
		return "ApplicationType_BOT"
	case ApplicationType_BOT_RC:
		return "ApplicationType_BOT_RC"
	case ApplicationType_BOT_BETA:
		return "ApplicationType_BOT_BETA"
	case ApplicationType_BOT_ALPHA:
		return "ApplicationType_BOT_ALPHA"
	case ApplicationType_WEB:
		return "ApplicationType_WEB"
	case ApplicationType_WEB_RC:
		return "ApplicationType_WEB_RC"
	case ApplicationType_WEB_BETA:
		return "ApplicationType_WEB_BETA"
	case ApplicationType_WEB_ALPHA:
		return "ApplicationType_WEB_ALPHA"
	case ApplicationType_DESKTOPWIN:
		return "ApplicationType_DESKTOPWIN"
	case ApplicationType_DESKTOPWIN_RC:
		return "ApplicationType_DESKTOPWIN_RC"
	case ApplicationType_DESKTOPWIN_BETA:
		return "ApplicationType_DESKTOPWIN_BETA"
	case ApplicationType_DESKTOPWIN_ALPHA:
		return "ApplicationType_DESKTOPWIN_ALPHA"
	case ApplicationType_DESKTOPMAC:
		return "ApplicationType_DESKTOPMAC"
	case ApplicationType_DESKTOPMAC_RC:
		return "ApplicationType_DESKTOPMAC_RC"
	case ApplicationType_DESKTOPMAC_BETA:
		return "ApplicationType_DESKTOPMAC_BETA"
	case ApplicationType_DESKTOPMAC_ALPHA:
		return "ApplicationType_DESKTOPMAC_ALPHA"
	case ApplicationType_CHANNELGW:
		return "ApplicationType_CHANNELGW"
	case ApplicationType_CHANNELGW_RC:
		return "ApplicationType_CHANNELGW_RC"
	case ApplicationType_CHANNELGW_BETA:
		return "ApplicationType_CHANNELGW_BETA"
	case ApplicationType_CHANNELGW_ALPHA:
		return "ApplicationType_CHANNELGW_ALPHA"
	case ApplicationType_CHANNELCP:
		return "ApplicationType_CHANNELCP"
	case ApplicationType_CHANNELCP_RC:
		return "ApplicationType_CHANNELCP_RC"
	case ApplicationType_CHANNELCP_BETA:
		return "ApplicationType_CHANNELCP_BETA"
	case ApplicationType_CHANNELCP_ALPHA:
		return "ApplicationType_CHANNELCP_ALPHA"
	case ApplicationType_WINPHONE:
		return "ApplicationType_WINPHONE"
	case ApplicationType_WINPHONE_RC:
		return "ApplicationType_WINPHONE_RC"
	case ApplicationType_WINPHONE_BETA:
		return "ApplicationType_WINPHONE_BETA"
	case ApplicationType_WINPHONE_ALPHA:
		return "ApplicationType_WINPHONE_ALPHA"
	case ApplicationType_BLACKBERRY:
		return "ApplicationType_BLACKBERRY"
	case ApplicationType_BLACKBERRY_RC:
		return "ApplicationType_BLACKBERRY_RC"
	case ApplicationType_BLACKBERRY_BETA:
		return "ApplicationType_BLACKBERRY_BETA"
	case ApplicationType_BLACKBERRY_ALPHA:
		return "ApplicationType_BLACKBERRY_ALPHA"
	case ApplicationType_WINMETRO:
		return "ApplicationType_WINMETRO"
	case ApplicationType_WINMETRO_RC:
		return "ApplicationType_WINMETRO_RC"
	case ApplicationType_WINMETRO_BETA:
		return "ApplicationType_WINMETRO_BETA"
	case ApplicationType_WINMETRO_ALPHA:
		return "ApplicationType_WINMETRO_ALPHA"
	case ApplicationType_S40:
		return "ApplicationType_S40"
	case ApplicationType_S40_RC:
		return "ApplicationType_S40_RC"
	case ApplicationType_S40_BETA:
		return "ApplicationType_S40_BETA"
	case ApplicationType_S40_ALPHA:
		return "ApplicationType_S40_ALPHA"
	case ApplicationType_CHRONO:
		return "ApplicationType_CHRONO"
	case ApplicationType_CHRONO_RC:
		return "ApplicationType_CHRONO_RC"
	case ApplicationType_CHRONO_BETA:
		return "ApplicationType_CHRONO_BETA"
	case ApplicationType_CHRONO_ALPHA:
		return "ApplicationType_CHRONO_ALPHA"
	case ApplicationType_TIZEN:
		return "ApplicationType_TIZEN"
	case ApplicationType_TIZEN_RC:
		return "ApplicationType_TIZEN_RC"
	case ApplicationType_TIZEN_BETA:
		return "ApplicationType_TIZEN_BETA"
	case ApplicationType_TIZEN_ALPHA:
		return "ApplicationType_TIZEN_ALPHA"
	case ApplicationType_VIRTUAL:
		return "ApplicationType_VIRTUAL"
	}
	return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
	switch s {
	case "ApplicationType_IOS":
		return ApplicationType_IOS, nil
	case "ApplicationType_IOS_RC":
		return ApplicationType_IOS_RC, nil
	case "ApplicationType_IOS_BETA":
		return ApplicationType_IOS_BETA, nil
	case "ApplicationType_IOS_ALPHA":
		return ApplicationType_IOS_ALPHA, nil
	case "ApplicationType_ANDROID":
		return ApplicationType_ANDROID, nil
	case "ApplicationType_ANDROID_RC":
		return ApplicationType_ANDROID_RC, nil
	case "ApplicationType_ANDROID_BETA":
		return ApplicationType_ANDROID_BETA, nil
	case "ApplicationType_ANDROID_ALPHA":
		return ApplicationType_ANDROID_ALPHA, nil
	case "ApplicationType_WAP":
		return ApplicationType_WAP, nil
	case "ApplicationType_WAP_RC":
		return ApplicationType_WAP_RC, nil
	case "ApplicationType_WAP_BETA":
		return ApplicationType_WAP_BETA, nil
	case "ApplicationType_WAP_ALPHA":
		return ApplicationType_WAP_ALPHA, nil
	case "ApplicationType_BOT":
		return ApplicationType_BOT, nil
	case "ApplicationType_BOT_RC":
		return ApplicationType_BOT_RC, nil
	case "ApplicationType_BOT_BETA":
		return ApplicationType_BOT_BETA, nil
	case "ApplicationType_BOT_ALPHA":
		return ApplicationType_BOT_ALPHA, nil
	case "ApplicationType_WEB":
		return ApplicationType_WEB, nil
	case "ApplicationType_WEB_RC":
		return ApplicationType_WEB_RC, nil
	case "ApplicationType_WEB_BETA":
		return ApplicationType_WEB_BETA, nil
	case "ApplicationType_WEB_ALPHA":
		return ApplicationType_WEB_ALPHA, nil
	case "ApplicationType_DESKTOPWIN":
		return ApplicationType_DESKTOPWIN, nil
	case "ApplicationType_DESKTOPWIN_RC":
		return ApplicationType_DESKTOPWIN_RC, nil
	case "ApplicationType_DESKTOPWIN_BETA":
		return ApplicationType_DESKTOPWIN_BETA, nil
	case "ApplicationType_DESKTOPWIN_ALPHA":
		return ApplicationType_DESKTOPWIN_ALPHA, nil
	case "ApplicationType_DESKTOPMAC":
		return ApplicationType_DESKTOPMAC, nil
	case "ApplicationType_DESKTOPMAC_RC":
		return ApplicationType_DESKTOPMAC_RC, nil
	case "ApplicationType_DESKTOPMAC_BETA":
		return ApplicationType_DESKTOPMAC_BETA, nil
	case "ApplicationType_DESKTOPMAC_ALPHA":
		return ApplicationType_DESKTOPMAC_ALPHA, nil
	case "ApplicationType_CHANNELGW":
		return ApplicationType_CHANNELGW, nil
	case "ApplicationType_CHANNELGW_RC":
		return ApplicationType_CHANNELGW_RC, nil
	case "ApplicationType_CHANNELGW_BETA":
		return ApplicationType_CHANNELGW_BETA, nil
	case "ApplicationType_CHANNELGW_ALPHA":
		return ApplicationType_CHANNELGW_ALPHA, nil
	case "ApplicationType_CHANNELCP":
		return ApplicationType_CHANNELCP, nil
	case "ApplicationType_CHANNELCP_RC":
		return ApplicationType_CHANNELCP_RC, nil
	case "ApplicationType_CHANNELCP_BETA":
		return ApplicationType_CHANNELCP_BETA, nil
	case "ApplicationType_CHANNELCP_ALPHA":
		return ApplicationType_CHANNELCP_ALPHA, nil
	case "ApplicationType_WINPHONE":
		return ApplicationType_WINPHONE, nil
	case "ApplicationType_WINPHONE_RC":
		return ApplicationType_WINPHONE_RC, nil
	case "ApplicationType_WINPHONE_BETA":
		return ApplicationType_WINPHONE_BETA, nil
	case "ApplicationType_WINPHONE_ALPHA":
		return ApplicationType_WINPHONE_ALPHA, nil
	case "ApplicationType_BLACKBERRY":
		return ApplicationType_BLACKBERRY, nil
	case "ApplicationType_BLACKBERRY_RC":
		return ApplicationType_BLACKBERRY_RC, nil
	case "ApplicationType_BLACKBERRY_BETA":
		return ApplicationType_BLACKBERRY_BETA, nil
	case "ApplicationType_BLACKBERRY_ALPHA":
		return ApplicationType_BLACKBERRY_ALPHA, nil
	case "ApplicationType_WINMETRO":
		return ApplicationType_WINMETRO, nil
	case "ApplicationType_WINMETRO_RC":
		return ApplicationType_WINMETRO_RC, nil
	case "ApplicationType_WINMETRO_BETA":
		return ApplicationType_WINMETRO_BETA, nil
	case "ApplicationType_WINMETRO_ALPHA":
		return ApplicationType_WINMETRO_ALPHA, nil
	case "ApplicationType_S40":
		return ApplicationType_S40, nil
	case "ApplicationType_S40_RC":
		return ApplicationType_S40_RC, nil
	case "ApplicationType_S40_BETA":
		return ApplicationType_S40_BETA, nil
	case "ApplicationType_S40_ALPHA":
		return ApplicationType_S40_ALPHA, nil
	case "ApplicationType_CHRONO":
		return ApplicationType_CHRONO, nil
	case "ApplicationType_CHRONO_RC":
		return ApplicationType_CHRONO_RC, nil
	case "ApplicationType_CHRONO_BETA":
		return ApplicationType_CHRONO_BETA, nil
	case "ApplicationType_CHRONO_ALPHA":
		return ApplicationType_CHRONO_ALPHA, nil
	case "ApplicationType_TIZEN":
		return ApplicationType_TIZEN, nil
	case "ApplicationType_TIZEN_RC":
		return ApplicationType_TIZEN_RC, nil
	case "ApplicationType_TIZEN_BETA":
		return ApplicationType_TIZEN_BETA, nil
	case "ApplicationType_TIZEN_ALPHA":
		return ApplicationType_TIZEN_ALPHA, nil
	case "ApplicationType_VIRTUAL":
		return ApplicationType_VIRTUAL, nil
	}
	return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}

func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

type CarrierCode int64

const (
	CarrierCode_NOT_SPECIFIED CarrierCode = 0
	CarrierCode_JP_DOCOMO     CarrierCode = 1
	CarrierCode_JP_AU         CarrierCode = 2
	CarrierCode_JP_SOFTBANK   CarrierCode = 3
	CarrierCode_KR_SKT        CarrierCode = 17
	CarrierCode_KR_KT         CarrierCode = 18
	CarrierCode_KR_LGT        CarrierCode = 19
)

func (p CarrierCode) String() string {
	switch p {
	case CarrierCode_NOT_SPECIFIED:
		return "CarrierCode_NOT_SPECIFIED"
	case CarrierCode_JP_DOCOMO:
		return "CarrierCode_JP_DOCOMO"
	case CarrierCode_JP_AU:
		return "CarrierCode_JP_AU"
	case CarrierCode_JP_SOFTBANK:
		return "CarrierCode_JP_SOFTBANK"
	case CarrierCode_KR_SKT:
		return "CarrierCode_KR_SKT"
	case CarrierCode_KR_KT:
		return "CarrierCode_KR_KT"
	case CarrierCode_KR_LGT:
		return "CarrierCode_KR_LGT"
	}
	return "<UNSET>"
}

func CarrierCodeFromString(s string) (CarrierCode, error) {
	switch s {
	case "CarrierCode_NOT_SPECIFIED":
		return CarrierCode_NOT_SPECIFIED, nil
	case "CarrierCode_JP_DOCOMO":
		return CarrierCode_JP_DOCOMO, nil
	case "CarrierCode_JP_AU":
		return CarrierCode_JP_AU, nil
	case "CarrierCode_JP_SOFTBANK":
		return CarrierCode_JP_SOFTBANK, nil
	case "CarrierCode_KR_SKT":
		return CarrierCode_KR_SKT, nil
	case "CarrierCode_KR_KT":
		return CarrierCode_KR_KT, nil
	case "CarrierCode_KR_LGT":
		return CarrierCode_KR_LGT, nil
	}
	return CarrierCode(0), fmt.Errorf("not a valid CarrierCode string")
}

func CarrierCodePtr(v CarrierCode) *CarrierCode { return &v }

type ContactRelation int64

const (
	ContactRelation_ONEWAY         ContactRelation = 0
	ContactRelation_BOTH           ContactRelation = 1
	ContactRelation_NOT_REGISTERED ContactRelation = 2
)

func (p ContactRelation) String() string {
	switch p {
	case ContactRelation_ONEWAY:
		return "ContactRelation_ONEWAY"
	case ContactRelation_BOTH:
		return "ContactRelation_BOTH"
	case ContactRelation_NOT_REGISTERED:
		return "ContactRelation_NOT_REGISTERED"
	}
	return "<UNSET>"
}

func ContactRelationFromString(s string) (ContactRelation, error) {
	switch s {
	case "ContactRelation_ONEWAY":
		return ContactRelation_ONEWAY, nil
	case "ContactRelation_BOTH":
		return ContactRelation_BOTH, nil
	case "ContactRelation_NOT_REGISTERED":
		return ContactRelation_NOT_REGISTERED, nil
	}
	return ContactRelation(0), fmt.Errorf("not a valid ContactRelation string")
}

func ContactRelationPtr(v ContactRelation) *ContactRelation { return &v }

type ContactSetting int64

const (
	ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE  ContactSetting = 1
	ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSetting = 2
	ContactSetting_CONTACT_SETTING_CONTACT_HIDE          ContactSetting = 4
	ContactSetting_CONTACT_SETTING_FAVORITE              ContactSetting = 8
	ContactSetting_CONTACT_SETTING_DELETE                ContactSetting = 16
)

func (p ContactSetting) String() string {
	switch p {
	case ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE:
		return "ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE"
	case ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE:
		return "ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
	case ContactSetting_CONTACT_SETTING_CONTACT_HIDE:
		return "ContactSetting_CONTACT_SETTING_CONTACT_HIDE"
	case ContactSetting_CONTACT_SETTING_FAVORITE:
		return "ContactSetting_CONTACT_SETTING_FAVORITE"
	case ContactSetting_CONTACT_SETTING_DELETE:
		return "ContactSetting_CONTACT_SETTING_DELETE"
	}
	return "<UNSET>"
}

func ContactSettingFromString(s string) (ContactSetting, error) {
	switch s {
	case "ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE":
		return ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE, nil
	case "ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE":
		return ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil
	case "ContactSetting_CONTACT_SETTING_CONTACT_HIDE":
		return ContactSetting_CONTACT_SETTING_CONTACT_HIDE, nil
	case "ContactSetting_CONTACT_SETTING_FAVORITE":
		return ContactSetting_CONTACT_SETTING_FAVORITE, nil
	case "ContactSetting_CONTACT_SETTING_DELETE":
		return ContactSetting_CONTACT_SETTING_DELETE, nil
	}
	return ContactSetting(0), fmt.Errorf("not a valid ContactSetting string")
}

func ContactSettingPtr(v ContactSetting) *ContactSetting { return &v }

type ContactStatus int64

const (
	ContactStatus_UNSPECIFIED       ContactStatus = 0
	ContactStatus_FRIEND            ContactStatus = 1
	ContactStatus_FRIEND_BLOCKED    ContactStatus = 2
	ContactStatus_RECOMMEND         ContactStatus = 3
	ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
	ContactStatus_DELETED           ContactStatus = 5
	ContactStatus_DELETED_BLOCKED   ContactStatus = 6
)

func (p ContactStatus) String() string {
	switch p {
	case ContactStatus_UNSPECIFIED:
		return "ContactStatus_UNSPECIFIED"
	case ContactStatus_FRIEND:
		return "ContactStatus_FRIEND"
	case ContactStatus_FRIEND_BLOCKED:
		return "ContactStatus_FRIEND_BLOCKED"
	case ContactStatus_RECOMMEND:
		return "ContactStatus_RECOMMEND"
	case ContactStatus_RECOMMEND_BLOCKED:
		return "ContactStatus_RECOMMEND_BLOCKED"
	case ContactStatus_DELETED:
		return "ContactStatus_DELETED"
	case ContactStatus_DELETED_BLOCKED:
		return "ContactStatus_DELETED_BLOCKED"
	}
	return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
	switch s {
	case "ContactStatus_UNSPECIFIED":
		return ContactStatus_UNSPECIFIED, nil
	case "ContactStatus_FRIEND":
		return ContactStatus_FRIEND, nil
	case "ContactStatus_FRIEND_BLOCKED":
		return ContactStatus_FRIEND_BLOCKED, nil
	case "ContactStatus_RECOMMEND":
		return ContactStatus_RECOMMEND, nil
	case "ContactStatus_RECOMMEND_BLOCKED":
		return ContactStatus_RECOMMEND_BLOCKED, nil
	case "ContactStatus_DELETED":
		return ContactStatus_DELETED, nil
	case "ContactStatus_DELETED_BLOCKED":
		return ContactStatus_DELETED_BLOCKED, nil
	}
	return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}

func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

type ContactType int64

const (
	ContactType_MID           ContactType = 0
	ContactType_PHONE         ContactType = 1
	ContactType_EMAIL         ContactType = 2
	ContactType_USERID        ContactType = 3
	ContactType_PROXIMITY     ContactType = 4
	ContactType_GROUP         ContactType = 5
	ContactType_USER          ContactType = 6
	ContactType_QRCODE        ContactType = 7
	ContactType_PROMOTION_BOT ContactType = 8
	ContactType_REPAIR        ContactType = 128
	ContactType_FACEBOOK      ContactType = 2305
	ContactType_SINA          ContactType = 2306
	ContactType_RENREN        ContactType = 2307
	ContactType_FEIXIN        ContactType = 2308
)

func (p ContactType) String() string {
	switch p {
	case ContactType_MID:
		return "ContactType_MID"
	case ContactType_PHONE:
		return "ContactType_PHONE"
	case ContactType_EMAIL:
		return "ContactType_EMAIL"
	case ContactType_USERID:
		return "ContactType_USERID"
	case ContactType_PROXIMITY:
		return "ContactType_PROXIMITY"
	case ContactType_GROUP:
		return "ContactType_GROUP"
	case ContactType_USER:
		return "ContactType_USER"
	case ContactType_QRCODE:
		return "ContactType_QRCODE"
	case ContactType_PROMOTION_BOT:
		return "ContactType_PROMOTION_BOT"
	case ContactType_REPAIR:
		return "ContactType_REPAIR"
	case ContactType_FACEBOOK:
		return "ContactType_FACEBOOK"
	case ContactType_SINA:
		return "ContactType_SINA"
	case ContactType_RENREN:
		return "ContactType_RENREN"
	case ContactType_FEIXIN:
		return "ContactType_FEIXIN"
	}
	return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
	switch s {
	case "ContactType_MID":
		return ContactType_MID, nil
	case "ContactType_PHONE":
		return ContactType_PHONE, nil
	case "ContactType_EMAIL":
		return ContactType_EMAIL, nil
	case "ContactType_USERID":
		return ContactType_USERID, nil
	case "ContactType_PROXIMITY":
		return ContactType_PROXIMITY, nil
	case "ContactType_GROUP":
		return ContactType_GROUP, nil
	case "ContactType_USER":
		return ContactType_USER, nil
	case "ContactType_QRCODE":
		return ContactType_QRCODE, nil
	case "ContactType_PROMOTION_BOT":
		return ContactType_PROMOTION_BOT, nil
	case "ContactType_REPAIR":
		return ContactType_REPAIR, nil
	case "ContactType_FACEBOOK":
		return ContactType_FACEBOOK, nil
	case "ContactType_SINA":
		return ContactType_SINA, nil
	case "ContactType_RENREN":
		return ContactType_RENREN, nil
	case "ContactType_FEIXIN":
		return ContactType_FEIXIN, nil
	}
	return ContactType(0), fmt.Errorf("not a valid ContactType string")
}

func ContactTypePtr(v ContactType) *ContactType { return &v }

type ContentType int64

const (
	ContentType_NONE             ContentType = 0
	ContentType_IMAGE            ContentType = 1
	ContentType_VIDEO            ContentType = 2
	ContentType_AUDIO            ContentType = 3
	ContentType_HTML             ContentType = 4
	ContentType_PDF              ContentType = 5
	ContentType_CALL             ContentType = 6
	ContentType_STICKER          ContentType = 7
	ContentType_PRESENCE         ContentType = 8
	ContentType_GIFT             ContentType = 9
	ContentType_GROUPBOARD       ContentType = 10
	ContentType_APPLINK          ContentType = 11
	ContentType_LINK             ContentType = 12
	ContentType_CONTACT          ContentType = 13
	ContentType_FILE             ContentType = 14
	ContentType_LOCATION         ContentType = 15
	ContentType_POSTNOTIFICATION ContentType = 16
	ContentType_RICH             ContentType = 17
	ContentType_CHATEVENT        ContentType = 18
)

func (p ContentType) String() string {
	switch p {
	case ContentType_NONE:
		return "ContentType_NONE"
	case ContentType_IMAGE:
		return "ContentType_IMAGE"
	case ContentType_VIDEO:
		return "ContentType_VIDEO"
	case ContentType_AUDIO:
		return "ContentType_AUDIO"
	case ContentType_HTML:
		return "ContentType_HTML"
	case ContentType_PDF:
		return "ContentType_PDF"
	case ContentType_CALL:
		return "ContentType_CALL"
	case ContentType_STICKER:
		return "ContentType_STICKER"
	case ContentType_PRESENCE:
		return "ContentType_PRESENCE"
	case ContentType_GIFT:
		return "ContentType_GIFT"
	case ContentType_GROUPBOARD:
		return "ContentType_GROUPBOARD"
	case ContentType_APPLINK:
		return "ContentType_APPLINK"
	case ContentType_LINK:
		return "ContentType_LINK"
	case ContentType_CONTACT:
		return "ContentType_CONTACT"
	case ContentType_FILE:
		return "ContentType_FILE"
	case ContentType_LOCATION:
		return "ContentType_LOCATION"
	case ContentType_POSTNOTIFICATION:
		return "ContentType_POSTNOTIFICATION"
	case ContentType_RICH:
		return "ContentType_RICH"
	case ContentType_CHATEVENT:
		return "ContentType_CHATEVENT"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "ContentType_NONE":
		return ContentType_NONE, nil
	case "ContentType_IMAGE":
		return ContentType_IMAGE, nil
	case "ContentType_VIDEO":
		return ContentType_VIDEO, nil
	case "ContentType_AUDIO":
		return ContentType_AUDIO, nil
	case "ContentType_HTML":
		return ContentType_HTML, nil
	case "ContentType_PDF":
		return ContentType_PDF, nil
	case "ContentType_CALL":
		return ContentType_CALL, nil
	case "ContentType_STICKER":
		return ContentType_STICKER, nil
	case "ContentType_PRESENCE":
		return ContentType_PRESENCE, nil
	case "ContentType_GIFT":
		return ContentType_GIFT, nil
	case "ContentType_GROUPBOARD":
		return ContentType_GROUPBOARD, nil
	case "ContentType_APPLINK":
		return ContentType_APPLINK, nil
	case "ContentType_LINK":
		return ContentType_LINK, nil
	case "ContentType_CONTACT":
		return ContentType_CONTACT, nil
	case "ContentType_FILE":
		return ContentType_FILE, nil
	case "ContentType_LOCATION":
		return ContentType_LOCATION, nil
	case "ContentType_POSTNOTIFICATION":
		return ContentType_POSTNOTIFICATION, nil
	case "ContentType_RICH":
		return ContentType_RICH, nil
	case "ContentType_CHATEVENT":
		return ContentType_CHATEVENT, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

type CustomMode int64

const (
	CustomMode_PROMOTION_FRIENDS_INVITE            CustomMode = 1
	CustomMode_CAPABILITY_SERVER_SIDE_SMS          CustomMode = 2
	CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomMode = 3
)

func (p CustomMode) String() string {
	switch p {
	case CustomMode_PROMOTION_FRIENDS_INVITE:
		return "CustomMode_PROMOTION_FRIENDS_INVITE"
	case CustomMode_CAPABILITY_SERVER_SIDE_SMS:
		return "CustomMode_CAPABILITY_SERVER_SIDE_SMS"
	case CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION:
		return "CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION"
	}
	return "<UNSET>"
}

func CustomModeFromString(s string) (CustomMode, error) {
	switch s {
	case "CustomMode_PROMOTION_FRIENDS_INVITE":
		return CustomMode_PROMOTION_FRIENDS_INVITE, nil
	case "CustomMode_CAPABILITY_SERVER_SIDE_SMS":
		return CustomMode_CAPABILITY_SERVER_SIDE_SMS, nil
	case "CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION":
		return CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil
	}
	return CustomMode(0), fmt.Errorf("not a valid CustomMode string")
}

func CustomModePtr(v CustomMode) *CustomMode { return &v }

type EmailConfirmationStatus int64

const (
	EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
	EmailConfirmationStatus_NOT_YET       EmailConfirmationStatus = 1
	EmailConfirmationStatus_DONE          EmailConfirmationStatus = 3
)

func (p EmailConfirmationStatus) String() string {
	switch p {
	case EmailConfirmationStatus_NOT_SPECIFIED:
		return "EmailConfirmationStatus_NOT_SPECIFIED"
	case EmailConfirmationStatus_NOT_YET:
		return "EmailConfirmationStatus_NOT_YET"
	case EmailConfirmationStatus_DONE:
		return "EmailConfirmationStatus_DONE"
	}
	return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
	switch s {
	case "EmailConfirmationStatus_NOT_SPECIFIED":
		return EmailConfirmationStatus_NOT_SPECIFIED, nil
	case "EmailConfirmationStatus_NOT_YET":
		return EmailConfirmationStatus_NOT_YET, nil
	case "EmailConfirmationStatus_DONE":
		return EmailConfirmationStatus_DONE, nil
	}
	return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}

func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

type EmailConfirmationType int64

const (
	EmailConfirmationType_SERVER_SIDE_EMAIL EmailConfirmationType = 0
	EmailConfirmationType_CLIENT_SIDE_EMAIL EmailConfirmationType = 1
)

func (p EmailConfirmationType) String() string {
	switch p {
	case EmailConfirmationType_SERVER_SIDE_EMAIL:
		return "EmailConfirmationType_SERVER_SIDE_EMAIL"
	case EmailConfirmationType_CLIENT_SIDE_EMAIL:
		return "EmailConfirmationType_CLIENT_SIDE_EMAIL"
	}
	return "<UNSET>"
}

func EmailConfirmationTypeFromString(s string) (EmailConfirmationType, error) {
	switch s {
	case "EmailConfirmationType_SERVER_SIDE_EMAIL":
		return EmailConfirmationType_SERVER_SIDE_EMAIL, nil
	case "EmailConfirmationType_CLIENT_SIDE_EMAIL":
		return EmailConfirmationType_CLIENT_SIDE_EMAIL, nil
	}
	return EmailConfirmationType(0), fmt.Errorf("not a valid EmailConfirmationType string")
}

func EmailConfirmationTypePtr(v EmailConfirmationType) *EmailConfirmationType { return &v }

type ErrorCode int64

const (
	ErrorCode_ILLEGAL_ARGUMENT                           ErrorCode = 0
	ErrorCode_AUTHENTICATION_FAILED                      ErrorCode = 1
	ErrorCode_DB_FAILED                                  ErrorCode = 2
	ErrorCode_INVALID_STATE                              ErrorCode = 3
	ErrorCode_EXCESSIVE_ACCESS                           ErrorCode = 4
	ErrorCode_NOT_FOUND                                  ErrorCode = 5
	ErrorCode_INVALID_LENGTH                             ErrorCode = 6
	ErrorCode_NOT_AVAILABLE_USER                         ErrorCode = 7
	ErrorCode_NOT_AUTHORIZED_DEVICE                      ErrorCode = 8
	ErrorCode_INVALID_MID                                ErrorCode = 9
	ErrorCode_NOT_A_MEMBER                               ErrorCode = 10
	ErrorCode_INCOMPATIBLE_APP_VERSION                   ErrorCode = 11
	ErrorCode_NOT_READY                                  ErrorCode = 12
	ErrorCode_NOT_AVAILABLE_SESSION                      ErrorCode = 13
	ErrorCode_NOT_AUTHORIZED_SESSION                     ErrorCode = 14
	ErrorCode_SYSTEM_ERROR                               ErrorCode = 15
	ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD           ErrorCode = 16
	ErrorCode_NOT_AUTHENTICATED                          ErrorCode = 17
	ErrorCode_INVALID_IDENTITY_CREDENTIAL                ErrorCode = 18
	ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER          ErrorCode = 19
	ErrorCode_INTERNAL_ERROR                             ErrorCode = 20
	ErrorCode_NO_SUCH_IDENTITY_IDENFIER                  ErrorCode = 21
	ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
	ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL                ErrorCode = 23
	ErrorCode_UNKNOWN_CHANNEL                            ErrorCode = 24
	ErrorCode_NO_SUCH_MESSAGE_BOX                        ErrorCode = 25
	ErrorCode_NOT_AVAILABLE_MESSAGE_BOX                  ErrorCode = 26
	ErrorCode_CHANNEL_DOES_NOT_MATCH                     ErrorCode = 27
	ErrorCode_NOT_YOUR_MESSAGE                           ErrorCode = 28
	ErrorCode_MESSAGE_DEFINED_ERROR                      ErrorCode = 29
	ErrorCode_USER_CANNOT_ACCEPT_PRESENTS                ErrorCode = 30
	ErrorCode_USER_NOT_STICKER_OWNER                     ErrorCode = 32
	ErrorCode_MAINTENANCE_ERROR                          ErrorCode = 33
	ErrorCode_ACCOUNT_NOT_MATCHED                        ErrorCode = 34
	ErrorCode_ABUSE_BLOCK                                ErrorCode = 35
	ErrorCode_NOT_FRIEND                                 ErrorCode = 36
	ErrorCode_NOT_ALLOWED_CALL                           ErrorCode = 37
	ErrorCode_BLOCK_FRIEND                               ErrorCode = 38
	ErrorCode_INCOMPATIBLE_VOIP_VERSION                  ErrorCode = 39
	ErrorCode_INVALID_SNS_ACCESS_TOKEN                   ErrorCode = 40
	ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE             ErrorCode = 41
	ErrorCode_NOT_ALLOWED_ADD_CONTACT                    ErrorCode = 42
	ErrorCode_NOT_CERTIFICATED                           ErrorCode = 43
	ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE               ErrorCode = 44
	ErrorCode_INVALID_PIN_CODE                           ErrorCode = 45
	ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL              ErrorCode = 46
	ErrorCode_EXCEED_FILE_MAX_SIZE                       ErrorCode = 47
	ErrorCode_EXCEED_DAILY_QUOTA                         ErrorCode = 48
	ErrorCode_NOT_SUPPORT_SEND_FILE                      ErrorCode = 49
	ErrorCode_MUST_UPGRADE                               ErrorCode = 50
	ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION             ErrorCode = 51
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_ILLEGAL_ARGUMENT:
		return "ErrorCode_ILLEGAL_ARGUMENT"
	case ErrorCode_AUTHENTICATION_FAILED:
		return "ErrorCode_AUTHENTICATION_FAILED"
	case ErrorCode_DB_FAILED:
		return "ErrorCode_DB_FAILED"
	case ErrorCode_INVALID_STATE:
		return "ErrorCode_INVALID_STATE"
	case ErrorCode_EXCESSIVE_ACCESS:
		return "ErrorCode_EXCESSIVE_ACCESS"
	case ErrorCode_NOT_FOUND:
		return "ErrorCode_NOT_FOUND"
	case ErrorCode_INVALID_LENGTH:
		return "ErrorCode_INVALID_LENGTH"
	case ErrorCode_NOT_AVAILABLE_USER:
		return "ErrorCode_NOT_AVAILABLE_USER"
	case ErrorCode_NOT_AUTHORIZED_DEVICE:
		return "ErrorCode_NOT_AUTHORIZED_DEVICE"
	case ErrorCode_INVALID_MID:
		return "ErrorCode_INVALID_MID"
	case ErrorCode_NOT_A_MEMBER:
		return "ErrorCode_NOT_A_MEMBER"
	case ErrorCode_INCOMPATIBLE_APP_VERSION:
		return "ErrorCode_INCOMPATIBLE_APP_VERSION"
	case ErrorCode_NOT_READY:
		return "ErrorCode_NOT_READY"
	case ErrorCode_NOT_AVAILABLE_SESSION:
		return "ErrorCode_NOT_AVAILABLE_SESSION"
	case ErrorCode_NOT_AUTHORIZED_SESSION:
		return "ErrorCode_NOT_AUTHORIZED_SESSION"
	case ErrorCode_SYSTEM_ERROR:
		return "ErrorCode_SYSTEM_ERROR"
	case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD:
		return "ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD"
	case ErrorCode_NOT_AUTHENTICATED:
		return "ErrorCode_NOT_AUTHENTICATED"
	case ErrorCode_INVALID_IDENTITY_CREDENTIAL:
		return "ErrorCode_INVALID_IDENTITY_CREDENTIAL"
	case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER:
		return "ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER"
	case ErrorCode_INTERNAL_ERROR:
		return "ErrorCode_INTERNAL_ERROR"
	case ErrorCode_NO_SUCH_IDENTITY_IDENFIER:
		return "ErrorCode_NO_SUCH_IDENTITY_IDENFIER"
	case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY:
		return "ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
	case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL:
		return "ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL"
	case ErrorCode_UNKNOWN_CHANNEL:
		return "ErrorCode_UNKNOWN_CHANNEL"
	case ErrorCode_NO_SUCH_MESSAGE_BOX:
		return "ErrorCode_NO_SUCH_MESSAGE_BOX"
	case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX:
		return "ErrorCode_NOT_AVAILABLE_MESSAGE_BOX"
	case ErrorCode_CHANNEL_DOES_NOT_MATCH:
		return "ErrorCode_CHANNEL_DOES_NOT_MATCH"
	case ErrorCode_NOT_YOUR_MESSAGE:
		return "ErrorCode_NOT_YOUR_MESSAGE"
	case ErrorCode_MESSAGE_DEFINED_ERROR:
		return "ErrorCode_MESSAGE_DEFINED_ERROR"
	case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS:
		return "ErrorCode_USER_CANNOT_ACCEPT_PRESENTS"
	case ErrorCode_USER_NOT_STICKER_OWNER:
		return "ErrorCode_USER_NOT_STICKER_OWNER"
	case ErrorCode_MAINTENANCE_ERROR:
		return "ErrorCode_MAINTENANCE_ERROR"
	case ErrorCode_ACCOUNT_NOT_MATCHED:
		return "ErrorCode_ACCOUNT_NOT_MATCHED"
	case ErrorCode_ABUSE_BLOCK:
		return "ErrorCode_ABUSE_BLOCK"
	case ErrorCode_NOT_FRIEND:
		return "ErrorCode_NOT_FRIEND"
	case ErrorCode_NOT_ALLOWED_CALL:
		return "ErrorCode_NOT_ALLOWED_CALL"
	case ErrorCode_BLOCK_FRIEND:
		return "ErrorCode_BLOCK_FRIEND"
	case ErrorCode_INCOMPATIBLE_VOIP_VERSION:
		return "ErrorCode_INCOMPATIBLE_VOIP_VERSION"
	case ErrorCode_INVALID_SNS_ACCESS_TOKEN:
		return "ErrorCode_INVALID_SNS_ACCESS_TOKEN"
	case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE:
		return "ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE"
	case ErrorCode_NOT_ALLOWED_ADD_CONTACT:
		return "ErrorCode_NOT_ALLOWED_ADD_CONTACT"
	case ErrorCode_NOT_CERTIFICATED:
		return "ErrorCode_NOT_CERTIFICATED"
	case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE:
		return "ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE"
	case ErrorCode_INVALID_PIN_CODE:
		return "ErrorCode_INVALID_PIN_CODE"
	case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL:
		return "ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL"
	case ErrorCode_EXCEED_FILE_MAX_SIZE:
		return "ErrorCode_EXCEED_FILE_MAX_SIZE"
	case ErrorCode_EXCEED_DAILY_QUOTA:
		return "ErrorCode_EXCEED_DAILY_QUOTA"
	case ErrorCode_NOT_SUPPORT_SEND_FILE:
		return "ErrorCode_NOT_SUPPORT_SEND_FILE"
	case ErrorCode_MUST_UPGRADE:
		return "ErrorCode_MUST_UPGRADE"
	case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION:
		return "ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_ILLEGAL_ARGUMENT":
		return ErrorCode_ILLEGAL_ARGUMENT, nil
	case "ErrorCode_AUTHENTICATION_FAILED":
		return ErrorCode_AUTHENTICATION_FAILED, nil
	case "ErrorCode_DB_FAILED":
		return ErrorCode_DB_FAILED, nil
	case "ErrorCode_INVALID_STATE":
		return ErrorCode_INVALID_STATE, nil
	case "ErrorCode_EXCESSIVE_ACCESS":
		return ErrorCode_EXCESSIVE_ACCESS, nil
	case "ErrorCode_NOT_FOUND":
		return ErrorCode_NOT_FOUND, nil
	case "ErrorCode_INVALID_LENGTH":
		return ErrorCode_INVALID_LENGTH, nil
	case "ErrorCode_NOT_AVAILABLE_USER":
		return ErrorCode_NOT_AVAILABLE_USER, nil
	case "ErrorCode_NOT_AUTHORIZED_DEVICE":
		return ErrorCode_NOT_AUTHORIZED_DEVICE, nil
	case "ErrorCode_INVALID_MID":
		return ErrorCode_INVALID_MID, nil
	case "ErrorCode_NOT_A_MEMBER":
		return ErrorCode_NOT_A_MEMBER, nil
	case "ErrorCode_INCOMPATIBLE_APP_VERSION":
		return ErrorCode_INCOMPATIBLE_APP_VERSION, nil
	case "ErrorCode_NOT_READY":
		return ErrorCode_NOT_READY, nil
	case "ErrorCode_NOT_AVAILABLE_SESSION":
		return ErrorCode_NOT_AVAILABLE_SESSION, nil
	case "ErrorCode_NOT_AUTHORIZED_SESSION":
		return ErrorCode_NOT_AUTHORIZED_SESSION, nil
	case "ErrorCode_SYSTEM_ERROR":
		return ErrorCode_SYSTEM_ERROR, nil
	case "ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD":
		return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil
	case "ErrorCode_NOT_AUTHENTICATED":
		return ErrorCode_NOT_AUTHENTICATED, nil
	case "ErrorCode_INVALID_IDENTITY_CREDENTIAL":
		return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER":
		return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil
	case "ErrorCode_INTERNAL_ERROR":
		return ErrorCode_INTERNAL_ERROR, nil
	case "ErrorCode_NO_SUCH_IDENTITY_IDENFIER":
		return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil
	case "ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY":
		return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil
	case "ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL":
		return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_UNKNOWN_CHANNEL":
		return ErrorCode_UNKNOWN_CHANNEL, nil
	case "ErrorCode_NO_SUCH_MESSAGE_BOX":
		return ErrorCode_NO_SUCH_MESSAGE_BOX, nil
	case "ErrorCode_NOT_AVAILABLE_MESSAGE_BOX":
		return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil
	case "ErrorCode_CHANNEL_DOES_NOT_MATCH":
		return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil
	case "ErrorCode_NOT_YOUR_MESSAGE":
		return ErrorCode_NOT_YOUR_MESSAGE, nil
	case "ErrorCode_MESSAGE_DEFINED_ERROR":
		return ErrorCode_MESSAGE_DEFINED_ERROR, nil
	case "ErrorCode_USER_CANNOT_ACCEPT_PRESENTS":
		return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil
	case "ErrorCode_USER_NOT_STICKER_OWNER":
		return ErrorCode_USER_NOT_STICKER_OWNER, nil
	case "ErrorCode_MAINTENANCE_ERROR":
		return ErrorCode_MAINTENANCE_ERROR, nil
	case "ErrorCode_ACCOUNT_NOT_MATCHED":
		return ErrorCode_ACCOUNT_NOT_MATCHED, nil
	case "ErrorCode_ABUSE_BLOCK":
		return ErrorCode_ABUSE_BLOCK, nil
	case "ErrorCode_NOT_FRIEND":
		return ErrorCode_NOT_FRIEND, nil
	case "ErrorCode_NOT_ALLOWED_CALL":
		return ErrorCode_NOT_ALLOWED_CALL, nil
	case "ErrorCode_BLOCK_FRIEND":
		return ErrorCode_BLOCK_FRIEND, nil
	case "ErrorCode_INCOMPATIBLE_VOIP_VERSION":
		return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil
	case "ErrorCode_INVALID_SNS_ACCESS_TOKEN":
		return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil
	case "ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE":
		return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil
	case "ErrorCode_NOT_ALLOWED_ADD_CONTACT":
		return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil
	case "ErrorCode_NOT_CERTIFICATED":
		return ErrorCode_NOT_CERTIFICATED, nil
	case "ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE":
		return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil
	case "ErrorCode_INVALID_PIN_CODE":
		return ErrorCode_INVALID_PIN_CODE, nil
	case "ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL":
		return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil
	case "ErrorCode_EXCEED_FILE_MAX_SIZE":
		return ErrorCode_EXCEED_FILE_MAX_SIZE, nil
	case "ErrorCode_EXCEED_DAILY_QUOTA":
		return ErrorCode_EXCEED_DAILY_QUOTA, nil
	case "ErrorCode_NOT_SUPPORT_SEND_FILE":
		return ErrorCode_NOT_SUPPORT_SEND_FILE, nil
	case "ErrorCode_MUST_UPGRADE":
		return ErrorCode_MUST_UPGRADE, nil
	case "ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION":
		return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type FeatureType int64

const (
	FeatureType_OBJECT_STORAGE FeatureType = 1
)

func (p FeatureType) String() string {
	switch p {
	case FeatureType_OBJECT_STORAGE:
		return "FeatureType_OBJECT_STORAGE"
	}
	return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
	switch s {
	case "FeatureType_OBJECT_STORAGE":
		return FeatureType_OBJECT_STORAGE, nil
	}
	return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}

func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

type IdentityProvider int64

const (
	IdentityProvider_UNKNOWN  IdentityProvider = 0
	IdentityProvider_LINE     IdentityProvider = 1
	IdentityProvider_NAVER_KR IdentityProvider = 2
)

func (p IdentityProvider) String() string {
	switch p {
	case IdentityProvider_UNKNOWN:
		return "IdentityProvider_UNKNOWN"
	case IdentityProvider_LINE:
		return "IdentityProvider_LINE"
	case IdentityProvider_NAVER_KR:
		return "IdentityProvider_NAVER_KR"
	}
	return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
	switch s {
	case "IdentityProvider_UNKNOWN":
		return IdentityProvider_UNKNOWN, nil
	case "IdentityProvider_LINE":
		return IdentityProvider_LINE, nil
	case "IdentityProvider_NAVER_KR":
		return IdentityProvider_NAVER_KR, nil
	}
	return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}

func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

type LoginResultType int64

const (
	LoginResultType_SUCCESS                LoginResultType = 1
	LoginResultType_REQUIRE_QRCODE         LoginResultType = 2
	LoginResultType_REQUIRE_DEVICE_CONFIRM LoginResultType = 3
)

func (p LoginResultType) String() string {
	switch p {
	case LoginResultType_SUCCESS:
		return "LoginResultType_SUCCESS"
	case LoginResultType_REQUIRE_QRCODE:
		return "LoginResultType_REQUIRE_QRCODE"
	case LoginResultType_REQUIRE_DEVICE_CONFIRM:
		return "LoginResultType_REQUIRE_DEVICE_CONFIRM"
	}
	return "<UNSET>"
}

func LoginResultTypeFromString(s string) (LoginResultType, error) {
	switch s {
	case "LoginResultType_SUCCESS":
		return LoginResultType_SUCCESS, nil
	case "LoginResultType_REQUIRE_QRCODE":
		return LoginResultType_REQUIRE_QRCODE, nil
	case "LoginResultType_REQUIRE_DEVICE_CONFIRM":
		return LoginResultType_REQUIRE_DEVICE_CONFIRM, nil
	}
	return LoginResultType(0), fmt.Errorf("not a valid LoginResultType string")
}

func LoginResultTypePtr(v LoginResultType) *LoginResultType { return &v }

type MIDType int64

const (
	MIDType_USER  MIDType = 0
	MIDType_ROOM  MIDType = 1
	MIDType_GROUP MIDType = 2
)

func (p MIDType) String() string {
	switch p {
	case MIDType_USER:
		return "MIDType_USER"
	case MIDType_ROOM:
		return "MIDType_ROOM"
	case MIDType_GROUP:
		return "MIDType_GROUP"
	}
	return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
	switch s {
	case "MIDType_USER":
		return MIDType_USER, nil
	case "MIDType_ROOM":
		return MIDType_ROOM, nil
	case "MIDType_GROUP":
		return MIDType_GROUP, nil
	}
	return MIDType(0), fmt.Errorf("not a valid MIDType string")
}

func MIDTypePtr(v MIDType) *MIDType { return &v }

type ModificationType int64

const (
	ModificationType_ADD    ModificationType = 0
	ModificationType_REMOVE ModificationType = 1
	ModificationType_MODIFY ModificationType = 2
)

func (p ModificationType) String() string {
	switch p {
	case ModificationType_ADD:
		return "ModificationType_ADD"
	case ModificationType_REMOVE:
		return "ModificationType_REMOVE"
	case ModificationType_MODIFY:
		return "ModificationType_MODIFY"
	}
	return "<UNSET>"
}

func ModificationTypeFromString(s string) (ModificationType, error) {
	switch s {
	case "ModificationType_ADD":
		return ModificationType_ADD, nil
	case "ModificationType_REMOVE":
		return ModificationType_REMOVE, nil
	case "ModificationType_MODIFY":
		return ModificationType_MODIFY, nil
	}
	return ModificationType(0), fmt.Errorf("not a valid ModificationType string")
}

func ModificationTypePtr(v ModificationType) *ModificationType { return &v }

type NotificationStatus int64

const (
	NotificationStatus_NOTIFICATION_ITEM_EXIST        NotificationStatus = 1
	NotificationStatus_TIMELINE_ITEM_EXIST            NotificationStatus = 2
	NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST      NotificationStatus = 4
	NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED    NotificationStatus = 8
	NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST NotificationStatus = 16
	NotificationStatus_ALBUM_ITEM_EXIST               NotificationStatus = 32
	NotificationStatus_TIMELINE_ITEM_DELETED          NotificationStatus = 64
)

func (p NotificationStatus) String() string {
	switch p {
	case NotificationStatus_NOTIFICATION_ITEM_EXIST:
		return "NotificationStatus_NOTIFICATION_ITEM_EXIST"
	case NotificationStatus_TIMELINE_ITEM_EXIST:
		return "NotificationStatus_TIMELINE_ITEM_EXIST"
	case NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST:
		return "NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST"
	case NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED:
		return "NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED"
	case NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST:
		return "NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
	case NotificationStatus_ALBUM_ITEM_EXIST:
		return "NotificationStatus_ALBUM_ITEM_EXIST"
	case NotificationStatus_TIMELINE_ITEM_DELETED:
		return "NotificationStatus_TIMELINE_ITEM_DELETED"
	}
	return "<UNSET>"
}

func NotificationStatusFromString(s string) (NotificationStatus, error) {
	switch s {
	case "NotificationStatus_NOTIFICATION_ITEM_EXIST":
		return NotificationStatus_NOTIFICATION_ITEM_EXIST, nil
	case "NotificationStatus_TIMELINE_ITEM_EXIST":
		return NotificationStatus_TIMELINE_ITEM_EXIST, nil
	case "NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST":
		return NotificationStatus_NOTE_GROUP_NEW_ITEM_EXIST, nil
	case "NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED":
		return NotificationStatus_TIMELINE_BUDDYGROUP_CHANGED, nil
	case "NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST":
		return NotificationStatus_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, nil
	case "NotificationStatus_ALBUM_ITEM_EXIST":
		return NotificationStatus_ALBUM_ITEM_EXIST, nil
	case "NotificationStatus_TIMELINE_ITEM_DELETED":
		return NotificationStatus_TIMELINE_ITEM_DELETED, nil
	}
	return NotificationStatus(0), fmt.Errorf("not a valid NotificationStatus string")
}

func NotificationStatusPtr(v NotificationStatus) *NotificationStatus { return &v }

type NotificationType int64

const (
	NotificationType_APPLE_APNS  NotificationType = 1
	NotificationType_GOOGLE_C2DM NotificationType = 2
	NotificationType_NHN_NNI     NotificationType = 3
	NotificationType_SKT_AOM     NotificationType = 4
	NotificationType_MS_MPNS     NotificationType = 5
	NotificationType_RIM_BIS     NotificationType = 6
	NotificationType_GOOGLE_GCM  NotificationType = 7
	NotificationType_NOKIA_NNAPI NotificationType = 8
	NotificationType_TIZEN       NotificationType = 9
	NotificationType_LINE_BOT    NotificationType = 17
	NotificationType_LINE_WAP    NotificationType = 18
)

func (p NotificationType) String() string {
	switch p {
	case NotificationType_APPLE_APNS:
		return "NotificationType_APPLE_APNS"
	case NotificationType_GOOGLE_C2DM:
		return "NotificationType_GOOGLE_C2DM"
	case NotificationType_NHN_NNI:
		return "NotificationType_NHN_NNI"
	case NotificationType_SKT_AOM:
		return "NotificationType_SKT_AOM"
	case NotificationType_MS_MPNS:
		return "NotificationType_MS_MPNS"
	case NotificationType_RIM_BIS:
		return "NotificationType_RIM_BIS"
	case NotificationType_GOOGLE_GCM:
		return "NotificationType_GOOGLE_GCM"
	case NotificationType_NOKIA_NNAPI:
		return "NotificationType_NOKIA_NNAPI"
	case NotificationType_TIZEN:
		return "NotificationType_TIZEN"
	case NotificationType_LINE_BOT:
		return "NotificationType_LINE_BOT"
	case NotificationType_LINE_WAP:
		return "NotificationType_LINE_WAP"
	}
	return "<UNSET>"
}

func NotificationTypeFromString(s string) (NotificationType, error) {
	switch s {
	case "NotificationType_APPLE_APNS":
		return NotificationType_APPLE_APNS, nil
	case "NotificationType_GOOGLE_C2DM":
		return NotificationType_GOOGLE_C2DM, nil
	case "NotificationType_NHN_NNI":
		return NotificationType_NHN_NNI, nil
	case "NotificationType_SKT_AOM":
		return NotificationType_SKT_AOM, nil
	case "NotificationType_MS_MPNS":
		return NotificationType_MS_MPNS, nil
	case "NotificationType_RIM_BIS":
		return NotificationType_RIM_BIS, nil
	case "NotificationType_GOOGLE_GCM":
		return NotificationType_GOOGLE_GCM, nil
	case "NotificationType_NOKIA_NNAPI":
		return NotificationType_NOKIA_NNAPI, nil
	case "NotificationType_TIZEN":
		return NotificationType_TIZEN, nil
	case "NotificationType_LINE_BOT":
		return NotificationType_LINE_BOT, nil
	case "NotificationType_LINE_WAP":
		return NotificationType_LINE_WAP, nil
	}
	return NotificationType(0), fmt.Errorf("not a valid NotificationType string")
}

func NotificationTypePtr(v NotificationType) *NotificationType { return &v }

type OpStatus int64

const (
	OpStatus_NORMAL         OpStatus = 0
	OpStatus_ALERT_DISABLED OpStatus = 1
)

func (p OpStatus) String() string {
	switch p {
	case OpStatus_NORMAL:
		return "OpStatus_NORMAL"
	case OpStatus_ALERT_DISABLED:
		return "OpStatus_ALERT_DISABLED"
	}
	return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
	switch s {
	case "OpStatus_NORMAL":
		return OpStatus_NORMAL, nil
	case "OpStatus_ALERT_DISABLED":
		return OpStatus_ALERT_DISABLED, nil
	}
	return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}

func OpStatusPtr(v OpStatus) *OpStatus { return &v }

type OpType int64

const (
	OpType_END_OF_OPERATION                 OpType = 0
	OpType_UPDATE_PROFILE                   OpType = 1
	OpType_NOTIFIED_UPDATE_PROFILE          OpType = 2
	OpType_REGISTER_USERID                  OpType = 3
	OpType_ADD_CONTACT                      OpType = 4
	OpType_NOTIFIED_ADD_CONTACT             OpType = 5
	OpType_BLOCK_CONTACT                    OpType = 6
	OpType_UNBLOCK_CONTACT                  OpType = 7
	OpType_NOTIFIED_RECOMMEND_CONTACT       OpType = 8
	OpType_CREATE_GROUP                     OpType = 9
	OpType_UPDATE_GROUP                     OpType = 10
	OpType_NOTIFIED_UPDATE_GROUP            OpType = 11
	OpType_INVITE_INTO_GROUP                OpType = 12
	OpType_NOTIFIED_INVITE_INTO_GROUP       OpType = 13
	OpType_LEAVE_GROUP                      OpType = 14
	OpType_NOTIFIED_LEAVE_GROUP             OpType = 15
	OpType_ACCEPT_GROUP_INVITATION          OpType = 16
	OpType_NOTIFIED_ACCEPT_GROUP_INVITATION OpType = 17
	OpType_KICKOUT_FROM_GROUP               OpType = 18
	OpType_NOTIFIED_KICKOUT_FROM_GROUP      OpType = 19
	OpType_CREATE_ROOM                      OpType = 20
	OpType_INVITE_INTO_ROOM                 OpType = 21
	OpType_NOTIFIED_INVITE_INTO_ROOM        OpType = 22
	OpType_LEAVE_ROOM                       OpType = 23
	OpType_NOTIFIED_LEAVE_ROOM              OpType = 24
	OpType_SEND_MESSAGE                     OpType = 25
	OpType_RECEIVE_MESSAGE                  OpType = 26
	OpType_SEND_MESSAGE_RECEIPT             OpType = 27
	OpType_RECEIVE_MESSAGE_RECEIPT          OpType = 28
	OpType_SEND_CONTENT_RECEIPT             OpType = 29
	OpType_RECEIVE_ANNOUNCEMENT             OpType = 30
	OpType_CANCEL_INVITATION_GROUP          OpType = 31
	OpType_NOTIFIED_CANCEL_INVITATION_GROUP OpType = 32
	OpType_NOTIFIED_UNREGISTER_USER         OpType = 33
	OpType_REJECT_GROUP_INVITATION          OpType = 34
	OpType_NOTIFIED_REJECT_GROUP_INVITATION OpType = 35
	OpType_UPDATE_SETTINGS                  OpType = 36
	OpType_NOTIFIED_REGISTER_USER           OpType = 37
	OpType_INVITE_VIA_EMAIL                 OpType = 38
	OpType_NOTIFIED_REQUEST_RECOVERY        OpType = 39
	OpType_SEND_CHAT_CHECKED                OpType = 40
	OpType_SEND_CHAT_REMOVED                OpType = 41
	OpType_NOTIFIED_FORCE_SYNC              OpType = 42
	OpType_SEND_CONTENT                     OpType = 43
	OpType_SEND_MESSAGE_MYHOME              OpType = 44
	OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW  OpType = 45
	OpType_REMOVE_ALL_MESSAGES              OpType = 46
	OpType_NOTIFIED_UPDATE_PURCHASES        OpType = 47
	OpType_DUMMY                            OpType = 48
	OpType_UPDATE_CONTACT                   OpType = 49
	OpType_NOTIFIED_RECEIVED_CALL           OpType = 50
	OpType_CANCEL_CALL                      OpType = 51
	OpType_NOTIFIED_REDIRECT                OpType = 52
	OpType_NOTIFIED_CHANNEL_SYNC            OpType = 53
	OpType_FAILED_SEND_MESSAGE              OpType = 54
	OpType_NOTIFIED_READ_MESSAGE            OpType = 55
	OpType_FAILED_EMAIL_CONFIRMATION        OpType = 56
	OpType_NOTIFIED_CHAT_CONTENT            OpType = 58
	OpType_NOTIFIED_PUSH_NOTICENTER_ITEM    OpType = 59
)

func (p OpType) String() string {
	switch p {
	case OpType_END_OF_OPERATION:
		return "OpType_END_OF_OPERATION"
	case OpType_UPDATE_PROFILE:
		return "OpType_UPDATE_PROFILE"
	case OpType_NOTIFIED_UPDATE_PROFILE:
		return "OpType_NOTIFIED_UPDATE_PROFILE"
	case OpType_REGISTER_USERID:
		return "OpType_REGISTER_USERID"
	case OpType_ADD_CONTACT:
		return "OpType_ADD_CONTACT"
	case OpType_NOTIFIED_ADD_CONTACT:
		return "OpType_NOTIFIED_ADD_CONTACT"
	case OpType_BLOCK_CONTACT:
		return "OpType_BLOCK_CONTACT"
	case OpType_UNBLOCK_CONTACT:
		return "OpType_UNBLOCK_CONTACT"
	case OpType_NOTIFIED_RECOMMEND_CONTACT:
		return "OpType_NOTIFIED_RECOMMEND_CONTACT"
	case OpType_CREATE_GROUP:
		return "OpType_CREATE_GROUP"
	case OpType_UPDATE_GROUP:
		return "OpType_UPDATE_GROUP"
	case OpType_NOTIFIED_UPDATE_GROUP:
		return "OpType_NOTIFIED_UPDATE_GROUP"
	case OpType_INVITE_INTO_GROUP:
		return "OpType_INVITE_INTO_GROUP"
	case OpType_NOTIFIED_INVITE_INTO_GROUP:
		return "OpType_NOTIFIED_INVITE_INTO_GROUP"
	case OpType_LEAVE_GROUP:
		return "OpType_LEAVE_GROUP"
	case OpType_NOTIFIED_LEAVE_GROUP:
		return "OpType_NOTIFIED_LEAVE_GROUP"
	case OpType_ACCEPT_GROUP_INVITATION:
		return "OpType_ACCEPT_GROUP_INVITATION"
	case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION:
		return "OpType_NOTIFIED_ACCEPT_GROUP_INVITATION"
	case OpType_KICKOUT_FROM_GROUP:
		return "OpType_KICKOUT_FROM_GROUP"
	case OpType_NOTIFIED_KICKOUT_FROM_GROUP:
		return "OpType_NOTIFIED_KICKOUT_FROM_GROUP"
	case OpType_CREATE_ROOM:
		return "OpType_CREATE_ROOM"
	case OpType_INVITE_INTO_ROOM:
		return "OpType_INVITE_INTO_ROOM"
	case OpType_NOTIFIED_INVITE_INTO_ROOM:
		return "OpType_NOTIFIED_INVITE_INTO_ROOM"
	case OpType_LEAVE_ROOM:
		return "OpType_LEAVE_ROOM"
	case OpType_NOTIFIED_LEAVE_ROOM:
		return "OpType_NOTIFIED_LEAVE_ROOM"
	case OpType_SEND_MESSAGE:
		return "OpType_SEND_MESSAGE"
	case OpType_RECEIVE_MESSAGE:
		return "OpType_RECEIVE_MESSAGE"
	case OpType_SEND_MESSAGE_RECEIPT:
		return "OpType_SEND_MESSAGE_RECEIPT"
	case OpType_RECEIVE_MESSAGE_RECEIPT:
		return "OpType_RECEIVE_MESSAGE_RECEIPT"
	case OpType_SEND_CONTENT_RECEIPT:
		return "OpType_SEND_CONTENT_RECEIPT"
	case OpType_RECEIVE_ANNOUNCEMENT:
		return "OpType_RECEIVE_ANNOUNCEMENT"
	case OpType_CANCEL_INVITATION_GROUP:
		return "OpType_CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_CANCEL_INVITATION_GROUP:
		return "OpType_NOTIFIED_CANCEL_INVITATION_GROUP"
	case OpType_NOTIFIED_UNREGISTER_USER:
		return "OpType_NOTIFIED_UNREGISTER_USER"
	case OpType_REJECT_GROUP_INVITATION:
		return "OpType_REJECT_GROUP_INVITATION"
	case OpType_NOTIFIED_REJECT_GROUP_INVITATION:
		return "OpType_NOTIFIED_REJECT_GROUP_INVITATION"
	case OpType_UPDATE_SETTINGS:
		return "OpType_UPDATE_SETTINGS"
	case OpType_NOTIFIED_REGISTER_USER:
		return "OpType_NOTIFIED_REGISTER_USER"
	case OpType_INVITE_VIA_EMAIL:
		return "OpType_INVITE_VIA_EMAIL"
	case OpType_NOTIFIED_REQUEST_RECOVERY:
		return "OpType_NOTIFIED_REQUEST_RECOVERY"
	case OpType_SEND_CHAT_CHECKED:
		return "OpType_SEND_CHAT_CHECKED"
	case OpType_SEND_CHAT_REMOVED:
		return "OpType_SEND_CHAT_REMOVED"
	case OpType_NOTIFIED_FORCE_SYNC:
		return "OpType_NOTIFIED_FORCE_SYNC"
	case OpType_SEND_CONTENT:
		return "OpType_SEND_CONTENT"
	case OpType_SEND_MESSAGE_MYHOME:
		return "OpType_SEND_MESSAGE_MYHOME"
	case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW:
		return "OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW"
	case OpType_REMOVE_ALL_MESSAGES:
		return "OpType_REMOVE_ALL_MESSAGES"
	case OpType_NOTIFIED_UPDATE_PURCHASES:
		return "OpType_NOTIFIED_UPDATE_PURCHASES"
	case OpType_DUMMY:
		return "OpType_DUMMY"
	case OpType_UPDATE_CONTACT:
		return "OpType_UPDATE_CONTACT"
	case OpType_NOTIFIED_RECEIVED_CALL:
		return "OpType_NOTIFIED_RECEIVED_CALL"
	case OpType_CANCEL_CALL:
		return "OpType_CANCEL_CALL"
	case OpType_NOTIFIED_REDIRECT:
		return "OpType_NOTIFIED_REDIRECT"
	case OpType_NOTIFIED_CHANNEL_SYNC:
		return "OpType_NOTIFIED_CHANNEL_SYNC"
	case OpType_FAILED_SEND_MESSAGE:
		return "OpType_FAILED_SEND_MESSAGE"
	case OpType_NOTIFIED_READ_MESSAGE:
		return "OpType_NOTIFIED_READ_MESSAGE"
	case OpType_FAILED_EMAIL_CONFIRMATION:
		return "OpType_FAILED_EMAIL_CONFIRMATION"
	case OpType_NOTIFIED_CHAT_CONTENT:
		return "OpType_NOTIFIED_CHAT_CONTENT"
	case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM:
		return "OpType_NOTIFIED_PUSH_NOTICENTER_ITEM"
	}
	return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
	switch s {
	case "OpType_END_OF_OPERATION":
		return OpType_END_OF_OPERATION, nil
	case "OpType_UPDATE_PROFILE":
		return OpType_UPDATE_PROFILE, nil
	case "OpType_NOTIFIED_UPDATE_PROFILE":
		return OpType_NOTIFIED_UPDATE_PROFILE, nil
	case "OpType_REGISTER_USERID":
		return OpType_REGISTER_USERID, nil
	case "OpType_ADD_CONTACT":
		return OpType_ADD_CONTACT, nil
	case "OpType_NOTIFIED_ADD_CONTACT":
		return OpType_NOTIFIED_ADD_CONTACT, nil
	case "OpType_BLOCK_CONTACT":
		return OpType_BLOCK_CONTACT, nil
	case "OpType_UNBLOCK_CONTACT":
		return OpType_UNBLOCK_CONTACT, nil
	case "OpType_NOTIFIED_RECOMMEND_CONTACT":
		return OpType_NOTIFIED_RECOMMEND_CONTACT, nil
	case "OpType_CREATE_GROUP":
		return OpType_CREATE_GROUP, nil
	case "OpType_UPDATE_GROUP":
		return OpType_UPDATE_GROUP, nil
	case "OpType_NOTIFIED_UPDATE_GROUP":
		return OpType_NOTIFIED_UPDATE_GROUP, nil
	case "OpType_INVITE_INTO_GROUP":
		return OpType_INVITE_INTO_GROUP, nil
	case "OpType_NOTIFIED_INVITE_INTO_GROUP":
		return OpType_NOTIFIED_INVITE_INTO_GROUP, nil
	case "OpType_LEAVE_GROUP":
		return OpType_LEAVE_GROUP, nil
	case "OpType_NOTIFIED_LEAVE_GROUP":
		return OpType_NOTIFIED_LEAVE_GROUP, nil
	case "OpType_ACCEPT_GROUP_INVITATION":
		return OpType_ACCEPT_GROUP_INVITATION, nil
	case "OpType_NOTIFIED_ACCEPT_GROUP_INVITATION":
		return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil
	case "OpType_KICKOUT_FROM_GROUP":
		return OpType_KICKOUT_FROM_GROUP, nil
	case "OpType_NOTIFIED_KICKOUT_FROM_GROUP":
		return OpType_NOTIFIED_KICKOUT_FROM_GROUP, nil
	case "OpType_CREATE_ROOM":
		return OpType_CREATE_ROOM, nil
	case "OpType_INVITE_INTO_ROOM":
		return OpType_INVITE_INTO_ROOM, nil
	case "OpType_NOTIFIED_INVITE_INTO_ROOM":
		return OpType_NOTIFIED_INVITE_INTO_ROOM, nil
	case "OpType_LEAVE_ROOM":
		return OpType_LEAVE_ROOM, nil
	case "OpType_NOTIFIED_LEAVE_ROOM":
		return OpType_NOTIFIED_LEAVE_ROOM, nil
	case "OpType_SEND_MESSAGE":
		return OpType_SEND_MESSAGE, nil
	case "OpType_RECEIVE_MESSAGE":
		return OpType_RECEIVE_MESSAGE, nil
	case "OpType_SEND_MESSAGE_RECEIPT":
		return OpType_SEND_MESSAGE_RECEIPT, nil
	case "OpType_RECEIVE_MESSAGE_RECEIPT":
		return OpType_RECEIVE_MESSAGE_RECEIPT, nil
	case "OpType_SEND_CONTENT_RECEIPT":
		return OpType_SEND_CONTENT_RECEIPT, nil
	case "OpType_RECEIVE_ANNOUNCEMENT":
		return OpType_RECEIVE_ANNOUNCEMENT, nil
	case "OpType_CANCEL_INVITATION_GROUP":
		return OpType_CANCEL_INVITATION_GROUP, nil
	case "OpType_NOTIFIED_CANCEL_INVITATION_GROUP":
		return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil
	case "OpType_NOTIFIED_UNREGISTER_USER":
		return OpType_NOTIFIED_UNREGISTER_USER, nil
	case "OpType_REJECT_GROUP_INVITATION":
		return OpType_REJECT_GROUP_INVITATION, nil
	case "OpType_NOTIFIED_REJECT_GROUP_INVITATION":
		return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil
	case "OpType_UPDATE_SETTINGS":
		return OpType_UPDATE_SETTINGS, nil
	case "OpType_NOTIFIED_REGISTER_USER":
		return OpType_NOTIFIED_REGISTER_USER, nil
	case "OpType_INVITE_VIA_EMAIL":
		return OpType_INVITE_VIA_EMAIL, nil
	case "OpType_NOTIFIED_REQUEST_RECOVERY":
		return OpType_NOTIFIED_REQUEST_RECOVERY, nil
	case "OpType_SEND_CHAT_CHECKED":
		return OpType_SEND_CHAT_CHECKED, nil
	case "OpType_SEND_CHAT_REMOVED":
		return OpType_SEND_CHAT_REMOVED, nil
	case "OpType_NOTIFIED_FORCE_SYNC":
		return OpType_NOTIFIED_FORCE_SYNC, nil
	case "OpType_SEND_CONTENT":
		return OpType_SEND_CONTENT, nil
	case "OpType_SEND_MESSAGE_MYHOME":
		return OpType_SEND_MESSAGE_MYHOME, nil
	case "OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW":
		return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil
	case "OpType_REMOVE_ALL_MESSAGES":
		return OpType_REMOVE_ALL_MESSAGES, nil
	case "OpType_NOTIFIED_UPDATE_PURCHASES":
		return OpType_NOTIFIED_UPDATE_PURCHASES, nil
	case "OpType_DUMMY":
		return OpType_DUMMY, nil
	case "OpType_UPDATE_CONTACT":
		return OpType_UPDATE_CONTACT, nil
	case "OpType_NOTIFIED_RECEIVED_CALL":
		return OpType_NOTIFIED_RECEIVED_CALL, nil
	case "OpType_CANCEL_CALL":
		return OpType_CANCEL_CALL, nil
	case "OpType_NOTIFIED_REDIRECT":
		return OpType_NOTIFIED_REDIRECT, nil
	case "OpType_NOTIFIED_CHANNEL_SYNC":
		return OpType_NOTIFIED_CHANNEL_SYNC, nil
	case "OpType_FAILED_SEND_MESSAGE":
		return OpType_FAILED_SEND_MESSAGE, nil
	case "OpType_NOTIFIED_READ_MESSAGE":
		return OpType_NOTIFIED_READ_MESSAGE, nil
	case "OpType_FAILED_EMAIL_CONFIRMATION":
		return OpType_FAILED_EMAIL_CONFIRMATION, nil
	case "OpType_NOTIFIED_CHAT_CONTENT":
		return OpType_NOTIFIED_CHAT_CONTENT, nil
	case "OpType_NOTIFIED_PUSH_NOTICENTER_ITEM":
		return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil
	}
	return OpType(0), fmt.Errorf("not a valid OpType string")
}

func OpTypePtr(v OpType) *OpType { return &v }

type PayloadType int64

const (
	PayloadType_PAYLOAD_BUY   PayloadType = 101
	PayloadType_PAYLOAD_CS    PayloadType = 111
	PayloadType_PAYLOAD_BONUS PayloadType = 121
	PayloadType_PAYLOAD_EVENT PayloadType = 131
)

func (p PayloadType) String() string {
	switch p {
	case PayloadType_PAYLOAD_BUY:
		return "PayloadType_PAYLOAD_BUY"
	case PayloadType_PAYLOAD_CS:
		return "PayloadType_PAYLOAD_CS"
	case PayloadType_PAYLOAD_BONUS:
		return "PayloadType_PAYLOAD_BONUS"
	case PayloadType_PAYLOAD_EVENT:
		return "PayloadType_PAYLOAD_EVENT"
	}
	return "<UNSET>"
}

func PayloadTypeFromString(s string) (PayloadType, error) {
	switch s {
	case "PayloadType_PAYLOAD_BUY":
		return PayloadType_PAYLOAD_BUY, nil
	case "PayloadType_PAYLOAD_CS":
		return PayloadType_PAYLOAD_CS, nil
	case "PayloadType_PAYLOAD_BONUS":
		return PayloadType_PAYLOAD_BONUS, nil
	case "PayloadType_PAYLOAD_EVENT":
		return PayloadType_PAYLOAD_EVENT, nil
	}
	return PayloadType(0), fmt.Errorf("not a valid PayloadType string")
}

func PayloadTypePtr(v PayloadType) *PayloadType { return &v }

type PaymentPgType int64

const (
	PaymentPgType_PAYMENT_PG_NONE PaymentPgType = 0
	PaymentPgType_PAYMENT_PG_AU   PaymentPgType = 1
	PaymentPgType_PAYMENT_PG_AL   PaymentPgType = 2
)

func (p PaymentPgType) String() string {
	switch p {
	case PaymentPgType_PAYMENT_PG_NONE:
		return "PaymentPgType_PAYMENT_PG_NONE"
	case PaymentPgType_PAYMENT_PG_AU:
		return "PaymentPgType_PAYMENT_PG_AU"
	case PaymentPgType_PAYMENT_PG_AL:
		return "PaymentPgType_PAYMENT_PG_AL"
	}
	return "<UNSET>"
}

func PaymentPgTypeFromString(s string) (PaymentPgType, error) {
	switch s {
	case "PaymentPgType_PAYMENT_PG_NONE":
		return PaymentPgType_PAYMENT_PG_NONE, nil
	case "PaymentPgType_PAYMENT_PG_AU":
		return PaymentPgType_PAYMENT_PG_AU, nil
	case "PaymentPgType_PAYMENT_PG_AL":
		return PaymentPgType_PAYMENT_PG_AL, nil
	}
	return PaymentPgType(0), fmt.Errorf("not a valid PaymentPgType string")
}

func PaymentPgTypePtr(v PaymentPgType) *PaymentPgType { return &v }

type PaymentType int64

const (
	PaymentType_PAYMENT_APPLE  PaymentType = 1
	PaymentType_PAYMENT_GOOGLE PaymentType = 2
)

func (p PaymentType) String() string {
	switch p {
	case PaymentType_PAYMENT_APPLE:
		return "PaymentType_PAYMENT_APPLE"
	case PaymentType_PAYMENT_GOOGLE:
		return "PaymentType_PAYMENT_GOOGLE"
	}
	return "<UNSET>"
}

func PaymentTypeFromString(s string) (PaymentType, error) {
	switch s {
	case "PaymentType_PAYMENT_APPLE":
		return PaymentType_PAYMENT_APPLE, nil
	case "PaymentType_PAYMENT_GOOGLE":
		return PaymentType_PAYMENT_GOOGLE, nil
	}
	return PaymentType(0), fmt.Errorf("not a valid PaymentType string")
}

func PaymentTypePtr(v PaymentType) *PaymentType { return &v }

type ProductBannerLinkType int64

const (
	ProductBannerLinkType_BANNER_LINK_NONE     ProductBannerLinkType = 0
	ProductBannerLinkType_BANNER_LINK_ITEM     ProductBannerLinkType = 1
	ProductBannerLinkType_BANNER_LINK_URL      ProductBannerLinkType = 2
	ProductBannerLinkType_BANNER_LINK_CATEGORY ProductBannerLinkType = 3
)

func (p ProductBannerLinkType) String() string {
	switch p {
	case ProductBannerLinkType_BANNER_LINK_NONE:
		return "ProductBannerLinkType_BANNER_LINK_NONE"
	case ProductBannerLinkType_BANNER_LINK_ITEM:
		return "ProductBannerLinkType_BANNER_LINK_ITEM"
	case ProductBannerLinkType_BANNER_LINK_URL:
		return "ProductBannerLinkType_BANNER_LINK_URL"
	case ProductBannerLinkType_BANNER_LINK_CATEGORY:
		return "ProductBannerLinkType_BANNER_LINK_CATEGORY"
	}
	return "<UNSET>"
}

func ProductBannerLinkTypeFromString(s string) (ProductBannerLinkType, error) {
	switch s {
	case "ProductBannerLinkType_BANNER_LINK_NONE":
		return ProductBannerLinkType_BANNER_LINK_NONE, nil
	case "ProductBannerLinkType_BANNER_LINK_ITEM":
		return ProductBannerLinkType_BANNER_LINK_ITEM, nil
	case "ProductBannerLinkType_BANNER_LINK_URL":
		return ProductBannerLinkType_BANNER_LINK_URL, nil
	case "ProductBannerLinkType_BANNER_LINK_CATEGORY":
		return ProductBannerLinkType_BANNER_LINK_CATEGORY, nil
	}
	return ProductBannerLinkType(0), fmt.Errorf("not a valid ProductBannerLinkType string")
}

func ProductBannerLinkTypePtr(v ProductBannerLinkType) *ProductBannerLinkType { return &v }

type ProductEventType int64

const (
	ProductEventType_NO_EVENT        ProductEventType = 0
	ProductEventType_CARRIER_ANY     ProductEventType = 65537
	ProductEventType_BUDDY_ANY       ProductEventType = 131073
	ProductEventType_INSTALL_IOS     ProductEventType = 196609
	ProductEventType_INSTALL_ANDROID ProductEventType = 196610
	ProductEventType_MISSION_ANY     ProductEventType = 262145
	ProductEventType_MUSTBUY_ANY     ProductEventType = 327681
)

func (p ProductEventType) String() string {
	switch p {
	case ProductEventType_NO_EVENT:
		return "ProductEventType_NO_EVENT"
	case ProductEventType_CARRIER_ANY:
		return "ProductEventType_CARRIER_ANY"
	case ProductEventType_BUDDY_ANY:
		return "ProductEventType_BUDDY_ANY"
	case ProductEventType_INSTALL_IOS:
		return "ProductEventType_INSTALL_IOS"
	case ProductEventType_INSTALL_ANDROID:
		return "ProductEventType_INSTALL_ANDROID"
	case ProductEventType_MISSION_ANY:
		return "ProductEventType_MISSION_ANY"
	case ProductEventType_MUSTBUY_ANY:
		return "ProductEventType_MUSTBUY_ANY"
	}
	return "<UNSET>"
}

func ProductEventTypeFromString(s string) (ProductEventType, error) {
	switch s {
	case "ProductEventType_NO_EVENT":
		return ProductEventType_NO_EVENT, nil
	case "ProductEventType_CARRIER_ANY":
		return ProductEventType_CARRIER_ANY, nil
	case "ProductEventType_BUDDY_ANY":
		return ProductEventType_BUDDY_ANY, nil
	case "ProductEventType_INSTALL_IOS":
		return ProductEventType_INSTALL_IOS, nil
	case "ProductEventType_INSTALL_ANDROID":
		return ProductEventType_INSTALL_ANDROID, nil
	case "ProductEventType_MISSION_ANY":
		return ProductEventType_MISSION_ANY, nil
	case "ProductEventType_MUSTBUY_ANY":
		return ProductEventType_MUSTBUY_ANY, nil
	}
	return ProductEventType(0), fmt.Errorf("not a valid ProductEventType string")
}

func ProductEventTypePtr(v ProductEventType) *ProductEventType { return &v }

type ProfileAttribute int64

const (
	ProfileAttribute_EMAIL                  ProfileAttribute = 1
	ProfileAttribute_DISPLAY_NAME           ProfileAttribute = 2
	ProfileAttribute_PHONETIC_NAME          ProfileAttribute = 4
	ProfileAttribute_PICTURE                ProfileAttribute = 8
	ProfileAttribute_STATUS_MESSAGE         ProfileAttribute = 16
	ProfileAttribute_ALLOW_SEARCH_BY_USERID ProfileAttribute = 32
	ProfileAttribute_ALLOW_SEARCH_BY_EMAIL  ProfileAttribute = 64
	ProfileAttribute_BUDDY_STATUS           ProfileAttribute = 128
	ProfileAttribute_ALL                    ProfileAttribute = 255
)

func (p ProfileAttribute) String() string {
	switch p {
	case ProfileAttribute_EMAIL:
		return "ProfileAttribute_EMAIL"
	case ProfileAttribute_DISPLAY_NAME:
		return "ProfileAttribute_DISPLAY_NAME"
	case ProfileAttribute_PHONETIC_NAME:
		return "ProfileAttribute_PHONETIC_NAME"
	case ProfileAttribute_PICTURE:
		return "ProfileAttribute_PICTURE"
	case ProfileAttribute_STATUS_MESSAGE:
		return "ProfileAttribute_STATUS_MESSAGE"
	case ProfileAttribute_ALLOW_SEARCH_BY_USERID:
		return "ProfileAttribute_ALLOW_SEARCH_BY_USERID"
	case ProfileAttribute_ALLOW_SEARCH_BY_EMAIL:
		return "ProfileAttribute_ALLOW_SEARCH_BY_EMAIL"
	case ProfileAttribute_BUDDY_STATUS:
		return "ProfileAttribute_BUDDY_STATUS"
	case ProfileAttribute_ALL:
		return "ProfileAttribute_ALL"
	}
	return "<UNSET>"
}

func ProfileAttributeFromString(s string) (ProfileAttribute, error) {
	switch s {
	case "ProfileAttribute_EMAIL":
		return ProfileAttribute_EMAIL, nil
	case "ProfileAttribute_DISPLAY_NAME":
		return ProfileAttribute_DISPLAY_NAME, nil
	case "ProfileAttribute_PHONETIC_NAME":
		return ProfileAttribute_PHONETIC_NAME, nil
	case "ProfileAttribute_PICTURE":
		return ProfileAttribute_PICTURE, nil
	case "ProfileAttribute_STATUS_MESSAGE":
		return ProfileAttribute_STATUS_MESSAGE, nil
	case "ProfileAttribute_ALLOW_SEARCH_BY_USERID":
		return ProfileAttribute_ALLOW_SEARCH_BY_USERID, nil
	case "ProfileAttribute_ALLOW_SEARCH_BY_EMAIL":
		return ProfileAttribute_ALLOW_SEARCH_BY_EMAIL, nil
	case "ProfileAttribute_BUDDY_STATUS":
		return ProfileAttribute_BUDDY_STATUS, nil
	case "ProfileAttribute_ALL":
		return ProfileAttribute_ALL, nil
	}
	return ProfileAttribute(0), fmt.Errorf("not a valid ProfileAttribute string")
}

func ProfileAttributePtr(v ProfileAttribute) *ProfileAttribute { return &v }

type SettingsAttribute int64

const (
	SettingsAttribute_NOTIFICATION_ENABLE                   SettingsAttribute = 1
	SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION          SettingsAttribute = 2
	SettingsAttribute_NOTIFICATION_NEW_MESSAGE              SettingsAttribute = 4
	SettingsAttribute_NOTIFICATION_GROUP_INVITATION         SettingsAttribute = 8
	SettingsAttribute_NOTIFICATION_SHOW_MESSAGE             SettingsAttribute = 16
	SettingsAttribute_NOTIFICATION_INCOMING_CALL            SettingsAttribute = 32
	SettingsAttribute_PRIVACY_SYNC_CONTACTS                 SettingsAttribute = 64
	SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER        SettingsAttribute = 128
	SettingsAttribute_NOTIFICATION_SOUND_MESSAGE            SettingsAttribute = 256
	SettingsAttribute_NOTIFICATION_SOUND_GROUP              SettingsAttribute = 512
	SettingsAttribute_CONTACT_MY_TICKET                     SettingsAttribute = 1024
	SettingsAttribute_IDENTITY_PROVIDER                     SettingsAttribute = 2048
	SettingsAttribute_IDENTITY_IDENTIFIER                   SettingsAttribute = 4096
	SettingsAttribute_PRIVACY_SEARCH_BY_USERID              SettingsAttribute = 8192
	SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL               SettingsAttribute = 16384
	SettingsAttribute_PREFERENCE_LOCALE                     SettingsAttribute = 32768
	SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB        SettingsAttribute = 65536
	SettingsAttribute_SNS_ACCOUNT                           SettingsAttribute = 524288
	SettingsAttribute_PHONE_REGISTRATION                    SettingsAttribute = 1048576
	SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN  SettingsAttribute = 2097152
	SettingsAttribute_CUSTOM_MODE                           SettingsAttribute = 4194304
	SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME  SettingsAttribute = 8388608
	SettingsAttribute_EMAIL_CONFIRMATION_STATUS             SettingsAttribute = 16777216
	SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttribute = 33554432
	SettingsAttribute_ALL                                   SettingsAttribute = 2147483647
)

func (p SettingsAttribute) String() string {
	switch p {
	case SettingsAttribute_NOTIFICATION_ENABLE:
		return "SettingsAttribute_NOTIFICATION_ENABLE"
	case SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION:
		return "SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION"
	case SettingsAttribute_NOTIFICATION_NEW_MESSAGE:
		return "SettingsAttribute_NOTIFICATION_NEW_MESSAGE"
	case SettingsAttribute_NOTIFICATION_GROUP_INVITATION:
		return "SettingsAttribute_NOTIFICATION_GROUP_INVITATION"
	case SettingsAttribute_NOTIFICATION_SHOW_MESSAGE:
		return "SettingsAttribute_NOTIFICATION_SHOW_MESSAGE"
	case SettingsAttribute_NOTIFICATION_INCOMING_CALL:
		return "SettingsAttribute_NOTIFICATION_INCOMING_CALL"
	case SettingsAttribute_PRIVACY_SYNC_CONTACTS:
		return "SettingsAttribute_PRIVACY_SYNC_CONTACTS"
	case SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER:
		return "SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER"
	case SettingsAttribute_NOTIFICATION_SOUND_MESSAGE:
		return "SettingsAttribute_NOTIFICATION_SOUND_MESSAGE"
	case SettingsAttribute_NOTIFICATION_SOUND_GROUP:
		return "SettingsAttribute_NOTIFICATION_SOUND_GROUP"
	case SettingsAttribute_CONTACT_MY_TICKET:
		return "SettingsAttribute_CONTACT_MY_TICKET"
	case SettingsAttribute_IDENTITY_PROVIDER:
		return "SettingsAttribute_IDENTITY_PROVIDER"
	case SettingsAttribute_IDENTITY_IDENTIFIER:
		return "SettingsAttribute_IDENTITY_IDENTIFIER"
	case SettingsAttribute_PRIVACY_SEARCH_BY_USERID:
		return "SettingsAttribute_PRIVACY_SEARCH_BY_USERID"
	case SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL:
		return "SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL"
	case SettingsAttribute_PREFERENCE_LOCALE:
		return "SettingsAttribute_PREFERENCE_LOCALE"
	case SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB:
		return "SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB"
	case SettingsAttribute_SNS_ACCOUNT:
		return "SettingsAttribute_SNS_ACCOUNT"
	case SettingsAttribute_PHONE_REGISTRATION:
		return "SettingsAttribute_PHONE_REGISTRATION"
	case SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
		return "SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
	case SettingsAttribute_CUSTOM_MODE:
		return "SettingsAttribute_CUSTOM_MODE"
	case SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
		return "SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
	case SettingsAttribute_EMAIL_CONFIRMATION_STATUS:
		return "SettingsAttribute_EMAIL_CONFIRMATION_STATUS"
	case SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND:
		return "SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
	case SettingsAttribute_ALL:
		return "SettingsAttribute_ALL"
	}
	return "<UNSET>"
}

func SettingsAttributeFromString(s string) (SettingsAttribute, error) {
	switch s {
	case "SettingsAttribute_NOTIFICATION_ENABLE":
		return SettingsAttribute_NOTIFICATION_ENABLE, nil
	case "SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION":
		return SettingsAttribute_NOTIFICATION_MUTE_EXPIRATION, nil
	case "SettingsAttribute_NOTIFICATION_NEW_MESSAGE":
		return SettingsAttribute_NOTIFICATION_NEW_MESSAGE, nil
	case "SettingsAttribute_NOTIFICATION_GROUP_INVITATION":
		return SettingsAttribute_NOTIFICATION_GROUP_INVITATION, nil
	case "SettingsAttribute_NOTIFICATION_SHOW_MESSAGE":
		return SettingsAttribute_NOTIFICATION_SHOW_MESSAGE, nil
	case "SettingsAttribute_NOTIFICATION_INCOMING_CALL":
		return SettingsAttribute_NOTIFICATION_INCOMING_CALL, nil
	case "SettingsAttribute_PRIVACY_SYNC_CONTACTS":
		return SettingsAttribute_PRIVACY_SYNC_CONTACTS, nil
	case "SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER":
		return SettingsAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil
	case "SettingsAttribute_NOTIFICATION_SOUND_MESSAGE":
		return SettingsAttribute_NOTIFICATION_SOUND_MESSAGE, nil
	case "SettingsAttribute_NOTIFICATION_SOUND_GROUP":
		return SettingsAttribute_NOTIFICATION_SOUND_GROUP, nil
	case "SettingsAttribute_CONTACT_MY_TICKET":
		return SettingsAttribute_CONTACT_MY_TICKET, nil
	case "SettingsAttribute_IDENTITY_PROVIDER":
		return SettingsAttribute_IDENTITY_PROVIDER, nil
	case "SettingsAttribute_IDENTITY_IDENTIFIER":
		return SettingsAttribute_IDENTITY_IDENTIFIER, nil
	case "SettingsAttribute_PRIVACY_SEARCH_BY_USERID":
		return SettingsAttribute_PRIVACY_SEARCH_BY_USERID, nil
	case "SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL":
		return SettingsAttribute_PRIVACY_SEARCH_BY_EMAIL, nil
	case "SettingsAttribute_PREFERENCE_LOCALE":
		return SettingsAttribute_PREFERENCE_LOCALE, nil
	case "SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB":
		return SettingsAttribute_NOTIFICATION_DISABLED_WITH_SUB, nil
	case "SettingsAttribute_SNS_ACCOUNT":
		return SettingsAttribute_SNS_ACCOUNT, nil
	case "SettingsAttribute_PHONE_REGISTRATION":
		return SettingsAttribute_PHONE_REGISTRATION, nil
	case "SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN":
		return SettingsAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil
	case "SettingsAttribute_CUSTOM_MODE":
		return SettingsAttribute_CUSTOM_MODE, nil
	case "SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME":
		return SettingsAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil
	case "SettingsAttribute_EMAIL_CONFIRMATION_STATUS":
		return SettingsAttribute_EMAIL_CONFIRMATION_STATUS, nil
	case "SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND":
		return SettingsAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil
	case "SettingsAttribute_ALL":
		return SettingsAttribute_ALL, nil
	}
	return SettingsAttribute(0), fmt.Errorf("not a valid SettingsAttribute string")
}

func SettingsAttributePtr(v SettingsAttribute) *SettingsAttribute { return &v }

type SnsIdType int64

const (
	SnsIdType_FACEBOOK SnsIdType = 1
	SnsIdType_SINA     SnsIdType = 2
	SnsIdType_RENREN   SnsIdType = 3
	SnsIdType_FEIXIN   SnsIdType = 4
)

func (p SnsIdType) String() string {
	switch p {
	case SnsIdType_FACEBOOK:
		return "SnsIdType_FACEBOOK"
	case SnsIdType_SINA:
		return "SnsIdType_SINA"
	case SnsIdType_RENREN:
		return "SnsIdType_RENREN"
	case SnsIdType_FEIXIN:
		return "SnsIdType_FEIXIN"
	}
	return "<UNSET>"
}

func SnsIdTypeFromString(s string) (SnsIdType, error) {
	switch s {
	case "SnsIdType_FACEBOOK":
		return SnsIdType_FACEBOOK, nil
	case "SnsIdType_SINA":
		return SnsIdType_SINA, nil
	case "SnsIdType_RENREN":
		return SnsIdType_RENREN, nil
	case "SnsIdType_FEIXIN":
		return SnsIdType_FEIXIN, nil
	}
	return SnsIdType(0), fmt.Errorf("not a valid SnsIdType string")
}

func SnsIdTypePtr(v SnsIdType) *SnsIdType { return &v }

type SpammerReason int64

const (
	SpammerReason_OTHER             SpammerReason = 0
	SpammerReason_ADVERTISING       SpammerReason = 1
	SpammerReason_GENDER_HARASSMENT SpammerReason = 2
	SpammerReason_HARASSMENT        SpammerReason = 3
)

func (p SpammerReason) String() string {
	switch p {
	case SpammerReason_OTHER:
		return "SpammerReason_OTHER"
	case SpammerReason_ADVERTISING:
		return "SpammerReason_ADVERTISING"
	case SpammerReason_GENDER_HARASSMENT:
		return "SpammerReason_GENDER_HARASSMENT"
	case SpammerReason_HARASSMENT:
		return "SpammerReason_HARASSMENT"
	}
	return "<UNSET>"
}

func SpammerReasonFromString(s string) (SpammerReason, error) {
	switch s {
	case "SpammerReason_OTHER":
		return SpammerReason_OTHER, nil
	case "SpammerReason_ADVERTISING":
		return SpammerReason_ADVERTISING, nil
	case "SpammerReason_GENDER_HARASSMENT":
		return SpammerReason_GENDER_HARASSMENT, nil
	case "SpammerReason_HARASSMENT":
		return SpammerReason_HARASSMENT, nil
	}
	return SpammerReason(0), fmt.Errorf("not a valid SpammerReason string")
}

func SpammerReasonPtr(v SpammerReason) *SpammerReason { return &v }

type SyncActionType int64

const (
	SyncActionType_SYNC   SyncActionType = 0
	SyncActionType_REPORT SyncActionType = 1
)

func (p SyncActionType) String() string {
	switch p {
	case SyncActionType_SYNC:
		return "SyncActionType_SYNC"
	case SyncActionType_REPORT:
		return "SyncActionType_REPORT"
	}
	return "<UNSET>"
}

func SyncActionTypeFromString(s string) (SyncActionType, error) {
	switch s {
	case "SyncActionType_SYNC":
		return SyncActionType_SYNC, nil
	case "SyncActionType_REPORT":
		return SyncActionType_REPORT, nil
	}
	return SyncActionType(0), fmt.Errorf("not a valid SyncActionType string")
}

func SyncActionTypePtr(v SyncActionType) *SyncActionType { return &v }

type SyncCategory int64

const (
	SyncCategory_PROFILE      SyncCategory = 0
	SyncCategory_SETTINGS     SyncCategory = 1
	SyncCategory_OPS          SyncCategory = 2
	SyncCategory_CONTACT      SyncCategory = 3
	SyncCategory_RECOMMEND    SyncCategory = 4
	SyncCategory_BLOCK        SyncCategory = 5
	SyncCategory_GROUP        SyncCategory = 6
	SyncCategory_ROOM         SyncCategory = 7
	SyncCategory_NOTIFICATION SyncCategory = 8
)

func (p SyncCategory) String() string {
	switch p {
	case SyncCategory_PROFILE:
		return "SyncCategory_PROFILE"
	case SyncCategory_SETTINGS:
		return "SyncCategory_SETTINGS"
	case SyncCategory_OPS:
		return "SyncCategory_OPS"
	case SyncCategory_CONTACT:
		return "SyncCategory_CONTACT"
	case SyncCategory_RECOMMEND:
		return "SyncCategory_RECOMMEND"
	case SyncCategory_BLOCK:
		return "SyncCategory_BLOCK"
	case SyncCategory_GROUP:
		return "SyncCategory_GROUP"
	case SyncCategory_ROOM:
		return "SyncCategory_ROOM"
	case SyncCategory_NOTIFICATION:
		return "SyncCategory_NOTIFICATION"
	}
	return "<UNSET>"
}

func SyncCategoryFromString(s string) (SyncCategory, error) {
	switch s {
	case "SyncCategory_PROFILE":
		return SyncCategory_PROFILE, nil
	case "SyncCategory_SETTINGS":
		return SyncCategory_SETTINGS, nil
	case "SyncCategory_OPS":
		return SyncCategory_OPS, nil
	case "SyncCategory_CONTACT":
		return SyncCategory_CONTACT, nil
	case "SyncCategory_RECOMMEND":
		return SyncCategory_RECOMMEND, nil
	case "SyncCategory_BLOCK":
		return SyncCategory_BLOCK, nil
	case "SyncCategory_GROUP":
		return SyncCategory_GROUP, nil
	case "SyncCategory_ROOM":
		return SyncCategory_ROOM, nil
	case "SyncCategory_NOTIFICATION":
		return SyncCategory_NOTIFICATION, nil
	}
	return SyncCategory(0), fmt.Errorf("not a valid SyncCategory string")
}

func SyncCategoryPtr(v SyncCategory) *SyncCategory { return &v }

type VerificationMethod int64

const (
	VerificationMethod_NO_AVAILABLE    VerificationMethod = 0
	VerificationMethod_PIN_VIA_SMS     VerificationMethod = 1
	VerificationMethod_CALLERID_INDIGO VerificationMethod = 2
	VerificationMethod_PIN_VIA_TTS     VerificationMethod = 4
	VerificationMethod_SKIP            VerificationMethod = 10
)

func (p VerificationMethod) String() string {
	switch p {
	case VerificationMethod_NO_AVAILABLE:
		return "VerificationMethod_NO_AVAILABLE"
	case VerificationMethod_PIN_VIA_SMS:
		return "VerificationMethod_PIN_VIA_SMS"
	case VerificationMethod_CALLERID_INDIGO:
		return "VerificationMethod_CALLERID_INDIGO"
	case VerificationMethod_PIN_VIA_TTS:
		return "VerificationMethod_PIN_VIA_TTS"
	case VerificationMethod_SKIP:
		return "VerificationMethod_SKIP"
	}
	return "<UNSET>"
}

func VerificationMethodFromString(s string) (VerificationMethod, error) {
	switch s {
	case "VerificationMethod_NO_AVAILABLE":
		return VerificationMethod_NO_AVAILABLE, nil
	case "VerificationMethod_PIN_VIA_SMS":
		return VerificationMethod_PIN_VIA_SMS, nil
	case "VerificationMethod_CALLERID_INDIGO":
		return VerificationMethod_CALLERID_INDIGO, nil
	case "VerificationMethod_PIN_VIA_TTS":
		return VerificationMethod_PIN_VIA_TTS, nil
	case "VerificationMethod_SKIP":
		return VerificationMethod_SKIP, nil
	}
	return VerificationMethod(0), fmt.Errorf("not a valid VerificationMethod string")
}

func VerificationMethodPtr(v VerificationMethod) *VerificationMethod { return &v }

type VerificationResult_ int64

const (
	VerificationResult__FAILED                            VerificationResult_ = 0
	VerificationResult__OK_NOT_REGISTERED_YET             VerificationResult_ = 1
	VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE    VerificationResult_ = 2
	VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
	switch p {
	case VerificationResult__FAILED:
		return "VerificationResult__FAILED"
	case VerificationResult__OK_NOT_REGISTERED_YET:
		return "VerificationResult__OK_NOT_REGISTERED_YET"
	case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE:
		return "VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE"
	case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE:
		return "VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE"
	}
	return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
	switch s {
	case "VerificationResult__FAILED":
		return VerificationResult__FAILED, nil
	case "VerificationResult__OK_NOT_REGISTERED_YET":
		return VerificationResult__OK_NOT_REGISTERED_YET, nil
	case "VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil
	case "VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE":
		return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil
	}
	return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}

func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

type WapInvitationType int64

const (
	WapInvitationType_REGISTRATION WapInvitationType = 1
	WapInvitationType_CHAT         WapInvitationType = 2
)

func (p WapInvitationType) String() string {
	switch p {
	case WapInvitationType_REGISTRATION:
		return "WapInvitationType_REGISTRATION"
	case WapInvitationType_CHAT:
		return "WapInvitationType_CHAT"
	}
	return "<UNSET>"
}

func WapInvitationTypeFromString(s string) (WapInvitationType, error) {
	switch s {
	case "WapInvitationType_REGISTRATION":
		return WapInvitationType_REGISTRATION, nil
	case "WapInvitationType_CHAT":
		return WapInvitationType_CHAT, nil
	}
	return WapInvitationType(0), fmt.Errorf("not a valid WapInvitationType string")
}

func WapInvitationTypePtr(v WapInvitationType) *WapInvitationType { return &v }

type Announcement struct {
	Index int32 `thrift:"index,1" json:"index"`
	// unused fields # 2 to 9
	ForceUpdate  bool   `thrift:"forceUpdate,10" json:"forceUpdate"`
	Title        string `thrift:"title,11" json:"title"`
	Text         string `thrift:"text,12" json:"text"`
	CreatedTime  int64  `thrift:"createdTime,13" json:"createdTime"`
	PictureUrl   string `thrift:"pictureUrl,14" json:"pictureUrl"`
	ThumbnailUrl string `thrift:"thumbnailUrl,15" json:"thumbnailUrl"`
}

func NewAnnouncement() *Announcement {
	return &Announcement{}
}

func (p *Announcement) GetIndex() int32 {
	return p.Index
}

func (p *Announcement) GetForceUpdate() bool {
	return p.ForceUpdate
}

func (p *Announcement) GetTitle() string {
	return p.Title
}

func (p *Announcement) GetText() string {
	return p.Text
}

func (p *Announcement) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Announcement) GetPictureUrl() string {
	return p.PictureUrl
}

func (p *Announcement) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}
func (p *Announcement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Announcement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *Announcement) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ForceUpdate = v
	}
	return nil
}

func (p *Announcement) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Announcement) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Announcement) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Announcement) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.PictureUrl = v
	}
	return nil
}

func (p *Announcement) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Announcement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Announcement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Announcement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:index: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return fmt.Errorf("%T.index (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:index: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("forceUpdate", thrift.BOOL, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:forceUpdate: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.ForceUpdate)); err != nil {
		return fmt.Errorf("%T.forceUpdate (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:forceUpdate: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:title: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:text: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return fmt.Errorf("%T.text (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:text: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:createdTime: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureUrl", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:pictureUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PictureUrl)); err != nil {
		return fmt.Errorf("%T.pictureUrl (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:pictureUrl: %s", p, err)
	}
	return err
}

func (p *Announcement) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:thumbnailUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return fmt.Errorf("%T.thumbnailUrl (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:thumbnailUrl: %s", p, err)
	}
	return err
}

func (p *Announcement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Announcement(%+v)", *p)
}

type AuthQrcode struct {
	Qrcode   string `thrift:"qrcode,1" json:"qrcode"`
	Verifier string `thrift:"verifier,2" json:"verifier"`
}

func NewAuthQrcode() *AuthQrcode {
	return &AuthQrcode{}
}

func (p *AuthQrcode) GetQrcode() string {
	return p.Qrcode
}

func (p *AuthQrcode) GetVerifier() string {
	return p.Verifier
}
func (p *AuthQrcode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthQrcode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Qrcode = v
	}
	return nil
}

func (p *AuthQrcode) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *AuthQrcode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthQrcode"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthQrcode) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qrcode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:qrcode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Qrcode)); err != nil {
		return fmt.Errorf("%T.qrcode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:qrcode: %s", p, err)
	}
	return err
}

func (p *AuthQrcode) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:verifier: %s", p, err)
	}
	return err
}

func (p *AuthQrcode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthQrcode(%+v)", *p)
}

type Contact struct {
	Mid         string `thrift:"mid,1" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	TypeA1 ContactType   `thrift:"type,10" json:"type"`
	Status ContactStatus `thrift:"status,11" json:"status"`
	// unused fields # 12 to 20
	Relation              ContactRelation `thrift:"relation,21" json:"relation"`
	DisplayName           string          `thrift:"displayName,22" json:"displayName"`
	PhoneticName          string          `thrift:"phoneticName,23" json:"phoneticName"`
	PictureStatus         string          `thrift:"pictureStatus,24" json:"pictureStatus"`
	ThumbnailUrl          string          `thrift:"thumbnailUrl,25" json:"thumbnailUrl"`
	StatusMessage         string          `thrift:"statusMessage,26" json:"statusMessage"`
	DisplayNameOverridden string          `thrift:"displayNameOverridden,27" json:"displayNameOverridden"`
	FavoriteTime          int64           `thrift:"favoriteTime,28" json:"favoriteTime"`
	// unused fields # 29 to 30
	CapableVoiceCall bool   `thrift:"capableVoiceCall,31" json:"capableVoiceCall"`
	CapableVideoCall bool   `thrift:"capableVideoCall,32" json:"capableVideoCall"`
	CapableMyhome    bool   `thrift:"capableMyhome,33" json:"capableMyhome"`
	CapableBuddy     bool   `thrift:"capableBuddy,34" json:"capableBuddy"`
	Attributes       int32  `thrift:"attributes,35" json:"attributes"`
	Settings         int64  `thrift:"settings,36" json:"settings"`
	PicturePath      string `thrift:"picturePath,37" json:"picturePath"`
}

func NewContact() *Contact {
	return &Contact{}
}

func (p *Contact) GetMid() string {
	return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Contact) GetTypeA1() ContactType {
	return p.TypeA1
}

func (p *Contact) GetStatus() ContactStatus {
	return p.Status
}

func (p *Contact) GetRelation() ContactRelation {
	return p.Relation
}

func (p *Contact) GetDisplayName() string {
	return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
	return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
	return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
	return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() bool {
	return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
	return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
	return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
	return p.CapableBuddy
}

func (p *Contact) GetAttributes() int32 {
	return p.Attributes
}

func (p *Contact) GetSettings() int64 {
	return p.Settings
}

func (p *Contact) GetPicturePath() string {
	return p.PicturePath
}
func (p *Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.ReadField28(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.ReadField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.ReadField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.ReadField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.ReadField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.ReadField37(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Contact) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Contact) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Contact) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := ContactType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *Contact) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Contact) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		temp := ContactRelation(v)
		p.Relation = temp
	}
	return nil
}

func (p *Contact) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Contact) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.PhoneticName = v
	}
	return nil
}

func (p *Contact) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Contact) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Contact) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Contact) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		p.DisplayNameOverridden = v
	}
	return nil
}

func (p *Contact) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 28: %s", err)
	} else {
		p.FavoriteTime = v
	}
	return nil
}

func (p *Contact) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		p.CapableVoiceCall = v
	}
	return nil
}

func (p *Contact) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 32: %s", err)
	} else {
		p.CapableVideoCall = v
	}
	return nil
}

func (p *Contact) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 33: %s", err)
	} else {
		p.CapableMyhome = v
	}
	return nil
}

func (p *Contact) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 34: %s", err)
	} else {
		p.CapableBuddy = v
	}
	return nil
}

func (p *Contact) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 35: %s", err)
	} else {
		p.Attributes = v
	}
	return nil
}

func (p *Contact) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 36: %s", err)
	} else {
		p.Settings = v
	}
	return nil
}

func (p *Contact) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 37: %s", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contact"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *Contact) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:type: %s", p, err)
	}
	return err
}

func (p *Contact) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:status: %s", p, err)
	}
	return err
}

func (p *Contact) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.I32, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:relation: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Relation)); err != nil {
		return fmt.Errorf("%T.relation (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:relation: %s", p, err)
	}
	return err
}

func (p *Contact) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:displayName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return fmt.Errorf("%T.displayName (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:displayName: %s", p, err)
	}
	return err
}

func (p *Contact) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:phoneticName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
		return fmt.Errorf("%T.phoneticName (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:phoneticName: %s", p, err)
	}
	return err
}

func (p *Contact) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:pictureStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return fmt.Errorf("%T.pictureStatus (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:pictureStatus: %s", p, err)
	}
	return err
}

func (p *Contact) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:thumbnailUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return fmt.Errorf("%T.thumbnailUrl (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:thumbnailUrl: %s", p, err)
	}
	return err
}

func (p *Contact) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:statusMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return fmt.Errorf("%T.statusMessage (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:statusMessage: %s", p, err)
	}
	return err
}

func (p *Contact) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:displayNameOverridden: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
		return fmt.Errorf("%T.displayNameOverridden (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:displayNameOverridden: %s", p, err)
	}
	return err
}

func (p *Contact) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("favoriteTime", thrift.I64, 28); err != nil {
		return fmt.Errorf("%T write field begin error 28:favoriteTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FavoriteTime)); err != nil {
		return fmt.Errorf("%T.favoriteTime (28) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 28:favoriteTime: %s", p, err)
	}
	return err
}

func (p *Contact) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVoiceCall", thrift.BOOL, 31); err != nil {
		return fmt.Errorf("%T write field begin error 31:capableVoiceCall: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CapableVoiceCall)); err != nil {
		return fmt.Errorf("%T.capableVoiceCall (31) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 31:capableVoiceCall: %s", p, err)
	}
	return err
}

func (p *Contact) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableVideoCall", thrift.BOOL, 32); err != nil {
		return fmt.Errorf("%T write field begin error 32:capableVideoCall: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CapableVideoCall)); err != nil {
		return fmt.Errorf("%T.capableVideoCall (32) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 32:capableVideoCall: %s", p, err)
	}
	return err
}

func (p *Contact) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 33); err != nil {
		return fmt.Errorf("%T write field begin error 33:capableMyhome: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
		return fmt.Errorf("%T.capableMyhome (33) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 33:capableMyhome: %s", p, err)
	}
	return err
}

func (p *Contact) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capableBuddy", thrift.BOOL, 34); err != nil {
		return fmt.Errorf("%T write field begin error 34:capableBuddy: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CapableBuddy)); err != nil {
		return fmt.Errorf("%T.capableBuddy (34) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 34:capableBuddy: %s", p, err)
	}
	return err
}

func (p *Contact) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.I32, 35); err != nil {
		return fmt.Errorf("%T write field begin error 35:attributes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Attributes)); err != nil {
		return fmt.Errorf("%T.attributes (35) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 35:attributes: %s", p, err)
	}
	return err
}

func (p *Contact) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.I64, 36); err != nil {
		return fmt.Errorf("%T write field begin error 36:settings: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Settings)); err != nil {
		return fmt.Errorf("%T.settings (36) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 36:settings: %s", p, err)
	}
	return err
}

func (p *Contact) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
		return fmt.Errorf("%T write field begin error 37:picturePath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return fmt.Errorf("%T.picturePath (37) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 37:picturePath: %s", p, err)
	}
	return err
}

func (p *Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contact(%+v)", *p)
}

type Location struct {
	Title     string  `thrift:"title,1" json:"title"`
	Address   string  `thrift:"address,2" json:"address"`
	Latitude  float64 `thrift:"latitude,3" json:"latitude"`
	Longitude float64 `thrift:"longitude,4" json:"longitude"`
	Phone     string  `thrift:"phone,5" json:"phone"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetTitle() string {
	return p.Title
}

func (p *Location) GetAddress() string {
	return p.Address
}

func (p *Location) GetLatitude() float64 {
	return p.Latitude
}

func (p *Location) GetLongitude() float64 {
	return p.Longitude
}

func (p *Location) GetPhone() string {
	return p.Phone
}
func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Location) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:title: %s", p, err)
	}
	return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:address: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return fmt.Errorf("%T.address (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:address: %s", p, err)
	}
	return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:latitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return fmt.Errorf("%T.latitude (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:latitude: %s", p, err)
	}
	return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:longitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return fmt.Errorf("%T.longitude (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:longitude: %s", p, err)
	}
	return err
}

func (p *Location) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:phone: %s", p, err)
	}
	return err
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

type Coin struct {
	FreeCoinBalance   int32 `thrift:"freeCoinBalance,1" json:"freeCoinBalance"`
	PayedCoinBalance  int32 `thrift:"payedCoinBalance,2" json:"payedCoinBalance"`
	TotalCoinBalance  int32 `thrift:"totalCoinBalance,3" json:"totalCoinBalance"`
	RewardCoinBalance int32 `thrift:"rewardCoinBalance,4" json:"rewardCoinBalance"`
}

func NewCoin() *Coin {
	return &Coin{}
}

func (p *Coin) GetFreeCoinBalance() int32 {
	return p.FreeCoinBalance
}

func (p *Coin) GetPayedCoinBalance() int32 {
	return p.PayedCoinBalance
}

func (p *Coin) GetTotalCoinBalance() int32 {
	return p.TotalCoinBalance
}

func (p *Coin) GetRewardCoinBalance() int32 {
	return p.RewardCoinBalance
}
func (p *Coin) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Coin) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FreeCoinBalance = v
	}
	return nil
}

func (p *Coin) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PayedCoinBalance = v
	}
	return nil
}

func (p *Coin) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TotalCoinBalance = v
	}
	return nil
}

func (p *Coin) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.RewardCoinBalance = v
	}
	return nil
}

func (p *Coin) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Coin"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Coin) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freeCoinBalance", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:freeCoinBalance: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FreeCoinBalance)); err != nil {
		return fmt.Errorf("%T.freeCoinBalance (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:freeCoinBalance: %s", p, err)
	}
	return err
}

func (p *Coin) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payedCoinBalance", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:payedCoinBalance: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PayedCoinBalance)); err != nil {
		return fmt.Errorf("%T.payedCoinBalance (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:payedCoinBalance: %s", p, err)
	}
	return err
}

func (p *Coin) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCoinBalance", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:totalCoinBalance: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalCoinBalance)); err != nil {
		return fmt.Errorf("%T.totalCoinBalance (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:totalCoinBalance: %s", p, err)
	}
	return err
}

func (p *Coin) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rewardCoinBalance", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:rewardCoinBalance: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RewardCoinBalance)); err != nil {
		return fmt.Errorf("%T.rewardCoinBalance (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:rewardCoinBalance: %s", p, err)
	}
	return err
}

func (p *Coin) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coin(%+v)", *p)
}

type CoinPayLoad struct {
	PayCoin    int32       `thrift:"payCoin,1" json:"payCoin"`
	FreeCoin   int32       `thrift:"freeCoin,2" json:"freeCoin"`
	TypeA1     PayloadType `thrift:"type,3" json:"type"`
	RewardCoin int32       `thrift:"rewardCoin,4" json:"rewardCoin"`
}

func NewCoinPayLoad() *CoinPayLoad {
	return &CoinPayLoad{}
}

func (p *CoinPayLoad) GetPayCoin() int32 {
	return p.PayCoin
}

func (p *CoinPayLoad) GetFreeCoin() int32 {
	return p.FreeCoin
}

func (p *CoinPayLoad) GetTypeA1() PayloadType {
	return p.TypeA1
}

func (p *CoinPayLoad) GetRewardCoin() int32 {
	return p.RewardCoin
}
func (p *CoinPayLoad) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinPayLoad) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PayCoin = v
	}
	return nil
}

func (p *CoinPayLoad) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FreeCoin = v
	}
	return nil
}

func (p *CoinPayLoad) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PayloadType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *CoinPayLoad) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.RewardCoin = v
	}
	return nil
}

func (p *CoinPayLoad) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinPayLoad"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinPayLoad) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payCoin", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:payCoin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PayCoin)); err != nil {
		return fmt.Errorf("%T.payCoin (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:payCoin: %s", p, err)
	}
	return err
}

func (p *CoinPayLoad) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freeCoin", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:freeCoin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FreeCoin)); err != nil {
		return fmt.Errorf("%T.freeCoin (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:freeCoin: %s", p, err)
	}
	return err
}

func (p *CoinPayLoad) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *CoinPayLoad) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rewardCoin", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:rewardCoin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RewardCoin)); err != nil {
		return fmt.Errorf("%T.rewardCoin (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:rewardCoin: %s", p, err)
	}
	return err
}

func (p *CoinPayLoad) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinPayLoad(%+v)", *p)
}

type CoinHistory struct {
	PayDate      int64        `thrift:"payDate,1" json:"payDate"`
	CoinBalance  int32        `thrift:"coinBalance,2" json:"coinBalance"`
	Coin         int32        `thrift:"coin,3" json:"coin"`
	Price        string       `thrift:"price,4" json:"price"`
	Title        string       `thrift:"title,5" json:"title"`
	Refund       bool         `thrift:"refund,6" json:"refund"`
	PaySeq       string       `thrift:"paySeq,7" json:"paySeq"`
	Currency     string       `thrift:"currency,8" json:"currency"`
	CurrencySign string       `thrift:"currencySign,9" json:"currencySign"`
	DisplayPrice string       `thrift:"displayPrice,10" json:"displayPrice"`
	Payload      *CoinPayLoad `thrift:"payload,11" json:"payload"`
	ChannelId    string       `thrift:"channelId,12" json:"channelId"`
}

func NewCoinHistory() *CoinHistory {
	return &CoinHistory{}
}

func (p *CoinHistory) GetPayDate() int64 {
	return p.PayDate
}

func (p *CoinHistory) GetCoinBalance() int32 {
	return p.CoinBalance
}

func (p *CoinHistory) GetCoin() int32 {
	return p.Coin
}

func (p *CoinHistory) GetPrice() string {
	return p.Price
}

func (p *CoinHistory) GetTitle() string {
	return p.Title
}

func (p *CoinHistory) GetRefund() bool {
	return p.Refund
}

func (p *CoinHistory) GetPaySeq() string {
	return p.PaySeq
}

func (p *CoinHistory) GetCurrency() string {
	return p.Currency
}

func (p *CoinHistory) GetCurrencySign() string {
	return p.CurrencySign
}

func (p *CoinHistory) GetDisplayPrice() string {
	return p.DisplayPrice
}

var CoinHistory_Payload_DEFAULT *CoinPayLoad

func (p *CoinHistory) GetPayload() *CoinPayLoad {
	if !p.IsSetPayload() {
		return CoinHistory_Payload_DEFAULT
	}
	return p.Payload
}

func (p *CoinHistory) GetChannelId() string {
	return p.ChannelId
}
func (p *CoinHistory) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *CoinHistory) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinHistory) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PayDate = v
	}
	return nil
}

func (p *CoinHistory) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CoinBalance = v
	}
	return nil
}

func (p *CoinHistory) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Coin = v
	}
	return nil
}

func (p *CoinHistory) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *CoinHistory) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *CoinHistory) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Refund = v
	}
	return nil
}

func (p *CoinHistory) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PaySeq = v
	}
	return nil
}

func (p *CoinHistory) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *CoinHistory) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.CurrencySign = v
	}
	return nil
}

func (p *CoinHistory) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DisplayPrice = v
	}
	return nil
}

func (p *CoinHistory) ReadField11(iprot thrift.TProtocol) error {
	p.Payload = &CoinPayLoad{}
	if err := p.Payload.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Payload, err)
	}
	return nil
}

func (p *CoinHistory) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *CoinHistory) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinHistory"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinHistory) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payDate", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:payDate: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PayDate)); err != nil {
		return fmt.Errorf("%T.payDate (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:payDate: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coinBalance", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:coinBalance: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CoinBalance)); err != nil {
		return fmt.Errorf("%T.coinBalance (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:coinBalance: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coin", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:coin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Coin)); err != nil {
		return fmt.Errorf("%T.coin (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:coin: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:price: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return fmt.Errorf("%T.price (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:price: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:title: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("refund", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:refund: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Refund)); err != nil {
		return fmt.Errorf("%T.refund (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:refund: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paySeq", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:paySeq: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PaySeq)); err != nil {
		return fmt.Errorf("%T.paySeq (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:paySeq: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:currency: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencySign", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:currencySign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CurrencySign)); err != nil {
		return fmt.Errorf("%T.currencySign (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:currencySign: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayPrice", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:displayPrice: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayPrice)); err != nil {
		return fmt.Errorf("%T.displayPrice (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:displayPrice: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payload", thrift.STRUCT, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:payload: %s", p, err)
	}
	if err := p.Payload.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Payload, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:payload: %s", p, err)
	}
	return err
}

func (p *CoinHistory) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:channelId: %s", p, err)
	}
	return err
}

func (p *CoinHistory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinHistory(%+v)", *p)
}

type CoinHistoryCondition struct {
	Start        int64       `thrift:"start,1" json:"start"`
	Size         int32       `thrift:"size,2" json:"size"`
	Language     string      `thrift:"language,3" json:"language"`
	Eddt         string      `thrift:"eddt,4" json:"eddt"`
	AppStoreCode PaymentType `thrift:"appStoreCode,5" json:"appStoreCode"`
}

func NewCoinHistoryCondition() *CoinHistoryCondition {
	return &CoinHistoryCondition{}
}

func (p *CoinHistoryCondition) GetStart() int64 {
	return p.Start
}

func (p *CoinHistoryCondition) GetSize() int32 {
	return p.Size
}

func (p *CoinHistoryCondition) GetLanguage() string {
	return p.Language
}

func (p *CoinHistoryCondition) GetEddt() string {
	return p.Eddt
}

func (p *CoinHistoryCondition) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}
func (p *CoinHistoryCondition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinHistoryCondition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *CoinHistoryCondition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *CoinHistoryCondition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *CoinHistoryCondition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Eddt = v
	}
	return nil
}

func (p *CoinHistoryCondition) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *CoinHistoryCondition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinHistoryCondition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinHistoryCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:start: %s", p, err)
	}
	return err
}

func (p *CoinHistoryCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:size: %s", p, err)
	}
	return err
}

func (p *CoinHistoryCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *CoinHistoryCondition) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eddt", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:eddt: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Eddt)); err != nil {
		return fmt.Errorf("%T.eddt (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:eddt: %s", p, err)
	}
	return err
}

func (p *CoinHistoryCondition) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:appStoreCode: %s", p, err)
	}
	return err
}

func (p *CoinHistoryCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinHistoryCondition(%+v)", *p)
}

type CoinHistoryResult_ struct {
	Historys []*CoinHistory `thrift:"historys,1" json:"historys"`
	Balance  *Coin          `thrift:"balance,2" json:"balance"`
	HasNext  bool           `thrift:"hasNext,3" json:"hasNext"`
}

func NewCoinHistoryResult_() *CoinHistoryResult_ {
	return &CoinHistoryResult_{}
}

func (p *CoinHistoryResult_) GetHistorys() []*CoinHistory {
	return p.Historys
}

var CoinHistoryResult__Balance_DEFAULT *Coin

func (p *CoinHistoryResult_) GetBalance() *Coin {
	if !p.IsSetBalance() {
		return CoinHistoryResult__Balance_DEFAULT
	}
	return p.Balance
}

func (p *CoinHistoryResult_) GetHasNext() bool {
	return p.HasNext
}
func (p *CoinHistoryResult_) IsSetBalance() bool {
	return p.Balance != nil
}

func (p *CoinHistoryResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinHistoryResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*CoinHistory, 0, size)
	p.Historys = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &CoinHistory{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Historys = append(p.Historys, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CoinHistoryResult_) ReadField2(iprot thrift.TProtocol) error {
	p.Balance = &Coin{}
	if err := p.Balance.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Balance, err)
	}
	return nil
}

func (p *CoinHistoryResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *CoinHistoryResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinHistoryResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinHistoryResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("historys", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:historys: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Historys)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Historys {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:historys: %s", p, err)
	}
	return err
}

func (p *CoinHistoryResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("balance", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:balance: %s", p, err)
	}
	if err := p.Balance.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Balance, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:balance: %s", p, err)
	}
	return err
}

func (p *CoinHistoryResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hasNext: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return fmt.Errorf("%T.hasNext (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hasNext: %s", p, err)
	}
	return err
}

func (p *CoinHistoryResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinHistoryResult_(%+v)", *p)
}

type CoinProductItem struct {
	ItemId   string `thrift:"itemId,1" json:"itemId"`
	Coin     int32  `thrift:"coin,2" json:"coin"`
	FreeCoin int32  `thrift:"freeCoin,3" json:"freeCoin"`
	// unused field # 4
	Currency     string `thrift:"currency,5" json:"currency"`
	Price        string `thrift:"price,6" json:"price"`
	DisplayPrice string `thrift:"displayPrice,7" json:"displayPrice"`
	Name         string `thrift:"name,8" json:"name"`
	Desc         string `thrift:"desc,9" json:"desc"`
}

func NewCoinProductItem() *CoinProductItem {
	return &CoinProductItem{}
}

func (p *CoinProductItem) GetItemId() string {
	return p.ItemId
}

func (p *CoinProductItem) GetCoin() int32 {
	return p.Coin
}

func (p *CoinProductItem) GetFreeCoin() int32 {
	return p.FreeCoin
}

func (p *CoinProductItem) GetCurrency() string {
	return p.Currency
}

func (p *CoinProductItem) GetPrice() string {
	return p.Price
}

func (p *CoinProductItem) GetDisplayPrice() string {
	return p.DisplayPrice
}

func (p *CoinProductItem) GetName() string {
	return p.Name
}

func (p *CoinProductItem) GetDesc() string {
	return p.Desc
}
func (p *CoinProductItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinProductItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ItemId = v
	}
	return nil
}

func (p *CoinProductItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Coin = v
	}
	return nil
}

func (p *CoinProductItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FreeCoin = v
	}
	return nil
}

func (p *CoinProductItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *CoinProductItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *CoinProductItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DisplayPrice = v
	}
	return nil
}

func (p *CoinProductItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CoinProductItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Desc = v
	}
	return nil
}

func (p *CoinProductItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinProductItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinProductItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:itemId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ItemId)); err != nil {
		return fmt.Errorf("%T.itemId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:itemId: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coin", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:coin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Coin)); err != nil {
		return fmt.Errorf("%T.coin (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:coin: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freeCoin", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:freeCoin: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FreeCoin)); err != nil {
		return fmt.Errorf("%T.freeCoin (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:freeCoin: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:currency: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:price: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return fmt.Errorf("%T.price (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:price: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayPrice", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:displayPrice: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayPrice)); err != nil {
		return fmt.Errorf("%T.displayPrice (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:displayPrice: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:name: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("desc", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:desc: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Desc)); err != nil {
		return fmt.Errorf("%T.desc (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:desc: %s", p, err)
	}
	return err
}

func (p *CoinProductItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinProductItem(%+v)", *p)
}

type CoinPurchaseReservation struct {
	ProductId    string        `thrift:"productId,1" json:"productId"`
	Country      string        `thrift:"country,2" json:"country"`
	Currency     string        `thrift:"currency,3" json:"currency"`
	Price        string        `thrift:"price,4" json:"price"`
	AppStoreCode PaymentType   `thrift:"appStoreCode,5" json:"appStoreCode"`
	Language     string        `thrift:"language,6" json:"language"`
	PgCode       PaymentPgType `thrift:"pgCode,7" json:"pgCode"`
	RedirectUrl  string        `thrift:"redirectUrl,8" json:"redirectUrl"`
}

func NewCoinPurchaseReservation() *CoinPurchaseReservation {
	return &CoinPurchaseReservation{}
}

func (p *CoinPurchaseReservation) GetProductId() string {
	return p.ProductId
}

func (p *CoinPurchaseReservation) GetCountry() string {
	return p.Country
}

func (p *CoinPurchaseReservation) GetCurrency() string {
	return p.Currency
}

func (p *CoinPurchaseReservation) GetPrice() string {
	return p.Price
}

func (p *CoinPurchaseReservation) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}

func (p *CoinPurchaseReservation) GetLanguage() string {
	return p.Language
}

func (p *CoinPurchaseReservation) GetPgCode() PaymentPgType {
	return p.PgCode
}

func (p *CoinPurchaseReservation) GetRedirectUrl() string {
	return p.RedirectUrl
}
func (p *CoinPurchaseReservation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := PaymentPgType(v)
		p.PgCode = temp
	}
	return nil
}

func (p *CoinPurchaseReservation) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.RedirectUrl = v
	}
	return nil
}

func (p *CoinPurchaseReservation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CoinPurchaseReservation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CoinPurchaseReservation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:productId: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:country: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:currency: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:price: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return fmt.Errorf("%T.price (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:price: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:appStoreCode: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:language: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pgCode", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:pgCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PgCode)); err != nil {
		return fmt.Errorf("%T.pgCode (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:pgCode: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("redirectUrl", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:redirectUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RedirectUrl)); err != nil {
		return fmt.Errorf("%T.redirectUrl (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:redirectUrl: %s", p, err)
	}
	return err
}

func (p *CoinPurchaseReservation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CoinPurchaseReservation(%+v)", *p)
}

type CompactContact struct {
	Mid                   string        `thrift:"mid,1" json:"mid"`
	CreatedTime           int64         `thrift:"createdTime,2" json:"createdTime"`
	ModifiedTime          int64         `thrift:"modifiedTime,3" json:"modifiedTime"`
	Status                ContactStatus `thrift:"status,4" json:"status"`
	Settings              int64         `thrift:"settings,5" json:"settings"`
	DisplayNameOverridden string        `thrift:"displayNameOverridden,6" json:"displayNameOverridden"`
}

func NewCompactContact() *CompactContact {
	return &CompactContact{}
}

func (p *CompactContact) GetMid() string {
	return p.Mid
}

func (p *CompactContact) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *CompactContact) GetModifiedTime() int64 {
	return p.ModifiedTime
}

func (p *CompactContact) GetStatus() ContactStatus {
	return p.Status
}

func (p *CompactContact) GetSettings() int64 {
	return p.Settings
}

func (p *CompactContact) GetDisplayNameOverridden() string {
	return p.DisplayNameOverridden
}
func (p *CompactContact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CompactContact) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *CompactContact) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *CompactContact) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ModifiedTime = v
	}
	return nil
}

func (p *CompactContact) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := ContactStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *CompactContact) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Settings = v
	}
	return nil
}

func (p *CompactContact) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DisplayNameOverridden = v
	}
	return nil
}

func (p *CompactContact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompactContact"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CompactContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *CompactContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *CompactContact) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("modifiedTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:modifiedTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ModifiedTime)); err != nil {
		return fmt.Errorf("%T.modifiedTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:modifiedTime: %s", p, err)
	}
	return err
}

func (p *CompactContact) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:status: %s", p, err)
	}
	return err
}

func (p *CompactContact) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:settings: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Settings)); err != nil {
		return fmt.Errorf("%T.settings (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:settings: %s", p, err)
	}
	return err
}

func (p *CompactContact) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:displayNameOverridden: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
		return fmt.Errorf("%T.displayNameOverridden (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:displayNameOverridden: %s", p, err)
	}
	return err
}

func (p *CompactContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactContact(%+v)", *p)
}

type ContactModification struct {
	TypeA1 ModificationType `thrift:"type,1" json:"type"`
	Luid   string           `thrift:"luid,2" json:"luid"`
	// unused fields # 3 to 10
	Phones  []string `thrift:"phones,11" json:"phones"`
	Emails  []string `thrift:"emails,12" json:"emails"`
	Userids []string `thrift:"userids,13" json:"userids"`
}

func NewContactModification() *ContactModification {
	return &ContactModification{}
}

func (p *ContactModification) GetTypeA1() ModificationType {
	return p.TypeA1
}

func (p *ContactModification) GetLuid() string {
	return p.Luid
}

func (p *ContactModification) GetPhones() []string {
	return p.Phones
}

func (p *ContactModification) GetEmails() []string {
	return p.Emails
}

func (p *ContactModification) GetUserids() []string {
	return p.Userids
}
func (p *ContactModification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactModification) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ModificationType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *ContactModification) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Luid = v
	}
	return nil
}

func (p *ContactModification) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Phones = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Phones = append(p.Phones, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ContactModification) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.Emails = append(p.Emails, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ContactModification) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Userids = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.Userids = append(p.Userids, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ContactModification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactModification"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactModification) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *ContactModification) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("luid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:luid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Luid)); err != nil {
		return fmt.Errorf("%T.luid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:luid: %s", p, err)
	}
	return err
}

func (p *ContactModification) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.LIST, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:phones: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Phones)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:phones: %s", p, err)
	}
	return err
}

func (p *ContactModification) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.LIST, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:emails: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:emails: %s", p, err)
	}
	return err
}

func (p *ContactModification) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userids", thrift.LIST, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:userids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Userids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Userids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:userids: %s", p, err)
	}
	return err
}

func (p *ContactModification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactModification(%+v)", *p)
}

type ContactRegistration struct {
	Contact *Contact `thrift:"contact,1" json:"contact"`
	// unused fields # 2 to 9
	Luid        string      `thrift:"luid,10" json:"luid"`
	ContactType ContactType `thrift:"contactType,11" json:"contactType"`
	ContactKey  string      `thrift:"contactKey,12" json:"contactKey"`
}

func NewContactRegistration() *ContactRegistration {
	return &ContactRegistration{}
}

var ContactRegistration_Contact_DEFAULT *Contact

func (p *ContactRegistration) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactRegistration_Contact_DEFAULT
	}
	return p.Contact
}

func (p *ContactRegistration) GetLuid() string {
	return p.Luid
}

func (p *ContactRegistration) GetContactType() ContactType {
	return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
	return p.ContactKey
}
func (p *ContactRegistration) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactRegistration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactRegistration) ReadField1(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Contact, err)
	}
	return nil
}

func (p *ContactRegistration) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Luid = v
	}
	return nil
}

func (p *ContactRegistration) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := ContactType(v)
		p.ContactType = temp
	}
	return nil
}

func (p *ContactRegistration) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ContactKey = v
	}
	return nil
}

func (p *ContactRegistration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactRegistration"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactRegistration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:contact: %s", p, err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Contact, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:contact: %s", p, err)
	}
	return err
}

func (p *ContactRegistration) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("luid", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:luid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Luid)); err != nil {
		return fmt.Errorf("%T.luid (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:luid: %s", p, err)
	}
	return err
}

func (p *ContactRegistration) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactType", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:contactType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ContactType)); err != nil {
		return fmt.Errorf("%T.contactType (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:contactType: %s", p, err)
	}
	return err
}

func (p *ContactRegistration) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactKey", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:contactKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContactKey)); err != nil {
		return fmt.Errorf("%T.contactKey (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:contactKey: %s", p, err)
	}
	return err
}

func (p *ContactRegistration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

type ContactReport struct {
	Mid     string   `thrift:"mid,1" json:"mid"`
	Exists  bool     `thrift:"exists,2" json:"exists"`
	Contact *Contact `thrift:"contact,3" json:"contact"`
}

func NewContactReport() *ContactReport {
	return &ContactReport{}
}

func (p *ContactReport) GetMid() string {
	return p.Mid
}

func (p *ContactReport) GetExists() bool {
	return p.Exists
}

var ContactReport_Contact_DEFAULT *Contact

func (p *ContactReport) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactReport_Contact_DEFAULT
	}
	return p.Contact
}
func (p *ContactReport) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactReport) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactReport) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *ContactReport) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Exists = v
	}
	return nil
}

func (p *ContactReport) ReadField3(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Contact, err)
	}
	return nil
}

func (p *ContactReport) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactReport"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactReport) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *ContactReport) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exists", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:exists: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Exists)); err != nil {
		return fmt.Errorf("%T.exists (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:exists: %s", p, err)
	}
	return err
}

func (p *ContactReport) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contact: %s", p, err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Contact, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contact: %s", p, err)
	}
	return err
}

func (p *ContactReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactReport(%+v)", *p)
}

type ContactReportResult_ struct {
	Mid    string `thrift:"mid,1" json:"mid"`
	Exists bool   `thrift:"exists,2" json:"exists"`
}

func NewContactReportResult_() *ContactReportResult_ {
	return &ContactReportResult_{}
}

func (p *ContactReportResult_) GetMid() string {
	return p.Mid
}

func (p *ContactReportResult_) GetExists() bool {
	return p.Exists
}
func (p *ContactReportResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactReportResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *ContactReportResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Exists = v
	}
	return nil
}

func (p *ContactReportResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactReportResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactReportResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *ContactReportResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exists", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:exists: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Exists)); err != nil {
		return fmt.Errorf("%T.exists (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:exists: %s", p, err)
	}
	return err
}

func (p *ContactReportResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactReportResult_(%+v)", *p)
}

type DeviceInfo struct {
	DeviceName    string `thrift:"deviceName,1" json:"deviceName"`
	SystemName    string `thrift:"systemName,2" json:"systemName"`
	SystemVersion string `thrift:"systemVersion,3" json:"systemVersion"`
	Model         string `thrift:"model,4" json:"model"`
	// unused fields # 5 to 9
	CarrierCode CarrierCode `thrift:"carrierCode,10" json:"carrierCode"`
	CarrierName string      `thrift:"carrierName,11" json:"carrierName"`
	// unused fields # 12 to 19
	ApplicationType ApplicationType `thrift:"applicationType,20" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
	return &DeviceInfo{}
}

func (p *DeviceInfo) GetDeviceName() string {
	return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
	return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
	return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
	return p.Model
}

func (p *DeviceInfo) GetCarrierCode() CarrierCode {
	return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
	return p.CarrierName
}

func (p *DeviceInfo) GetApplicationType() ApplicationType {
	return p.ApplicationType
}
func (p *DeviceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeviceInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeviceName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SystemVersion = v
	}
	return nil
}

func (p *DeviceInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Model = v
	}
	return nil
}

func (p *DeviceInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		temp := CarrierCode(v)
		p.CarrierCode = temp
	}
	return nil
}

func (p *DeviceInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CarrierName = v
	}
	return nil
}

func (p *DeviceInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		temp := ApplicationType(v)
		p.ApplicationType = temp
	}
	return nil
}

func (p *DeviceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeviceInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:deviceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeviceName)); err != nil {
		return fmt.Errorf("%T.deviceName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:deviceName: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:systemName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return fmt.Errorf("%T.systemName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:systemName: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemVersion", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:systemVersion: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemVersion)); err != nil {
		return fmt.Errorf("%T.systemVersion (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:systemVersion: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("model", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:model: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Model)); err != nil {
		return fmt.Errorf("%T.model (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:model: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierCode", thrift.I32, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:carrierCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CarrierCode)); err != nil {
		return fmt.Errorf("%T.carrierCode (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:carrierCode: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierName", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:carrierName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CarrierName)); err != nil {
		return fmt.Errorf("%T.carrierName (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:carrierName: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:applicationType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
		return fmt.Errorf("%T.applicationType (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:applicationType: %s", p, err)
	}
	return err
}

func (p *DeviceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

type EmailConfirmation struct {
	UsePasswordSet    bool   `thrift:"usePasswordSet,1" json:"usePasswordSet"`
	Email             string `thrift:"email,2" json:"email"`
	Password          string `thrift:"password,3" json:"password"`
	IgnoreDuplication bool   `thrift:"ignoreDuplication,4" json:"ignoreDuplication"`
}

func NewEmailConfirmation() *EmailConfirmation {
	return &EmailConfirmation{}
}

func (p *EmailConfirmation) GetUsePasswordSet() bool {
	return p.UsePasswordSet
}

func (p *EmailConfirmation) GetEmail() string {
	return p.Email
}

func (p *EmailConfirmation) GetPassword() string {
	return p.Password
}

func (p *EmailConfirmation) GetIgnoreDuplication() bool {
	return p.IgnoreDuplication
}
func (p *EmailConfirmation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmailConfirmation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UsePasswordSet = v
	}
	return nil
}

func (p *EmailConfirmation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *EmailConfirmation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *EmailConfirmation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IgnoreDuplication = v
	}
	return nil
}

func (p *EmailConfirmation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmailConfirmation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmailConfirmation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usePasswordSet", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:usePasswordSet: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.UsePasswordSet)); err != nil {
		return fmt.Errorf("%T.usePasswordSet (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:usePasswordSet: %s", p, err)
	}
	return err
}

func (p *EmailConfirmation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:email: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return fmt.Errorf("%T.email (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:email: %s", p, err)
	}
	return err
}

func (p *EmailConfirmation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:password: %s", p, err)
	}
	return err
}

func (p *EmailConfirmation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ignoreDuplication", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ignoreDuplication: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IgnoreDuplication)); err != nil {
		return fmt.Errorf("%T.ignoreDuplication (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ignoreDuplication: %s", p, err)
	}
	return err
}

func (p *EmailConfirmation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailConfirmation(%+v)", *p)
}

type EmailConfirmationSession struct {
	EmailConfirmationType EmailConfirmationType `thrift:"emailConfirmationType,1" json:"emailConfirmationType"`
	Verifier              string                `thrift:"verifier,2" json:"verifier"`
	TargetEmail           string                `thrift:"targetEmail,3" json:"targetEmail"`
}

func NewEmailConfirmationSession() *EmailConfirmationSession {
	return &EmailConfirmationSession{}
}

func (p *EmailConfirmationSession) GetEmailConfirmationType() EmailConfirmationType {
	return p.EmailConfirmationType
}

func (p *EmailConfirmationSession) GetVerifier() string {
	return p.Verifier
}

func (p *EmailConfirmationSession) GetTargetEmail() string {
	return p.TargetEmail
}
func (p *EmailConfirmationSession) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmailConfirmationSession) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := EmailConfirmationType(v)
		p.EmailConfirmationType = temp
	}
	return nil
}

func (p *EmailConfirmationSession) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *EmailConfirmationSession) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TargetEmail = v
	}
	return nil
}

func (p *EmailConfirmationSession) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmailConfirmationSession"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EmailConfirmationSession) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmationType", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:emailConfirmationType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EmailConfirmationType)); err != nil {
		return fmt.Errorf("%T.emailConfirmationType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:emailConfirmationType: %s", p, err)
	}
	return err
}

func (p *EmailConfirmationSession) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:verifier: %s", p, err)
	}
	return err
}

func (p *EmailConfirmationSession) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetEmail", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:targetEmail: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TargetEmail)); err != nil {
		return fmt.Errorf("%T.targetEmail (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:targetEmail: %s", p, err)
	}
	return err
}

func (p *EmailConfirmationSession) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailConfirmationSession(%+v)", *p)
}

type Geolocation struct {
	Longitude float64 `thrift:"longitude,1" json:"longitude"`
	Latitude  float64 `thrift:"latitude,2" json:"latitude"`
}

func NewGeolocation() *Geolocation {
	return &Geolocation{}
}

func (p *Geolocation) GetLongitude() float64 {
	return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
	return p.Latitude
}
func (p *Geolocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Geolocation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Geolocation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Geolocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Geolocation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Geolocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:longitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return fmt.Errorf("%T.longitude (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:longitude: %s", p, err)
	}
	return err
}

func (p *Geolocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:latitude: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return fmt.Errorf("%T.latitude (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:latitude: %s", p, err)
	}
	return err
}

func (p *Geolocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Geolocation(%+v)", *p)
}

type Group struct {
	Id          string `thrift:"id,1" json:"id"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	Name          string `thrift:"name,10" json:"name"`
	PictureStatus string `thrift:"pictureStatus,11" json:"pictureStatus"`
	// unused fields # 12 to 19
	Members []*Contact `thrift:"members,20" json:"members"`
	Creator *Contact   `thrift:"creator,21" json:"creator"`
	Invitee []*Contact `thrift:"invitee,22" json:"invitee"`
	// unused fields # 23 to 30
	NotificationDisabled bool `thrift:"notificationDisabled,31" json:"notificationDisabled"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) GetId() string {
	return p.Id
}

func (p *Group) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Group) GetName() string {
	return p.Name
}

func (p *Group) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Group) GetMembers() []*Contact {
	return p.Members
}

var Group_Creator_DEFAULT *Contact

func (p *Group) GetCreator() *Contact {
	if !p.IsSetCreator() {
		return Group_Creator_DEFAULT
	}
	return p.Creator
}

func (p *Group) GetInvitee() []*Contact {
	return p.Invitee
}

func (p *Group) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}
func (p *Group) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Group) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Group) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Group) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Group) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Members = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &Contact{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.Members = append(p.Members, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Group) ReadField21(iprot thrift.TProtocol) error {
	p.Creator = &Contact{}
	if err := p.Creator.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Creator, err)
	}
	return nil
}

func (p *Group) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Invitee = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &Contact{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.Invitee = append(p.Invitee, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Group) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Group"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *Group) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:name: %s", p, err)
	}
	return err
}

func (p *Group) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:pictureStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return fmt.Errorf("%T.pictureStatus (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:pictureStatus: %s", p, err)
	}
	return err
}

func (p *Group) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("members", thrift.LIST, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:members: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Members {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:members: %s", p, err)
	}
	return err
}

func (p *Group) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:creator: %s", p, err)
	}
	if err := p.Creator.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Creator, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:creator: %s", p, err)
	}
	return err
}

func (p *Group) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitee", thrift.LIST, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:invitee: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitee)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Invitee {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:invitee: %s", p, err)
	}
	return err
}

func (p *Group) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return fmt.Errorf("%T write field begin error 31:notificationDisabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return fmt.Errorf("%T.notificationDisabled (31) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 31:notificationDisabled: %s", p, err)
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

type IdentityCredential struct {
	Provider   IdentityProvider `thrift:"provider,1" json:"provider"`
	Identifier string           `thrift:"identifier,2" json:"identifier"`
	Password   string           `thrift:"password,3" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
	return &IdentityCredential{}
}

func (p *IdentityCredential) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
	return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
	return p.Password
}
func (p *IdentityCredential) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IdentityCredential) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *IdentityCredential) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *IdentityCredential) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *IdentityCredential) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityCredential"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IdentityCredential) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:provider: %s", p, err)
	}
	return err
}

func (p *IdentityCredential) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identifier: %s", p, err)
	}
	return err
}

func (p *IdentityCredential) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:password: %s", p, err)
	}
	return err
}

func (p *IdentityCredential) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

type LoginResult_ struct {
	AuthToken   string          `thrift:"authToken,1" json:"authToken"`
	Certificate string          `thrift:"certificate,2" json:"certificate"`
	Verifier    string          `thrift:"verifier,3" json:"verifier"`
	PinCode     string          `thrift:"pinCode,4" json:"pinCode"`
	TypeA1      LoginResultType `thrift:"type,5" json:"type"`
}

func NewLoginResult_() *LoginResult_ {
	return &LoginResult_{}
}

func (p *LoginResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *LoginResult_) GetCertificate() string {
	return p.Certificate
}

func (p *LoginResult_) GetVerifier() string {
	return p.Verifier
}

func (p *LoginResult_) GetPinCode() string {
	return p.PinCode
}

func (p *LoginResult_) GetTypeA1() LoginResultType {
	return p.TypeA1
}
func (p *LoginResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *LoginResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *LoginResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *LoginResult_) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := LoginResultType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *LoginResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return fmt.Errorf("%T.authToken (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authToken: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:certificate: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return fmt.Errorf("%T.certificate (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:certificate: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:pinCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return fmt.Errorf("%T.pinCode (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:pinCode: %s", p, err)
	}
	return err
}

func (p *LoginResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:type: %s", p, err)
	}
	return err
}

func (p *LoginResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResult_(%+v)", *p)
}

type LoginSession struct {
	TokenKey string `thrift:"tokenKey,1" json:"tokenKey"`
	// unused field # 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	// unused fields # 4 to 10
	ApplicationType ApplicationType `thrift:"applicationType,11" json:"applicationType"`
	SystemName      string          `thrift:"systemName,12" json:"systemName"`
	// unused fields # 13 to 21
	AccessLocation string `thrift:"accessLocation,22" json:"accessLocation"`
}

func NewLoginSession() *LoginSession {
	return &LoginSession{}
}

func (p *LoginSession) GetTokenKey() string {
	return p.TokenKey
}

func (p *LoginSession) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *LoginSession) GetApplicationType() ApplicationType {
	return p.ApplicationType
}

func (p *LoginSession) GetSystemName() string {
	return p.SystemName
}

func (p *LoginSession) GetAccessLocation() string {
	return p.AccessLocation
}
func (p *LoginSession) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginSession) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenKey = v
	}
	return nil
}

func (p *LoginSession) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *LoginSession) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		temp := ApplicationType(v)
		p.ApplicationType = temp
	}
	return nil
}

func (p *LoginSession) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *LoginSession) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *LoginSession) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginSession"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginSession) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tokenKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenKey)); err != nil {
		return fmt.Errorf("%T.tokenKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tokenKey: %s", p, err)
	}
	return err
}

func (p *LoginSession) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:expirationTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return fmt.Errorf("%T.expirationTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:expirationTime: %s", p, err)
	}
	return err
}

func (p *LoginSession) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:applicationType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
		return fmt.Errorf("%T.applicationType (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:applicationType: %s", p, err)
	}
	return err
}

func (p *LoginSession) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:systemName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return fmt.Errorf("%T.systemName (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:systemName: %s", p, err)
	}
	return err
}

func (p *LoginSession) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:accessLocation: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return fmt.Errorf("%T.accessLocation (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:accessLocation: %s", p, err)
	}
	return err
}

func (p *LoginSession) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginSession(%+v)", *p)
}

type Message struct {
	From          string  `thrift:"from,1" json:"from"`
	To            string  `thrift:"to,2" json:"to"`
	ToType        MIDType `thrift:"toType,3" json:"toType"`
	Id            string  `thrift:"id,4" json:"id"`
	CreatedTime   int64   `thrift:"createdTime,5" json:"createdTime"`
	DeliveredTime int64   `thrift:"deliveredTime,6" json:"deliveredTime"`
	// unused fields # 7 to 9
	Text     string    `thrift:"text,10" json:"text"`
	Location *Location `thrift:"location,11" json:"location"`
	// unused fields # 12 to 13
	HasContent  bool        `thrift:"hasContent,14" json:"hasContent"`
	ContentType ContentType `thrift:"contentType,15" json:"contentType"`
	// unused field # 16
	ContentPreview  []byte            `thrift:"contentPreview,17" json:"contentPreview"`
	ContentMetadata map[string]string `thrift:"contentMetadata,18" json:"contentMetadata"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) GetFrom() string {
	return p.From
}

func (p *Message) GetTo() string {
	return p.To
}

func (p *Message) GetToType() MIDType {
	return p.ToType
}

func (p *Message) GetId() string {
	return p.Id
}

func (p *Message) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
	return p.DeliveredTime
}

func (p *Message) GetText() string {
	return p.Text
}

var Message_Location_DEFAULT *Location

func (p *Message) GetLocation() *Location {
	if !p.IsSetLocation() {
		return Message_Location_DEFAULT
	}
	return p.Location
}

func (p *Message) GetHasContent() bool {
	return p.HasContent
}

func (p *Message) GetContentType() ContentType {
	return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
	return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
	return p.ContentMetadata
}
func (p *Message) IsSetLocation() bool {
	return p.Location != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := MIDType(v)
		p.ToType = temp
	}
	return nil
}

func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Message) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Message) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DeliveredTime = v
	}
	return nil
}

func (p *Message) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Message) ReadField11(iprot thrift.TProtocol) error {
	p.Location = &Location{}
	if err := p.Location.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Location, err)
	}
	return nil
}

func (p *Message) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.HasContent = v
	}
	return nil
}

func (p *Message) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		temp := ContentType(v)
		p.ContentType = temp
	}
	return nil
}

func (p *Message) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.ContentPreview = v
	}
	return nil
}

func (p *Message) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ContentMetadata = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.ContentMetadata[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:from: %s", p, err)
	}
	if err := oprot.WriteString(string(p.From)); err != nil {
		return fmt.Errorf("%T.from (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:from: %s", p, err)
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:to: %s", p, err)
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:toType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ToType)); err != nil {
		return fmt.Errorf("%T.toType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:toType: %s", p, err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:id: %s", p, err)
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:createdTime: %s", p, err)
	}
	return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:deliveredTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
		return fmt.Errorf("%T.deliveredTime (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:deliveredTime: %s", p, err)
	}
	return err
}

func (p *Message) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:text: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return fmt.Errorf("%T.text (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:text: %s", p, err)
	}
	return err
}

func (p *Message) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:location: %s", p, err)
		}
		if err := p.Location.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Location, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:location: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasContent", thrift.BOOL, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:hasContent: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasContent)); err != nil {
		return fmt.Errorf("%T.hasContent (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:hasContent: %s", p, err)
	}
	return err
}

func (p *Message) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:contentType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
		return fmt.Errorf("%T.contentType (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:contentType: %s", p, err)
	}
	return err
}

func (p *Message) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:contentPreview: %s", p, err)
	}
	if err := oprot.WriteBinary(p.ContentPreview); err != nil {
		return fmt.Errorf("%T.contentPreview (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:contentPreview: %s", p, err)
	}
	return err
}

func (p *Message) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:contentMetadata: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ContentMetadata {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:contentMetadata: %s", p, err)
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

type Operation struct {
	Revision    int64  `thrift:"revision,1" json:"revision"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	TypeA1      OpType `thrift:"type,3" json:"type"`
	ReqSeq      int32  `thrift:"reqSeq,4" json:"reqSeq"`
	Checksum    string `thrift:"checksum,5" json:"checksum"`
	// unused field # 6
	Status OpStatus `thrift:"status,7" json:"status"`
	// unused fields # 8 to 9
	Param1 string `thrift:"param1,10" json:"param1"`
	Param2 string `thrift:"param2,11" json:"param2"`
	Param3 string `thrift:"param3,12" json:"param3"`
	// unused fields # 13 to 19
	Message *Message `thrift:"message,20" json:"message"`
}

func NewOperation() *Operation {
	return &Operation{}
}

func (p *Operation) GetRevision() int64 {
	return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Operation) GetTypeA1() OpType {
	return p.TypeA1
}

func (p *Operation) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
	return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
	return p.Status
}

func (p *Operation) GetParam1() string {
	return p.Param1
}

func (p *Operation) GetParam2() string {
	return p.Param2
}

func (p *Operation) GetParam3() string {
	return p.Param3
}

var Operation_Message_DEFAULT *Message

func (p *Operation) GetMessage() *Message {
	if !p.IsSetMessage() {
		return Operation_Message_DEFAULT
	}
	return p.Message
}
func (p *Operation) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Operation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Operation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Operation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Operation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := OpType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *Operation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *Operation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Checksum = v
	}
	return nil
}

func (p *Operation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := OpStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Operation) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Param1 = v
	}
	return nil
}

func (p *Operation) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Param2 = v
	}
	return nil
}

func (p *Operation) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Param3 = v
	}
	return nil
}

func (p *Operation) ReadField20(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *Operation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Operation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Operation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:revision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return fmt.Errorf("%T.revision (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:revision: %s", p, err)
	}
	return err
}

func (p *Operation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *Operation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *Operation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:reqSeq: %s", p, err)
	}
	return err
}

func (p *Operation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:checksum: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Checksum)); err != nil {
		return fmt.Errorf("%T.checksum (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:checksum: %s", p, err)
	}
	return err
}

func (p *Operation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:status: %s", p, err)
	}
	return err
}

func (p *Operation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:param1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param1)); err != nil {
		return fmt.Errorf("%T.param1 (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:param1: %s", p, err)
	}
	return err
}

func (p *Operation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:param2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param2)); err != nil {
		return fmt.Errorf("%T.param2 (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:param2: %s", p, err)
	}
	return err
}

func (p *Operation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:param3: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param3)); err != nil {
		return fmt.Errorf("%T.param3 (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:param3: %s", p, err)
	}
	return err
}

func (p *Operation) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:message: %s", p, err)
	}
	return err
}

func (p *Operation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Operation(%+v)", *p)
}

type PaymentReservation struct {
	ReceiverMid     string      `thrift:"receiverMid,1" json:"receiverMid"`
	ProductId       string      `thrift:"productId,2" json:"productId"`
	Language        string      `thrift:"language,3" json:"language"`
	Location        string      `thrift:"location,4" json:"location"`
	Currency        string      `thrift:"currency,5" json:"currency"`
	Price           string      `thrift:"price,6" json:"price"`
	AppStoreCode    PaymentType `thrift:"appStoreCode,7" json:"appStoreCode"`
	MessageText     string      `thrift:"messageText,8" json:"messageText"`
	MessageTemplate int32       `thrift:"messageTemplate,9" json:"messageTemplate"`
	PackageId       int64       `thrift:"packageId,10" json:"packageId"`
}

func NewPaymentReservation() *PaymentReservation {
	return &PaymentReservation{}
}

func (p *PaymentReservation) GetReceiverMid() string {
	return p.ReceiverMid
}

func (p *PaymentReservation) GetProductId() string {
	return p.ProductId
}

func (p *PaymentReservation) GetLanguage() string {
	return p.Language
}

func (p *PaymentReservation) GetLocation() string {
	return p.Location
}

func (p *PaymentReservation) GetCurrency() string {
	return p.Currency
}

func (p *PaymentReservation) GetPrice() string {
	return p.Price
}

func (p *PaymentReservation) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}

func (p *PaymentReservation) GetMessageText() string {
	return p.MessageText
}

func (p *PaymentReservation) GetMessageTemplate() int32 {
	return p.MessageTemplate
}

func (p *PaymentReservation) GetPackageId() int64 {
	return p.PackageId
}
func (p *PaymentReservation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PaymentReservation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReceiverMid = v
	}
	return nil
}

func (p *PaymentReservation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *PaymentReservation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *PaymentReservation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *PaymentReservation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *PaymentReservation) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *PaymentReservation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *PaymentReservation) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.MessageText = v
	}
	return nil
}

func (p *PaymentReservation) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.MessageTemplate = v
	}
	return nil
}

func (p *PaymentReservation) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *PaymentReservation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentReservation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PaymentReservation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:receiverMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiverMid)); err != nil {
		return fmt.Errorf("%T.receiverMid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:receiverMid: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:productId: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:location: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Location)); err != nil {
		return fmt.Errorf("%T.location (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:location: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:currency: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:price: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return fmt.Errorf("%T.price (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:price: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:appStoreCode: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageText", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:messageText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageText)); err != nil {
		return fmt.Errorf("%T.messageText (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:messageText: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageTemplate", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:messageTemplate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageTemplate)); err != nil {
		return fmt.Errorf("%T.messageTemplate (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:messageTemplate: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:packageId: %s", p, err)
	}
	return err
}

func (p *PaymentReservation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReservation(%+v)", *p)
}

type PaymentReservationResult_ struct {
	OrderId    string            `thrift:"orderId,1" json:"orderId"`
	ConfirmUrl string            `thrift:"confirmUrl,2" json:"confirmUrl"`
	Extras     map[string]string `thrift:"extras,3" json:"extras"`
}

func NewPaymentReservationResult_() *PaymentReservationResult_ {
	return &PaymentReservationResult_{}
}

func (p *PaymentReservationResult_) GetOrderId() string {
	return p.OrderId
}

func (p *PaymentReservationResult_) GetConfirmUrl() string {
	return p.ConfirmUrl
}

func (p *PaymentReservationResult_) GetExtras() map[string]string {
	return p.Extras
}
func (p *PaymentReservationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PaymentReservationResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *PaymentReservationResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ConfirmUrl = v
	}
	return nil
}

func (p *PaymentReservationResult_) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Extras = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val9 = v
		}
		p.Extras[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PaymentReservationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PaymentReservationResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PaymentReservationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:orderId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrderId)); err != nil {
		return fmt.Errorf("%T.orderId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:orderId: %s", p, err)
	}
	return err
}

func (p *PaymentReservationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmUrl", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:confirmUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConfirmUrl)); err != nil {
		return fmt.Errorf("%T.confirmUrl (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:confirmUrl: %s", p, err)
	}
	return err
}

func (p *PaymentReservationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extras", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:extras: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extras)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Extras {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:extras: %s", p, err)
	}
	return err
}

func (p *PaymentReservationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReservationResult_(%+v)", *p)
}

type Product struct {
	ProductId       string           `thrift:"productId,1" json:"productId"`
	PackageId       int64            `thrift:"packageId,2" json:"packageId"`
	Version         int32            `thrift:"version,3" json:"version"`
	AuthorName      string           `thrift:"authorName,4" json:"authorName"`
	OnSale          bool             `thrift:"onSale,5" json:"onSale"`
	ValidDays       int32            `thrift:"validDays,6" json:"validDays"`
	SaleType        int32            `thrift:"saleType,7" json:"saleType"`
	Copyright       string           `thrift:"copyright,8" json:"copyright"`
	Title           string           `thrift:"title,9" json:"title"`
	DescriptionText string           `thrift:"descriptionText,10" json:"descriptionText"`
	ShopOrderId     int64            `thrift:"shopOrderId,11" json:"shopOrderId"`
	FromMid         string           `thrift:"fromMid,12" json:"fromMid"`
	ToMid           string           `thrift:"toMid,13" json:"toMid"`
	ValidUntil      int64            `thrift:"validUntil,14" json:"validUntil"`
	PriceTier       int32            `thrift:"priceTier,15" json:"priceTier"`
	Price           string           `thrift:"price,16" json:"price"`
	Currency        string           `thrift:"currency,17" json:"currency"`
	CurrencySymbol  string           `thrift:"currencySymbol,18" json:"currencySymbol"`
	PaymentType     PaymentType      `thrift:"paymentType,19" json:"paymentType"`
	CreateDate      int64            `thrift:"createDate,20" json:"createDate"`
	OwnFlag         bool             `thrift:"ownFlag,21" json:"ownFlag"`
	EventType       ProductEventType `thrift:"eventType,22" json:"eventType"`
	UrlSchema       string           `thrift:"urlSchema,23" json:"urlSchema"`
	DownloadUrl     string           `thrift:"downloadUrl,24" json:"downloadUrl"`
	BuddyMid        string           `thrift:"buddyMid,25" json:"buddyMid"`
	PublishSince    int64            `thrift:"publishSince,26" json:"publishSince"`
	NewFlag_        bool             `thrift:"newFlag,27" json:"newFlag"`
	MissionFlag     bool             `thrift:"missionFlag,28" json:"missionFlag"`
}

func NewProduct() *Product {
	return &Product{}
}

func (p *Product) GetProductId() string {
	return p.ProductId
}

func (p *Product) GetPackageId() int64 {
	return p.PackageId
}

func (p *Product) GetVersion() int32 {
	return p.Version
}

func (p *Product) GetAuthorName() string {
	return p.AuthorName
}

func (p *Product) GetOnSale() bool {
	return p.OnSale
}

func (p *Product) GetValidDays() int32 {
	return p.ValidDays
}

func (p *Product) GetSaleType() int32 {
	return p.SaleType
}

func (p *Product) GetCopyright() string {
	return p.Copyright
}

func (p *Product) GetTitle() string {
	return p.Title
}

func (p *Product) GetDescriptionText() string {
	return p.DescriptionText
}

func (p *Product) GetShopOrderId() int64 {
	return p.ShopOrderId
}

func (p *Product) GetFromMid() string {
	return p.FromMid
}

func (p *Product) GetToMid() string {
	return p.ToMid
}

func (p *Product) GetValidUntil() int64 {
	return p.ValidUntil
}

func (p *Product) GetPriceTier() int32 {
	return p.PriceTier
}

func (p *Product) GetPrice() string {
	return p.Price
}

func (p *Product) GetCurrency() string {
	return p.Currency
}

func (p *Product) GetCurrencySymbol() string {
	return p.CurrencySymbol
}

func (p *Product) GetPaymentType() PaymentType {
	return p.PaymentType
}

func (p *Product) GetCreateDate() int64 {
	return p.CreateDate
}

func (p *Product) GetOwnFlag() bool {
	return p.OwnFlag
}

func (p *Product) GetEventType() ProductEventType {
	return p.EventType
}

func (p *Product) GetUrlSchema() string {
	return p.UrlSchema
}

func (p *Product) GetDownloadUrl() string {
	return p.DownloadUrl
}

func (p *Product) GetBuddyMid() string {
	return p.BuddyMid
}

func (p *Product) GetPublishSince() int64 {
	return p.PublishSince
}

func (p *Product) GetNewFlag_() bool {
	return p.NewFlag_
}

func (p *Product) GetMissionFlag() bool {
	return p.MissionFlag
}
func (p *Product) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.ReadField28(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Product) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *Product) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *Product) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Product) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.AuthorName = v
	}
	return nil
}

func (p *Product) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OnSale = v
	}
	return nil
}

func (p *Product) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ValidDays = v
	}
	return nil
}

func (p *Product) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SaleType = v
	}
	return nil
}

func (p *Product) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Copyright = v
	}
	return nil
}

func (p *Product) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Product) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DescriptionText = v
	}
	return nil
}

func (p *Product) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.ShopOrderId = v
	}
	return nil
}

func (p *Product) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.FromMid = v
	}
	return nil
}

func (p *Product) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.ToMid = v
	}
	return nil
}

func (p *Product) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.ValidUntil = v
	}
	return nil
}

func (p *Product) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.PriceTier = v
	}
	return nil
}

func (p *Product) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *Product) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.Currency = v
	}
	return nil
}

func (p *Product) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.CurrencySymbol = v
	}
	return nil
}

func (p *Product) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		temp := PaymentType(v)
		p.PaymentType = temp
	}
	return nil
}

func (p *Product) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.CreateDate = v
	}
	return nil
}

func (p *Product) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.OwnFlag = v
	}
	return nil
}

func (p *Product) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		temp := ProductEventType(v)
		p.EventType = temp
	}
	return nil
}

func (p *Product) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.UrlSchema = v
	}
	return nil
}

func (p *Product) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.DownloadUrl = v
	}
	return nil
}

func (p *Product) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.BuddyMid = v
	}
	return nil
}

func (p *Product) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.PublishSince = v
	}
	return nil
}

func (p *Product) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		p.NewFlag_ = v
	}
	return nil
}

func (p *Product) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 28: %s", err)
	} else {
		p.MissionFlag = v
	}
	return nil
}

func (p *Product) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Product"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Product) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:productId: %s", p, err)
	}
	return err
}

func (p *Product) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:packageId: %s", p, err)
	}
	return err
}

func (p *Product) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:version: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return fmt.Errorf("%T.version (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:version: %s", p, err)
	}
	return err
}

func (p *Product) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:authorName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthorName)); err != nil {
		return fmt.Errorf("%T.authorName (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:authorName: %s", p, err)
	}
	return err
}

func (p *Product) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:onSale: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
		return fmt.Errorf("%T.onSale (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:onSale: %s", p, err)
	}
	return err
}

func (p *Product) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validDays", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:validDays: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ValidDays)); err != nil {
		return fmt.Errorf("%T.validDays (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:validDays: %s", p, err)
	}
	return err
}

func (p *Product) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("saleType", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:saleType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SaleType)); err != nil {
		return fmt.Errorf("%T.saleType (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:saleType: %s", p, err)
	}
	return err
}

func (p *Product) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:copyright: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Copyright)); err != nil {
		return fmt.Errorf("%T.copyright (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:copyright: %s", p, err)
	}
	return err
}

func (p *Product) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:title: %s", p, err)
	}
	return err
}

func (p *Product) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descriptionText", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:descriptionText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DescriptionText)); err != nil {
		return fmt.Errorf("%T.descriptionText (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:descriptionText: %s", p, err)
	}
	return err
}

func (p *Product) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shopOrderId", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:shopOrderId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ShopOrderId)); err != nil {
		return fmt.Errorf("%T.shopOrderId (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:shopOrderId: %s", p, err)
	}
	return err
}

func (p *Product) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromMid", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:fromMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FromMid)); err != nil {
		return fmt.Errorf("%T.fromMid (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:fromMid: %s", p, err)
	}
	return err
}

func (p *Product) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toMid", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:toMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ToMid)); err != nil {
		return fmt.Errorf("%T.toMid (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:toMid: %s", p, err)
	}
	return err
}

func (p *Product) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:validUntil: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
		return fmt.Errorf("%T.validUntil (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:validUntil: %s", p, err)
	}
	return err
}

func (p *Product) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priceTier", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:priceTier: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PriceTier)); err != nil {
		return fmt.Errorf("%T.priceTier (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:priceTier: %s", p, err)
	}
	return err
}

func (p *Product) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:price: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return fmt.Errorf("%T.price (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:price: %s", p, err)
	}
	return err
}

func (p *Product) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:currency: %s", p, err)
	}
	return err
}

func (p *Product) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currencySymbol", thrift.STRING, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:currencySymbol: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CurrencySymbol)); err != nil {
		return fmt.Errorf("%T.currencySymbol (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:currencySymbol: %s", p, err)
	}
	return err
}

func (p *Product) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentType", thrift.I32, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:paymentType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PaymentType)); err != nil {
		return fmt.Errorf("%T.paymentType (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:paymentType: %s", p, err)
	}
	return err
}

func (p *Product) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createDate", thrift.I64, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:createDate: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateDate)); err != nil {
		return fmt.Errorf("%T.createDate (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:createDate: %s", p, err)
	}
	return err
}

func (p *Product) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownFlag", thrift.BOOL, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:ownFlag: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.OwnFlag)); err != nil {
		return fmt.Errorf("%T.ownFlag (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:ownFlag: %s", p, err)
	}
	return err
}

func (p *Product) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventType", thrift.I32, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:eventType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return fmt.Errorf("%T.eventType (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:eventType: %s", p, err)
	}
	return err
}

func (p *Product) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("urlSchema", thrift.STRING, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:urlSchema: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UrlSchema)); err != nil {
		return fmt.Errorf("%T.urlSchema (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:urlSchema: %s", p, err)
	}
	return err
}

func (p *Product) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:downloadUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DownloadUrl)); err != nil {
		return fmt.Errorf("%T.downloadUrl (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:downloadUrl: %s", p, err)
	}
	return err
}

func (p *Product) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddyMid", thrift.STRING, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:buddyMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BuddyMid)); err != nil {
		return fmt.Errorf("%T.buddyMid (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:buddyMid: %s", p, err)
	}
	return err
}

func (p *Product) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publishSince", thrift.I64, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:publishSince: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PublishSince)); err != nil {
		return fmt.Errorf("%T.publishSince (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:publishSince: %s", p, err)
	}
	return err
}

func (p *Product) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newFlag", thrift.BOOL, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:newFlag: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NewFlag_)); err != nil {
		return fmt.Errorf("%T.newFlag (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:newFlag: %s", p, err)
	}
	return err
}

func (p *Product) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("missionFlag", thrift.BOOL, 28); err != nil {
		return fmt.Errorf("%T write field begin error 28:missionFlag: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.MissionFlag)); err != nil {
		return fmt.Errorf("%T.missionFlag (28) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 28:missionFlag: %s", p, err)
	}
	return err
}

func (p *Product) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Product(%+v)", *p)
}

type ProductList struct {
	HasNext bool `thrift:"hasNext,1" json:"hasNext"`
	// unused fields # 2 to 3
	BannerSequence   int64                 `thrift:"bannerSequence,4" json:"bannerSequence"`
	BannerTargetType ProductBannerLinkType `thrift:"bannerTargetType,5" json:"bannerTargetType"`
	BannerTargetPath string                `thrift:"bannerTargetPath,6" json:"bannerTargetPath"`
	ProductList_     []*Product            `thrift:"productList_,7" json:"productList_"`
	BannerLang       string                `thrift:"bannerLang,8" json:"bannerLang"`
}

func NewProductList() *ProductList {
	return &ProductList{}
}

func (p *ProductList) GetHasNext() bool {
	return p.HasNext
}

func (p *ProductList) GetBannerSequence() int64 {
	return p.BannerSequence
}

func (p *ProductList) GetBannerTargetType() ProductBannerLinkType {
	return p.BannerTargetType
}

func (p *ProductList) GetBannerTargetPath() string {
	return p.BannerTargetPath
}

func (p *ProductList) GetProductList_() []*Product {
	return p.ProductList_
}

func (p *ProductList) GetBannerLang() string {
	return p.BannerLang
}
func (p *ProductList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProductList) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *ProductList) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BannerSequence = v
	}
	return nil
}

func (p *ProductList) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := ProductBannerLinkType(v)
		p.BannerTargetType = temp
	}
	return nil
}

func (p *ProductList) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.BannerTargetPath = v
	}
	return nil
}

func (p *ProductList) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Product, 0, size)
	p.ProductList_ = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Product{}
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10, err)
		}
		p.ProductList_ = append(p.ProductList_, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ProductList) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.BannerLang = v
	}
	return nil
}

func (p *ProductList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProductList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hasNext: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return fmt.Errorf("%T.hasNext (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hasNext: %s", p, err)
	}
	return err
}

func (p *ProductList) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerSequence", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:bannerSequence: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BannerSequence)); err != nil {
		return fmt.Errorf("%T.bannerSequence (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:bannerSequence: %s", p, err)
	}
	return err
}

func (p *ProductList) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerTargetType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:bannerTargetType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BannerTargetType)); err != nil {
		return fmt.Errorf("%T.bannerTargetType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:bannerTargetType: %s", p, err)
	}
	return err
}

func (p *ProductList) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerTargetPath", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:bannerTargetPath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BannerTargetPath)); err != nil {
		return fmt.Errorf("%T.bannerTargetPath (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:bannerTargetPath: %s", p, err)
	}
	return err
}

func (p *ProductList) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productList_", thrift.LIST, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:productList_: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductList_)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ProductList_ {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:productList_: %s", p, err)
	}
	return err
}

func (p *ProductList) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerLang", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:bannerLang: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BannerLang)); err != nil {
		return fmt.Errorf("%T.bannerLang (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:bannerLang: %s", p, err)
	}
	return err
}

func (p *ProductList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductList(%+v)", *p)
}

type ProductSimple struct {
	ProductId  string `thrift:"productId,1" json:"productId"`
	PackageId  int64  `thrift:"packageId,2" json:"packageId"`
	Version    int32  `thrift:"version,3" json:"version"`
	OnSale     bool   `thrift:"onSale,4" json:"onSale"`
	ValidUntil int64  `thrift:"validUntil,5" json:"validUntil"`
}

func NewProductSimple() *ProductSimple {
	return &ProductSimple{}
}

func (p *ProductSimple) GetProductId() string {
	return p.ProductId
}

func (p *ProductSimple) GetPackageId() int64 {
	return p.PackageId
}

func (p *ProductSimple) GetVersion() int32 {
	return p.Version
}

func (p *ProductSimple) GetOnSale() bool {
	return p.OnSale
}

func (p *ProductSimple) GetValidUntil() int64 {
	return p.ValidUntil
}
func (p *ProductSimple) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProductSimple) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *ProductSimple) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *ProductSimple) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ProductSimple) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OnSale = v
	}
	return nil
}

func (p *ProductSimple) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ValidUntil = v
	}
	return nil
}

func (p *ProductSimple) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductSimple"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProductSimple) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:productId: %s", p, err)
	}
	return err
}

func (p *ProductSimple) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:packageId: %s", p, err)
	}
	return err
}

func (p *ProductSimple) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:version: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return fmt.Errorf("%T.version (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:version: %s", p, err)
	}
	return err
}

func (p *ProductSimple) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:onSale: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
		return fmt.Errorf("%T.onSale (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:onSale: %s", p, err)
	}
	return err
}

func (p *ProductSimple) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:validUntil: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
		return fmt.Errorf("%T.validUntil (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:validUntil: %s", p, err)
	}
	return err
}

func (p *ProductSimple) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductSimple(%+v)", *p)
}

type ProductSimpleList struct {
	HasNext                bool             `thrift:"hasNext,1" json:"hasNext"`
	ReinvokeHour           int32            `thrift:"reinvokeHour,2" json:"reinvokeHour"`
	LastVersionSeq         int64            `thrift:"lastVersionSeq,3" json:"lastVersionSeq"`
	ProductList            []*ProductSimple `thrift:"productList,4" json:"productList"`
	RecentNewReleaseDate   int64            `thrift:"recentNewReleaseDate,5" json:"recentNewReleaseDate"`
	RecentEventReleaseDate int64            `thrift:"recentEventReleaseDate,6" json:"recentEventReleaseDate"`
}

func NewProductSimpleList() *ProductSimpleList {
	return &ProductSimpleList{}
}

func (p *ProductSimpleList) GetHasNext() bool {
	return p.HasNext
}

func (p *ProductSimpleList) GetReinvokeHour() int32 {
	return p.ReinvokeHour
}

func (p *ProductSimpleList) GetLastVersionSeq() int64 {
	return p.LastVersionSeq
}

func (p *ProductSimpleList) GetProductList() []*ProductSimple {
	return p.ProductList
}

func (p *ProductSimpleList) GetRecentNewReleaseDate() int64 {
	return p.RecentNewReleaseDate
}

func (p *ProductSimpleList) GetRecentEventReleaseDate() int64 {
	return p.RecentEventReleaseDate
}
func (p *ProductSimpleList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProductSimpleList) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *ProductSimpleList) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReinvokeHour = v
	}
	return nil
}

func (p *ProductSimpleList) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastVersionSeq = v
	}
	return nil
}

func (p *ProductSimpleList) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ProductSimple, 0, size)
	p.ProductList = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &ProductSimple{}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.ProductList = append(p.ProductList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ProductSimpleList) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.RecentNewReleaseDate = v
	}
	return nil
}

func (p *ProductSimpleList) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.RecentEventReleaseDate = v
	}
	return nil
}

func (p *ProductSimpleList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProductSimpleList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProductSimpleList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hasNext: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return fmt.Errorf("%T.hasNext (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hasNext: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reinvokeHour", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reinvokeHour: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReinvokeHour)); err != nil {
		return fmt.Errorf("%T.reinvokeHour (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reinvokeHour: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastVersionSeq", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastVersionSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastVersionSeq)); err != nil {
		return fmt.Errorf("%T.lastVersionSeq (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastVersionSeq: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productList", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:productList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ProductList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:productList: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentNewReleaseDate", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:recentNewReleaseDate: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RecentNewReleaseDate)); err != nil {
		return fmt.Errorf("%T.recentNewReleaseDate (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:recentNewReleaseDate: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recentEventReleaseDate", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:recentEventReleaseDate: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RecentEventReleaseDate)); err != nil {
		return fmt.Errorf("%T.recentEventReleaseDate (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:recentEventReleaseDate: %s", p, err)
	}
	return err
}

func (p *ProductSimpleList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProductSimpleList(%+v)", *p)
}

type Profile struct {
	Mid string `thrift:"mid,1" json:"mid"`
	// unused field # 2
	Userid string `thrift:"userid,3" json:"userid"`
	// unused fields # 4 to 9
	Phone      string `thrift:"phone,10" json:"phone"`
	Email      string `thrift:"email,11" json:"email"`
	RegionCode string `thrift:"regionCode,12" json:"regionCode"`
	// unused fields # 13 to 19
	DisplayName   string `thrift:"displayName,20" json:"displayName"`
	PhoneticName  string `thrift:"phoneticName,21" json:"phoneticName"`
	PictureStatus string `thrift:"pictureStatus,22" json:"pictureStatus"`
	ThumbnailUrl  string `thrift:"thumbnailUrl,23" json:"thumbnailUrl"`
	StatusMessage string `thrift:"statusMessage,24" json:"statusMessage"`
	// unused fields # 25 to 30
	AllowSearchByUserid bool   `thrift:"allowSearchByUserid,31" json:"allowSearchByUserid"`
	AllowSearchByEmail  bool   `thrift:"allowSearchByEmail,32" json:"allowSearchByEmail"`
	PicturePath         string `thrift:"picturePath,33" json:"picturePath"`
}

func NewProfile() *Profile {
	return &Profile{}
}

func (p *Profile) GetMid() string {
	return p.Mid
}

func (p *Profile) GetUserid() string {
	return p.Userid
}

func (p *Profile) GetPhone() string {
	return p.Phone
}

func (p *Profile) GetEmail() string {
	return p.Email
}

func (p *Profile) GetRegionCode() string {
	return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
	return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
	return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
	return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
	return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
	return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
	return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
	return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
	return p.PicturePath
}
func (p *Profile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.ReadField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.ReadField33(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Profile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Profile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *Profile) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *Profile) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *Profile) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.RegionCode = v
	}
	return nil
}

func (p *Profile) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *Profile) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.PhoneticName = v
	}
	return nil
}

func (p *Profile) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.PictureStatus = v
	}
	return nil
}

func (p *Profile) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.ThumbnailUrl = v
	}
	return nil
}

func (p *Profile) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.StatusMessage = v
	}
	return nil
}

func (p *Profile) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		p.AllowSearchByUserid = v
	}
	return nil
}

func (p *Profile) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 32: %s", err)
	} else {
		p.AllowSearchByEmail = v
	}
	return nil
}

func (p *Profile) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 33: %s", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Profile"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Profile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:userid: %s", p, err)
	}
	return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:phone: %s", p, err)
	}
	return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:email: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return fmt.Errorf("%T.email (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:email: %s", p, err)
	}
	return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:regionCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RegionCode)); err != nil {
		return fmt.Errorf("%T.regionCode (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:regionCode: %s", p, err)
	}
	return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:displayName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return fmt.Errorf("%T.displayName (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:displayName: %s", p, err)
	}
	return err
}

func (p *Profile) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:phoneticName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
		return fmt.Errorf("%T.phoneticName (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:phoneticName: %s", p, err)
	}
	return err
}

func (p *Profile) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:pictureStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
		return fmt.Errorf("%T.pictureStatus (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:pictureStatus: %s", p, err)
	}
	return err
}

func (p *Profile) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:thumbnailUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
		return fmt.Errorf("%T.thumbnailUrl (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:thumbnailUrl: %s", p, err)
	}
	return err
}

func (p *Profile) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:statusMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
		return fmt.Errorf("%T.statusMessage (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:statusMessage: %s", p, err)
	}
	return err
}

func (p *Profile) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByUserid", thrift.BOOL, 31); err != nil {
		return fmt.Errorf("%T write field begin error 31:allowSearchByUserid: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByUserid)); err != nil {
		return fmt.Errorf("%T.allowSearchByUserid (31) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 31:allowSearchByUserid: %s", p, err)
	}
	return err
}

func (p *Profile) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allowSearchByEmail", thrift.BOOL, 32); err != nil {
		return fmt.Errorf("%T write field begin error 32:allowSearchByEmail: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.AllowSearchByEmail)); err != nil {
		return fmt.Errorf("%T.allowSearchByEmail (32) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 32:allowSearchByEmail: %s", p, err)
	}
	return err
}

func (p *Profile) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
		return fmt.Errorf("%T write field begin error 33:picturePath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PicturePath)); err != nil {
		return fmt.Errorf("%T.picturePath (33) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 33:picturePath: %s", p, err)
	}
	return err
}

func (p *Profile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Profile(%+v)", *p)
}

type ProximityMatchCandidateResult_ struct {
	Users   []*Contact `thrift:"users,1" json:"users"`
	Buddies []*Contact `thrift:"buddies,2" json:"buddies"`
}

func NewProximityMatchCandidateResult_() *ProximityMatchCandidateResult_ {
	return &ProximityMatchCandidateResult_{}
}

func (p *ProximityMatchCandidateResult_) GetUsers() []*Contact {
	return p.Users
}

func (p *ProximityMatchCandidateResult_) GetBuddies() []*Contact {
	return p.Buddies
}
func (p *ProximityMatchCandidateResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Users = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &Contact{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.Users = append(p.Users, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Buddies = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &Contact{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.Buddies = append(p.Buddies, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProximityMatchCandidateResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ProximityMatchCandidateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("users", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:users: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Users {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:users: %s", p, err)
	}
	return err
}

func (p *ProximityMatchCandidateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddies", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:buddies: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Buddies)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Buddies {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:buddies: %s", p, err)
	}
	return err
}

func (p *ProximityMatchCandidateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProximityMatchCandidateResult_(%+v)", *p)
}

type RegisterWithSnsIdResult_ struct {
	AuthToken   string `thrift:"authToken,1" json:"authToken"`
	UserCreated bool   `thrift:"userCreated,2" json:"userCreated"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
	return &RegisterWithSnsIdResult_{}
}

func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
	return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
	return p.UserCreated
}
func (p *RegisterWithSnsIdResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AuthToken = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserCreated = v
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterWithSnsIdResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthToken)); err != nil {
		return fmt.Errorf("%T.authToken (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authToken: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userCreated", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userCreated: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.UserCreated)); err != nil {
		return fmt.Errorf("%T.userCreated (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userCreated: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

type Room struct {
	Mid         string `thrift:"mid,1" json:"mid"`
	CreatedTime int64  `thrift:"createdTime,2" json:"createdTime"`
	// unused fields # 3 to 9
	Contacts []*Contact `thrift:"contacts,10" json:"contacts"`
	// unused fields # 11 to 30
	NotificationDisabled bool `thrift:"notificationDisabled,31" json:"notificationDisabled"`
}

func NewRoom() *Room {
	return &Room{}
}

func (p *Room) GetMid() string {
	return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Room) GetContacts() []*Contact {
	return p.Contacts
}

func (p *Room) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}
func (p *Room) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Room) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *Room) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Room) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &Contact{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.Contacts = append(p.Contacts, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Room) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 31: %s", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Room"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:mid: %s", p, err)
	}
	return err
}

func (p *Room) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createdTime: %s", p, err)
	}
	return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:contacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:contacts: %s", p, err)
	}
	return err
}

func (p *Room) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
		return fmt.Errorf("%T write field begin error 31:notificationDisabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
		return fmt.Errorf("%T.notificationDisabled (31) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 31:notificationDisabled: %s", p, err)
	}
	return err
}

func (p *Room) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Room(%+v)", *p)
}

type RSAKey struct {
	Keynm      string `thrift:"keynm,1" json:"keynm"`
	Nvalue     string `thrift:"nvalue,2" json:"nvalue"`
	Evalue     string `thrift:"evalue,3" json:"evalue"`
	SessionKey string `thrift:"sessionKey,4" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
	return &RSAKey{}
}

func (p *RSAKey) GetKeynm() string {
	return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
	return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
	return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
	return p.SessionKey
}
func (p *RSAKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RSAKey) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Keynm = v
	}
	return nil
}

func (p *RSAKey) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Nvalue = v
	}
	return nil
}

func (p *RSAKey) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Evalue = v
	}
	return nil
}

func (p *RSAKey) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *RSAKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RSAKey"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RSAKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keynm", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:keynm: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Keynm)); err != nil {
		return fmt.Errorf("%T.keynm (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:keynm: %s", p, err)
	}
	return err
}

func (p *RSAKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nvalue", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nvalue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Nvalue)); err != nil {
		return fmt.Errorf("%T.nvalue (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nvalue: %s", p, err)
	}
	return err
}

func (p *RSAKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("evalue", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:evalue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Evalue)); err != nil {
		return fmt.Errorf("%T.evalue (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:evalue: %s", p, err)
	}
	return err
}

func (p *RSAKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionKey", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sessionKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return fmt.Errorf("%T.sessionKey (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sessionKey: %s", p, err)
	}
	return err
}

func (p *RSAKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RSAKey(%+v)", *p)
}

type Settings struct {
	// unused fields # 1 to 9
	NotificationEnable          bool   `thrift:"notificationEnable,10" json:"notificationEnable"`
	NotificationMuteExpiration  int64  `thrift:"notificationMuteExpiration,11" json:"notificationMuteExpiration"`
	NotificationNewMessage      bool   `thrift:"notificationNewMessage,12" json:"notificationNewMessage"`
	NotificationGroupInvitation bool   `thrift:"notificationGroupInvitation,13" json:"notificationGroupInvitation"`
	NotificationShowMessage     bool   `thrift:"notificationShowMessage,14" json:"notificationShowMessage"`
	NotificationIncomingCall    bool   `thrift:"notificationIncomingCall,15" json:"notificationIncomingCall"`
	NotificationSoundMessage    string `thrift:"notificationSoundMessage,16" json:"notificationSoundMessage"`
	NotificationSoundGroup      string `thrift:"notificationSoundGroup,17" json:"notificationSoundGroup"`
	NotificationDisabledWithSub bool   `thrift:"notificationDisabledWithSub,18" json:"notificationDisabledWithSub"`
	// unused field # 19
	PrivacySyncContacts                 bool `thrift:"privacySyncContacts,20" json:"privacySyncContacts"`
	PrivacySearchByPhoneNumber          bool `thrift:"privacySearchByPhoneNumber,21" json:"privacySearchByPhoneNumber"`
	PrivacySearchByUserid               bool `thrift:"privacySearchByUserid,22" json:"privacySearchByUserid"`
	PrivacySearchByEmail                bool `thrift:"privacySearchByEmail,23" json:"privacySearchByEmail"`
	PrivacyAllowSecondaryDeviceLogin    bool `thrift:"privacyAllowSecondaryDeviceLogin,24" json:"privacyAllowSecondaryDeviceLogin"`
	PrivacyProfileImagePostToMyhome     bool `thrift:"privacyProfileImagePostToMyhome,25" json:"privacyProfileImagePostToMyhome"`
	PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" json:"privacyReceiveMessagesFromNotFriend"`
	// unused fields # 27 to 29
	ContactMyTicket string `thrift:"contactMyTicket,30" json:"contactMyTicket"`
	// unused fields # 31 to 39
	IdentityProvider        IdentityProvider        `thrift:"identityProvider,40" json:"identityProvider"`
	IdentityIdentifier      string                  `thrift:"identityIdentifier,41" json:"identityIdentifier"`
	SnsAccounts             map[SnsIdType]string    `thrift:"snsAccounts,42" json:"snsAccounts"`
	PhoneRegistration       bool                    `thrift:"phoneRegistration,43" json:"phoneRegistration"`
	EmailConfirmationStatus EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" json:"emailConfirmationStatus"`
	// unused fields # 45 to 49
	PreferenceLocale string `thrift:"preferenceLocale,50" json:"preferenceLocale"`
	// unused fields # 51 to 59
	CustomModes map[CustomMode]string `thrift:"customModes,60" json:"customModes"`
}

func NewSettings() *Settings {
	return &Settings{}
}

func (p *Settings) GetNotificationEnable() bool {
	return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() int64 {
	return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() bool {
	return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
	return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
	return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
	return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
	return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
	return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
	return p.NotificationDisabledWithSub
}

func (p *Settings) GetPrivacySyncContacts() bool {
	return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
	return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
	return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
	return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogin() bool {
	return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
	return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
	return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetContactMyTicket() string {
	return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
	return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[SnsIdType]string {
	return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
	return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
	return p.EmailConfirmationStatus
}

func (p *Settings) GetPreferenceLocale() string {
	return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[CustomMode]string {
	return p.CustomModes
}
func (p *Settings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.ReadField41(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.ReadField42(iprot); err != nil {
				return err
			}
		case 43:
			if err := p.ReadField43(iprot); err != nil {
				return err
			}
		case 44:
			if err := p.ReadField44(iprot); err != nil {
				return err
			}
		case 50:
			if err := p.ReadField50(iprot); err != nil {
				return err
			}
		case 60:
			if err := p.ReadField60(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Settings) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.NotificationEnable = v
	}
	return nil
}

func (p *Settings) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.NotificationMuteExpiration = v
	}
	return nil
}

func (p *Settings) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.NotificationNewMessage = v
	}
	return nil
}

func (p *Settings) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.NotificationGroupInvitation = v
	}
	return nil
}

func (p *Settings) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.NotificationShowMessage = v
	}
	return nil
}

func (p *Settings) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.NotificationIncomingCall = v
	}
	return nil
}

func (p *Settings) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.NotificationSoundMessage = v
	}
	return nil
}

func (p *Settings) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.NotificationSoundGroup = v
	}
	return nil
}

func (p *Settings) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.NotificationDisabledWithSub = v
	}
	return nil
}

func (p *Settings) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.PrivacySyncContacts = v
	}
	return nil
}

func (p *Settings) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.PrivacySearchByPhoneNumber = v
	}
	return nil
}

func (p *Settings) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.PrivacySearchByUserid = v
	}
	return nil
}

func (p *Settings) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.PrivacySearchByEmail = v
	}
	return nil
}

func (p *Settings) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.PrivacyAllowSecondaryDeviceLogin = v
	}
	return nil
}

func (p *Settings) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.PrivacyProfileImagePostToMyhome = v
	}
	return nil
}

func (p *Settings) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.PrivacyReceiveMessagesFromNotFriend = v
	}
	return nil
}

func (p *Settings) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 30: %s", err)
	} else {
		p.ContactMyTicket = v
	}
	return nil
}

func (p *Settings) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 40: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *Settings) ReadField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 41: %s", err)
	} else {
		p.IdentityIdentifier = v
	}
	return nil
}

func (p *Settings) ReadField42(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[SnsIdType]string, size)
	p.SnsAccounts = tMap
	for i := 0; i < size; i++ {
		var _key15 SnsIdType
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := SnsIdType(v)
			_key15 = temp
		}
		var _val16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val16 = v
		}
		p.SnsAccounts[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Settings) ReadField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 43: %s", err)
	} else {
		p.PhoneRegistration = v
	}
	return nil
}

func (p *Settings) ReadField44(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 44: %s", err)
	} else {
		temp := EmailConfirmationStatus(v)
		p.EmailConfirmationStatus = temp
	}
	return nil
}

func (p *Settings) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 50: %s", err)
	} else {
		p.PreferenceLocale = v
	}
	return nil
}

func (p *Settings) ReadField60(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[CustomMode]string, size)
	p.CustomModes = tMap
	for i := 0; i < size; i++ {
		var _key17 CustomMode
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := CustomMode(v)
			_key17 = temp
		}
		var _val18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val18 = v
		}
		p.CustomModes[_key17] = _val18
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Settings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Settings"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField41(oprot); err != nil {
		return err
	}
	if err := p.writeField42(oprot); err != nil {
		return err
	}
	if err := p.writeField43(oprot); err != nil {
		return err
	}
	if err := p.writeField44(oprot); err != nil {
		return err
	}
	if err := p.writeField50(oprot); err != nil {
		return err
	}
	if err := p.writeField60(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Settings) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationEnable", thrift.BOOL, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:notificationEnable: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationEnable)); err != nil {
		return fmt.Errorf("%T.notificationEnable (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:notificationEnable: %s", p, err)
	}
	return err
}

func (p *Settings) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationMuteExpiration", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:notificationMuteExpiration: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NotificationMuteExpiration)); err != nil {
		return fmt.Errorf("%T.notificationMuteExpiration (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:notificationMuteExpiration: %s", p, err)
	}
	return err
}

func (p *Settings) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationNewMessage", thrift.BOOL, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:notificationNewMessage: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationNewMessage)); err != nil {
		return fmt.Errorf("%T.notificationNewMessage (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:notificationNewMessage: %s", p, err)
	}
	return err
}

func (p *Settings) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationGroupInvitation", thrift.BOOL, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:notificationGroupInvitation: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationGroupInvitation)); err != nil {
		return fmt.Errorf("%T.notificationGroupInvitation (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:notificationGroupInvitation: %s", p, err)
	}
	return err
}

func (p *Settings) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationShowMessage", thrift.BOOL, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:notificationShowMessage: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationShowMessage)); err != nil {
		return fmt.Errorf("%T.notificationShowMessage (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:notificationShowMessage: %s", p, err)
	}
	return err
}

func (p *Settings) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationIncomingCall", thrift.BOOL, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:notificationIncomingCall: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationIncomingCall)); err != nil {
		return fmt.Errorf("%T.notificationIncomingCall (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:notificationIncomingCall: %s", p, err)
	}
	return err
}

func (p *Settings) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundMessage", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:notificationSoundMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundMessage)); err != nil {
		return fmt.Errorf("%T.notificationSoundMessage (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:notificationSoundMessage: %s", p, err)
	}
	return err
}

func (p *Settings) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationSoundGroup", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:notificationSoundGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NotificationSoundGroup)); err != nil {
		return fmt.Errorf("%T.notificationSoundGroup (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:notificationSoundGroup: %s", p, err)
	}
	return err
}

func (p *Settings) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:notificationDisabledWithSub: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NotificationDisabledWithSub)); err != nil {
		return fmt.Errorf("%T.notificationDisabledWithSub (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:notificationDisabledWithSub: %s", p, err)
	}
	return err
}

func (p *Settings) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySyncContacts", thrift.BOOL, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:privacySyncContacts: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySyncContacts)); err != nil {
		return fmt.Errorf("%T.privacySyncContacts (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:privacySyncContacts: %s", p, err)
	}
	return err
}

func (p *Settings) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:privacySearchByPhoneNumber: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByPhoneNumber)); err != nil {
		return fmt.Errorf("%T.privacySearchByPhoneNumber (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:privacySearchByPhoneNumber: %s", p, err)
	}
	return err
}

func (p *Settings) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByUserid", thrift.BOOL, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:privacySearchByUserid: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByUserid)); err != nil {
		return fmt.Errorf("%T.privacySearchByUserid (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:privacySearchByUserid: %s", p, err)
	}
	return err
}

func (p *Settings) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacySearchByEmail", thrift.BOOL, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:privacySearchByEmail: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacySearchByEmail)); err != nil {
		return fmt.Errorf("%T.privacySearchByEmail (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:privacySearchByEmail: %s", p, err)
	}
	return err
}

func (p *Settings) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
		return fmt.Errorf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: %s", p, err)
	}
	return err
}

func (p *Settings) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:privacyProfileImagePostToMyhome: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
		return fmt.Errorf("%T.privacyProfileImagePostToMyhome (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:privacyProfileImagePostToMyhome: %s", p, err)
	}
	return err
}

func (p *Settings) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
		return fmt.Errorf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: %s", p, err)
	}
	return err
}

func (p *Settings) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactMyTicket", thrift.STRING, 30); err != nil {
		return fmt.Errorf("%T write field begin error 30:contactMyTicket: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContactMyTicket)); err != nil {
		return fmt.Errorf("%T.contactMyTicket (30) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 30:contactMyTicket: %s", p, err)
	}
	return err
}

func (p *Settings) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 40); err != nil {
		return fmt.Errorf("%T write field begin error 40:identityProvider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return fmt.Errorf("%T.identityProvider (40) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 40:identityProvider: %s", p, err)
	}
	return err
}

func (p *Settings) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityIdentifier", thrift.STRING, 41); err != nil {
		return fmt.Errorf("%T write field begin error 41:identityIdentifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IdentityIdentifier)); err != nil {
		return fmt.Errorf("%T.identityIdentifier (41) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 41:identityIdentifier: %s", p, err)
	}
	return err
}

func (p *Settings) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccounts", thrift.MAP, 42); err != nil {
		return fmt.Errorf("%T write field begin error 42:snsAccounts: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.SnsAccounts {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 42:snsAccounts: %s", p, err)
	}
	return err
}

func (p *Settings) writeField43(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneRegistration", thrift.BOOL, 43); err != nil {
		return fmt.Errorf("%T write field begin error 43:phoneRegistration: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PhoneRegistration)); err != nil {
		return fmt.Errorf("%T.phoneRegistration (43) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 43:phoneRegistration: %s", p, err)
	}
	return err
}

func (p *Settings) writeField44(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmationStatus", thrift.I32, 44); err != nil {
		return fmt.Errorf("%T write field begin error 44:emailConfirmationStatus: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.EmailConfirmationStatus)); err != nil {
		return fmt.Errorf("%T.emailConfirmationStatus (44) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 44:emailConfirmationStatus: %s", p, err)
	}
	return err
}

func (p *Settings) writeField50(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preferenceLocale", thrift.STRING, 50); err != nil {
		return fmt.Errorf("%T write field begin error 50:preferenceLocale: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PreferenceLocale)); err != nil {
		return fmt.Errorf("%T.preferenceLocale (50) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 50:preferenceLocale: %s", p, err)
	}
	return err
}

func (p *Settings) writeField60(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customModes", thrift.MAP, 60); err != nil {
		return fmt.Errorf("%T write field begin error 60:customModes: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.CustomModes {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 60:customModes: %s", p, err)
	}
	return err
}

func (p *Settings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Settings(%+v)", *p)
}

type SnsFriend struct {
	SnsUserId   string    `thrift:"snsUserId,1" json:"snsUserId"`
	SnsUserName string    `thrift:"snsUserName,2" json:"snsUserName"`
	SnsIdType   SnsIdType `thrift:"snsIdType,3" json:"snsIdType"`
}

func NewSnsFriend() *SnsFriend {
	return &SnsFriend{}
}

func (p *SnsFriend) GetSnsUserId() string {
	return p.SnsUserId
}

func (p *SnsFriend) GetSnsUserName() string {
	return p.SnsUserName
}

func (p *SnsFriend) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}
func (p *SnsFriend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SnsFriend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SnsUserId = v
	}
	return nil
}

func (p *SnsFriend) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SnsUserName = v
	}
	return nil
}

func (p *SnsFriend) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *SnsFriend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsFriend"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SnsFriend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsUserId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:snsUserId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsUserId)); err != nil {
		return fmt.Errorf("%T.snsUserId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:snsUserId: %s", p, err)
	}
	return err
}

func (p *SnsFriend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsUserName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsUserName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsUserName)); err != nil {
		return fmt.Errorf("%T.snsUserName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsUserName: %s", p, err)
	}
	return err
}

func (p *SnsFriend) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsIdType: %s", p, err)
	}
	return err
}

func (p *SnsFriend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsFriend(%+v)", *p)
}

type SnsFriendContactRegistration struct {
	Contact   *Contact  `thrift:"contact,1" json:"contact"`
	SnsIdType SnsIdType `thrift:"snsIdType,2" json:"snsIdType"`
	SnsUserId string    `thrift:"snsUserId,3" json:"snsUserId"`
}

func NewSnsFriendContactRegistration() *SnsFriendContactRegistration {
	return &SnsFriendContactRegistration{}
}

var SnsFriendContactRegistration_Contact_DEFAULT *Contact

func (p *SnsFriendContactRegistration) GetContact() *Contact {
	if !p.IsSetContact() {
		return SnsFriendContactRegistration_Contact_DEFAULT
	}
	return p.Contact
}

func (p *SnsFriendContactRegistration) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}

func (p *SnsFriendContactRegistration) GetSnsUserId() string {
	return p.SnsUserId
}
func (p *SnsFriendContactRegistration) IsSetContact() bool {
	return p.Contact != nil
}

func (p *SnsFriendContactRegistration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SnsFriendContactRegistration) ReadField1(iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Contact, err)
	}
	return nil
}

func (p *SnsFriendContactRegistration) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *SnsFriendContactRegistration) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SnsUserId = v
	}
	return nil
}

func (p *SnsFriendContactRegistration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsFriendContactRegistration"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SnsFriendContactRegistration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:contact: %s", p, err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Contact, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:contact: %s", p, err)
	}
	return err
}

func (p *SnsFriendContactRegistration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *SnsFriendContactRegistration) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsUserId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsUserId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsUserId)); err != nil {
		return fmt.Errorf("%T.snsUserId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsUserId: %s", p, err)
	}
	return err
}

func (p *SnsFriendContactRegistration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsFriendContactRegistration(%+v)", *p)
}

type SnsFriendModification struct {
	TypeA1    ModificationType `thrift:"type,1" json:"type"`
	SnsFriend *SnsFriend       `thrift:"snsFriend,2" json:"snsFriend"`
}

func NewSnsFriendModification() *SnsFriendModification {
	return &SnsFriendModification{}
}

func (p *SnsFriendModification) GetTypeA1() ModificationType {
	return p.TypeA1
}

var SnsFriendModification_SnsFriend_DEFAULT *SnsFriend

func (p *SnsFriendModification) GetSnsFriend() *SnsFriend {
	if !p.IsSetSnsFriend() {
		return SnsFriendModification_SnsFriend_DEFAULT
	}
	return p.SnsFriend
}
func (p *SnsFriendModification) IsSetSnsFriend() bool {
	return p.SnsFriend != nil
}

func (p *SnsFriendModification) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SnsFriendModification) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ModificationType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *SnsFriendModification) ReadField2(iprot thrift.TProtocol) error {
	p.SnsFriend = &SnsFriend{}
	if err := p.SnsFriend.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SnsFriend, err)
	}
	return nil
}

func (p *SnsFriendModification) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsFriendModification"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SnsFriendModification) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *SnsFriendModification) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsFriend", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsFriend: %s", p, err)
	}
	if err := p.SnsFriend.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SnsFriend, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsFriend: %s", p, err)
	}
	return err
}

func (p *SnsFriendModification) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsFriendModification(%+v)", *p)
}

type SnsIdUserStatus struct {
	UserExisting          bool `thrift:"userExisting,1" json:"userExisting"`
	PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,2" json:"phoneNumberRegistered"`
	SameDevice            bool `thrift:"sameDevice,3" json:"sameDevice"`
}

func NewSnsIdUserStatus() *SnsIdUserStatus {
	return &SnsIdUserStatus{}
}

func (p *SnsIdUserStatus) GetUserExisting() bool {
	return p.UserExisting
}

func (p *SnsIdUserStatus) GetPhoneNumberRegistered() bool {
	return p.PhoneNumberRegistered
}

func (p *SnsIdUserStatus) GetSameDevice() bool {
	return p.SameDevice
}
func (p *SnsIdUserStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SnsIdUserStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UserExisting = v
	}
	return nil
}

func (p *SnsIdUserStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PhoneNumberRegistered = v
	}
	return nil
}

func (p *SnsIdUserStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SameDevice = v
	}
	return nil
}

func (p *SnsIdUserStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnsIdUserStatus"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SnsIdUserStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userExisting", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userExisting: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.UserExisting)); err != nil {
		return fmt.Errorf("%T.userExisting (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userExisting: %s", p, err)
	}
	return err
}

func (p *SnsIdUserStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:phoneNumberRegistered: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
		return fmt.Errorf("%T.phoneNumberRegistered (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:phoneNumberRegistered: %s", p, err)
	}
	return err
}

func (p *SnsIdUserStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sameDevice", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sameDevice: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.SameDevice)); err != nil {
		return fmt.Errorf("%T.sameDevice (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sameDevice: %s", p, err)
	}
	return err
}

func (p *SnsIdUserStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnsIdUserStatus(%+v)", *p)
}

type SystemConfiguration struct {
	Endpoint    string `thrift:"endpoint,1" json:"endpoint"`
	EndpointSsl string `thrift:"endpointSsl,2" json:"endpointSsl"`
	UpdateUrl   string `thrift:"updateUrl,3" json:"updateUrl"`
	// unused fields # 4 to 10
	C2dmAccount string `thrift:"c2dmAccount,11" json:"c2dmAccount"`
	NniServer   string `thrift:"nniServer,12" json:"nniServer"`
}

func NewSystemConfiguration() *SystemConfiguration {
	return &SystemConfiguration{}
}

func (p *SystemConfiguration) GetEndpoint() string {
	return p.Endpoint
}

func (p *SystemConfiguration) GetEndpointSsl() string {
	return p.EndpointSsl
}

func (p *SystemConfiguration) GetUpdateUrl() string {
	return p.UpdateUrl
}

func (p *SystemConfiguration) GetC2dmAccount() string {
	return p.C2dmAccount
}

func (p *SystemConfiguration) GetNniServer() string {
	return p.NniServer
}
func (p *SystemConfiguration) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SystemConfiguration) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Endpoint = v
	}
	return nil
}

func (p *SystemConfiguration) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.EndpointSsl = v
	}
	return nil
}

func (p *SystemConfiguration) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UpdateUrl = v
	}
	return nil
}

func (p *SystemConfiguration) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.C2dmAccount = v
	}
	return nil
}

func (p *SystemConfiguration) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.NniServer = v
	}
	return nil
}

func (p *SystemConfiguration) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemConfiguration"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SystemConfiguration) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpoint", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:endpoint: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Endpoint)); err != nil {
		return fmt.Errorf("%T.endpoint (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:endpoint: %s", p, err)
	}
	return err
}

func (p *SystemConfiguration) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpointSsl", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:endpointSsl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EndpointSsl)); err != nil {
		return fmt.Errorf("%T.endpointSsl (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:endpointSsl: %s", p, err)
	}
	return err
}

func (p *SystemConfiguration) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateUrl", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateUrl: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UpdateUrl)); err != nil {
		return fmt.Errorf("%T.updateUrl (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateUrl: %s", p, err)
	}
	return err
}

func (p *SystemConfiguration) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("c2dmAccount", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:c2dmAccount: %s", p, err)
	}
	if err := oprot.WriteString(string(p.C2dmAccount)); err != nil {
		return fmt.Errorf("%T.c2dmAccount (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:c2dmAccount: %s", p, err)
	}
	return err
}

func (p *SystemConfiguration) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nniServer", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:nniServer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NniServer)); err != nil {
		return fmt.Errorf("%T.nniServer (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:nniServer: %s", p, err)
	}
	return err
}

func (p *SystemConfiguration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemConfiguration(%+v)", *p)
}

type TalkException struct {
	Code         ErrorCode         `thrift:"code,1" json:"code"`
	Reason       string            `thrift:"reason,2" json:"reason"`
	ParameterMap map[string]string `thrift:"parameterMap,3" json:"parameterMap"`
}

func NewTalkException() *TalkException {
	return &TalkException{}
}

func (p *TalkException) GetCode() ErrorCode {
	return p.Code
}

func (p *TalkException) GetReason() string {
	return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
	return p.ParameterMap
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TalkException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TalkException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *TalkException) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParameterMap = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key19 = v
		}
		var _val20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val20 = v
		}
		p.ParameterMap[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TalkException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return fmt.Errorf("%T.code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:code: %s", p, err)
	}
	return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reason: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return fmt.Errorf("%T.reason (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reason: %s", p, err)
	}
	return err
}

func (p *TalkException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:parameterMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParameterMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:parameterMap: %s", p, err)
	}
	return err
}

func (p *TalkException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
	return p.String()
}

type Ticket struct {
	Id string `thrift:"id,1" json:"id"`
	// unused fields # 2 to 9
	ExpirationTime int64 `thrift:"expirationTime,10" json:"expirationTime"`
	// unused fields # 11 to 20
	MaxUseCount int32 `thrift:"maxUseCount,21" json:"maxUseCount"`
}

func NewTicket() *Ticket {
	return &Ticket{}
}

func (p *Ticket) GetId() string {
	return p.Id
}

func (p *Ticket) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *Ticket) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Ticket) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Ticket) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *Ticket) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *Ticket) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ticket"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Ticket) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *Ticket) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:expirationTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return fmt.Errorf("%T.expirationTime (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:expirationTime: %s", p, err)
	}
	return err
}

func (p *Ticket) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:maxUseCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return fmt.Errorf("%T.maxUseCount (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:maxUseCount: %s", p, err)
	}
	return err
}

func (p *Ticket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ticket(%+v)", *p)
}

type TMessageBox struct {
	Id        string `thrift:"id,1" json:"id"`
	ChannelId string `thrift:"channelId,2" json:"channelId"`
	// unused fields # 3 to 4
	LastSeq          int64      `thrift:"lastSeq,5" json:"lastSeq"`
	UnreadCount      int64      `thrift:"unreadCount,6" json:"unreadCount"`
	LastModifiedTime int64      `thrift:"lastModifiedTime,7" json:"lastModifiedTime"`
	Status           int32      `thrift:"status,8" json:"status"`
	MidType          MIDType    `thrift:"midType,9" json:"midType"`
	LastMessages     []*Message `thrift:"lastMessages,10" json:"lastMessages"`
}

func NewTMessageBox() *TMessageBox {
	return &TMessageBox{}
}

func (p *TMessageBox) GetId() string {
	return p.Id
}

func (p *TMessageBox) GetChannelId() string {
	return p.ChannelId
}

func (p *TMessageBox) GetLastSeq() int64 {
	return p.LastSeq
}

func (p *TMessageBox) GetUnreadCount() int64 {
	return p.UnreadCount
}

func (p *TMessageBox) GetLastModifiedTime() int64 {
	return p.LastModifiedTime
}

func (p *TMessageBox) GetStatus() int32 {
	return p.Status
}

func (p *TMessageBox) GetMidType() MIDType {
	return p.MidType
}

func (p *TMessageBox) GetLastMessages() []*Message {
	return p.LastMessages
}
func (p *TMessageBox) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMessageBox) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *TMessageBox) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *TMessageBox) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastSeq = v
	}
	return nil
}

func (p *TMessageBox) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.UnreadCount = v
	}
	return nil
}

func (p *TMessageBox) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.LastModifiedTime = v
	}
	return nil
}

func (p *TMessageBox) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TMessageBox) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := MIDType(v)
		p.MidType = temp
	}
	return nil
}

func (p *TMessageBox) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.LastMessages = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &Message{}
		if err := _elem21.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem21, err)
		}
		p.LastMessages = append(p.LastMessages, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TMessageBox) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBox"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMessageBox) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSeq", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastSeq)); err != nil {
		return fmt.Errorf("%T.lastSeq (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastSeq: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unreadCount", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:unreadCount: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UnreadCount)); err != nil {
		return fmt.Errorf("%T.unreadCount (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:unreadCount: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastModifiedTime", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:lastModifiedTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastModifiedTime)); err != nil {
		return fmt.Errorf("%T.lastModifiedTime (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:lastModifiedTime: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:status: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("midType", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:midType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MidType)); err != nil {
		return fmt.Errorf("%T.midType (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:midType: %s", p, err)
	}
	return err
}

func (p *TMessageBox) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessages", thrift.LIST, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:lastMessages: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LastMessages)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.LastMessages {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:lastMessages: %s", p, err)
	}
	return err
}

func (p *TMessageBox) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBox(%+v)", *p)
}

type TMessageBoxWrapUp struct {
	MessageBox      *TMessageBox `thrift:"messageBox,1" json:"messageBox"`
	Name            string       `thrift:"name,2" json:"name"`
	Contacts        []*Contact   `thrift:"contacts,3" json:"contacts"`
	PictureRevision string       `thrift:"pictureRevision,4" json:"pictureRevision"`
}

func NewTMessageBoxWrapUp() *TMessageBoxWrapUp {
	return &TMessageBoxWrapUp{}
}

var TMessageBoxWrapUp_MessageBox_DEFAULT *TMessageBox

func (p *TMessageBoxWrapUp) GetMessageBox() *TMessageBox {
	if !p.IsSetMessageBox() {
		return TMessageBoxWrapUp_MessageBox_DEFAULT
	}
	return p.MessageBox
}

func (p *TMessageBoxWrapUp) GetName() string {
	return p.Name
}

func (p *TMessageBoxWrapUp) GetContacts() []*Contact {
	return p.Contacts
}

func (p *TMessageBoxWrapUp) GetPictureRevision() string {
	return p.PictureRevision
}
func (p *TMessageBoxWrapUp) IsSetMessageBox() bool {
	return p.MessageBox != nil
}

func (p *TMessageBoxWrapUp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) ReadField1(iprot thrift.TProtocol) error {
	p.MessageBox = &TMessageBox{}
	if err := p.MessageBox.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MessageBox, err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TMessageBoxWrapUp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Contacts = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &Contact{}
		if err := _elem22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem22, err)
		}
		p.Contacts = append(p.Contacts, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PictureRevision = v
	}
	return nil
}

func (p *TMessageBoxWrapUp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBoxWrapUp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMessageBoxWrapUp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBox", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageBox: %s", p, err)
	}
	if err := p.MessageBox.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MessageBox, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageBox: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Contacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contacts: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pictureRevision", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:pictureRevision: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PictureRevision)); err != nil {
		return fmt.Errorf("%T.pictureRevision (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:pictureRevision: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBoxWrapUp(%+v)", *p)
}

type TMessageBoxWrapUpResponse struct {
	MessageBoxWrapUpList []*TMessageBoxWrapUp `thrift:"messageBoxWrapUpList,1" json:"messageBoxWrapUpList"`
	TotalSize            int32                `thrift:"totalSize,2" json:"totalSize"`
}

func NewTMessageBoxWrapUpResponse() *TMessageBoxWrapUpResponse {
	return &TMessageBoxWrapUpResponse{}
}

func (p *TMessageBoxWrapUpResponse) GetMessageBoxWrapUpList() []*TMessageBoxWrapUp {
	return p.MessageBoxWrapUpList
}

func (p *TMessageBoxWrapUpResponse) GetTotalSize() int32 {
	return p.TotalSize
}
func (p *TMessageBoxWrapUpResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMessageBoxWrapUp, 0, size)
	p.MessageBoxWrapUpList = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &TMessageBoxWrapUp{}
		if err := _elem23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem23, err)
		}
		p.MessageBoxWrapUpList = append(p.MessageBoxWrapUpList, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalSize = v
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMessageBoxWrapUpResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMessageBoxWrapUpResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxWrapUpList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageBoxWrapUpList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBoxWrapUpList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageBoxWrapUpList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageBoxWrapUpList: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUpResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalSize", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalSize)); err != nil {
		return fmt.Errorf("%T.totalSize (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalSize: %s", p, err)
	}
	return err
}

func (p *TMessageBoxWrapUpResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMessageBoxWrapUpResponse(%+v)", *p)
}

type UserAuthStatus struct {
	PhoneNumberRegistered bool        `thrift:"phoneNumberRegistered,1" json:"phoneNumberRegistered"`
	RegisteredSnsIdTypes  []SnsIdType `thrift:"registeredSnsIdTypes,2" json:"registeredSnsIdTypes"`
}

func NewUserAuthStatus() *UserAuthStatus {
	return &UserAuthStatus{}
}

func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
	return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []SnsIdType {
	return p.RegisteredSnsIdTypes
}
func (p *UserAuthStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserAuthStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PhoneNumberRegistered = v
	}
	return nil
}

func (p *UserAuthStatus) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]SnsIdType, 0, size)
	p.RegisteredSnsIdTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem24 SnsIdType
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := SnsIdType(v)
			_elem24 = temp
		}
		p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *UserAuthStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAuthStatus"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserAuthStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:phoneNumberRegistered: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
		return fmt.Errorf("%T.phoneNumberRegistered (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:phoneNumberRegistered: %s", p, err)
	}
	return err
}

func (p *UserAuthStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registeredSnsIdTypes", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:registeredSnsIdTypes: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.RegisteredSnsIdTypes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:registeredSnsIdTypes: %s", p, err)
	}
	return err
}

func (p *UserAuthStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

type VerificationSessionData struct {
	SessionId                    string               `thrift:"sessionId,1" json:"sessionId"`
	Method                       VerificationMethod   `thrift:"method,2" json:"method"`
	Callback                     string               `thrift:"callback,3" json:"callback"`
	NormalizedPhone              string               `thrift:"normalizedPhone,4" json:"normalizedPhone"`
	CountryCode                  string               `thrift:"countryCode,5" json:"countryCode"`
	NationalSignificantNumber    string               `thrift:"nationalSignificantNumber,6" json:"nationalSignificantNumber"`
	AvailableVerificationMethods []VerificationMethod `thrift:"availableVerificationMethods,7" json:"availableVerificationMethods"`
}

func NewVerificationSessionData() *VerificationSessionData {
	return &VerificationSessionData{}
}

func (p *VerificationSessionData) GetSessionId() string {
	return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationMethod {
	return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
	return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
	return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
	return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
	return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []VerificationMethod {
	return p.AvailableVerificationMethods
}
func (p *VerificationSessionData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerificationSessionData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *VerificationSessionData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := VerificationMethod(v)
		p.Method = temp
	}
	return nil
}

func (p *VerificationSessionData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Callback = v
	}
	return nil
}

func (p *VerificationSessionData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NormalizedPhone = v
	}
	return nil
}

func (p *VerificationSessionData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CountryCode = v
	}
	return nil
}

func (p *VerificationSessionData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NationalSignificantNumber = v
	}
	return nil
}

func (p *VerificationSessionData) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]VerificationMethod, 0, size)
	p.AvailableVerificationMethods = tSlice
	for i := 0; i < size; i++ {
		var _elem25 VerificationMethod
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := VerificationMethod(v)
			_elem25 = temp
		}
		p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *VerificationSessionData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerificationSessionData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerificationSessionData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sessionId: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:method: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return fmt.Errorf("%T.method (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:method: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callback", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:callback: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Callback)); err != nil {
		return fmt.Errorf("%T.callback (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:callback: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("normalizedPhone", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:normalizedPhone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NormalizedPhone)); err != nil {
		return fmt.Errorf("%T.normalizedPhone (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:normalizedPhone: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:countryCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CountryCode)); err != nil {
		return fmt.Errorf("%T.countryCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:countryCode: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nationalSignificantNumber", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:nationalSignificantNumber: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NationalSignificantNumber)); err != nil {
		return fmt.Errorf("%T.nationalSignificantNumber (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:nationalSignificantNumber: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("availableVerificationMethods", thrift.LIST, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:availableVerificationMethods: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AvailableVerificationMethods {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:availableVerificationMethods: %s", p, err)
	}
	return err
}

func (p *VerificationSessionData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

type WapInvitation struct {
	TypeA1 WapInvitationType `thrift:"type,1" json:"type"`
	// unused fields # 2 to 9
	InviteeEmail string `thrift:"inviteeEmail,10" json:"inviteeEmail"`
	InviterMid   string `thrift:"inviterMid,11" json:"inviterMid"`
	RoomMid      string `thrift:"roomMid,12" json:"roomMid"`
}

func NewWapInvitation() *WapInvitation {
	return &WapInvitation{}
}

func (p *WapInvitation) GetTypeA1() WapInvitationType {
	return p.TypeA1
}

func (p *WapInvitation) GetInviteeEmail() string {
	return p.InviteeEmail
}

func (p *WapInvitation) GetInviterMid() string {
	return p.InviterMid
}

func (p *WapInvitation) GetRoomMid() string {
	return p.RoomMid
}
func (p *WapInvitation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *WapInvitation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := WapInvitationType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *WapInvitation) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.InviteeEmail = v
	}
	return nil
}

func (p *WapInvitation) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.InviterMid = v
	}
	return nil
}

func (p *WapInvitation) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.RoomMid = v
	}
	return nil
}

func (p *WapInvitation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WapInvitation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *WapInvitation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *WapInvitation) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteeEmail", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:inviteeEmail: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InviteeEmail)); err != nil {
		return fmt.Errorf("%T.inviteeEmail (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:inviteeEmail: %s", p, err)
	}
	return err
}

func (p *WapInvitation) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviterMid", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:inviterMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InviterMid)); err != nil {
		return fmt.Errorf("%T.inviterMid (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:inviterMid: %s", p, err)
	}
	return err
}

func (p *WapInvitation) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomMid", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:roomMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoomMid)); err != nil {
		return fmt.Errorf("%T.roomMid (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:roomMid: %s", p, err)
	}
	return err
}

func (p *WapInvitation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WapInvitation(%+v)", *p)
}
