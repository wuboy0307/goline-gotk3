// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TalkService interface {
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	AcceptGroupInvitation(reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - SessionId
	//  - Ids
	AcceptProximityMatches(sessionId string, ids map[string]bool) (err error)
	// Parameters:
	//  - To
	AcquireCallRoute(to string) (r []string, err error)
	// Parameters:
	//  - To
	AcquireCallTicket(to string) (r string, err error)
	// Parameters:
	//  - FeatureType
	AcquireEncryptedAccessToken(featureType FeatureType) (r string, err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	AddSnsId(snsIdType SnsIdType, snsAccessToken string) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - Id
	BlockContact(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Id
	BlockRecommendation(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	CancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - SessionId
	//  - Method
	ChangeVerificationMethod(sessionId string, method VerificationMethod) (r *VerificationSessionData, err error)
	ClearIdentityCredential() (err error)
	// Parameters:
	//  - ChannelId
	//  - MessageBoxId
	ClearMessageBox(channelId string, messageBoxId string) (err error)
	// Parameters:
	//  - SessionId
	CloseProximityMatch(sessionId string) (err error)
	// Parameters:
	//  - Seq
	//  - MessageId
	//  - ReceiverMids
	CommitSendMessage(seq int32, messageId string, receiverMids []string) (r map[string]string, err error)
	// Parameters:
	//  - Seq
	//  - MessageIds
	//  - ReceiverMids
	CommitSendMessages(seq int32, messageIds []string, receiverMids []string) (r map[string]string, err error)
	// Parameters:
	//  - Seq
	//  - Attrs
	//  - ReceiverMids
	CommitUpdateProfile(seq int32, attrs []ProfileAttribute, receiverMids []string) (r map[string]string, err error)
	// Parameters:
	//  - Verifier
	//  - PinCode
	ConfirmEmail(verifier string, pinCode string) (err error)
	// Parameters:
	//  - Seq
	//  - Name
	//  - ContactIds
	CreateGroup(seq int32, name string, contactIds []string) (r *Group, err error)
	// Parameters:
	//  - Url
	//  - CharacterSet
	//  - ImageSize
	//  - X
	//  - Y
	//  - Width
	//  - Height
	CreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - ContactIds
	CreateRoom(reqSeq int32, contactIds []string) (r *Room, err error)
	CreateSession() (r string, err error)
	// Parameters:
	//  - LastFetchedIndex
	FetchAnnouncements(lastFetchedIndex int32) (r []*Announcement, err error)
	// Parameters:
	//  - LocalTs
	//  - Count
	FetchMessages(localTs int64, count int32) (r []*Message, err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	FetchOperations(localRev int64, count int32) (r []*Operation, err error)
	// Parameters:
	//  - LocalRev
	//  - Count
	//  - GlobalRev
	//  - IndividualRev
	FetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error)
	// Parameters:
	//  - ReqSeq
	//  - Emails
	FindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	FindAndAddContactsByMid(reqSeq int32, mid string) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Phones
	FindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - ReqSeq
	//  - Userid
	FindAndAddContactsByUserid(reqSeq int32, userid string) (r map[string]*Contact, err error)
	// Parameters:
	//  - Userid
	FindContactByUserid(userid string) (r *Contact, err error)
	// Parameters:
	//  - TicketId
	FindContactByUserTicket(ticketId string) (r *Contact, err error)
	// Parameters:
	//  - Emails
	FindContactsByEmail(emails map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - Phones
	FindContactsByPhone(phones map[string]bool) (r map[string]*Contact, err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	//  - UdidHash
	FindSnsIdUserStatus(snsIdType SnsIdType, snsAccessToken string, udidHash string) (r *SnsIdUserStatus, err error)
	// Parameters:
	//  - SessionId
	FinishUpdateVerification(sessionId string) (err error)
	// Parameters:
	//  - ExpirationTime
	//  - MaxUseCount
	GenerateUserTicket(expirationTime int64, maxUseCount int32) (r *Ticket, err error)
	// Parameters:
	//  - SessionId
	GetAcceptedProximityMatches(sessionId string) (r map[string]bool, err error)
	GetActiveBuddySubscriberIds() (r []string, err error)
	GetAllContactIds() (r []string, err error)
	// Parameters:
	//  - KeepLoggedIn
	//  - SystemName
	GetAuthQrcode(keepLoggedIn bool, systemName string) (r *AuthQrcode, err error)
	GetBlockedContactIds() (r []string, err error)
	// Parameters:
	//  - Start
	//  - Count
	GetBlockedContactIdsByRange(start int32, count int32) (r []string, err error)
	GetBlockedRecommendationIds() (r []string, err error)
	GetBuddyBlockerIds() (r []string, err error)
	// Parameters:
	//  - Mid
	//  - Index
	GetBuddyLocation(mid string, index int32) (r *Geolocation, err error)
	// Parameters:
	//  - Timestamp
	GetCompactContactsModifiedSince(timestamp int64) (r []*CompactContact, err error)
	// Parameters:
	//  - GroupId
	GetCompactGroup(groupId string) (r *Group, err error)
	// Parameters:
	//  - RoomId
	GetCompactRoom(roomId string) (r *Room, err error)
	// Parameters:
	//  - Id
	GetContact(id string) (r *Contact, err error)
	// Parameters:
	//  - Ids
	GetContacts(ids []string) (r []*Contact, err error)
	GetCountryWithRequestIp() (r string, err error)
	GetFavoriteMids() (r []string, err error)
	// Parameters:
	//  - GroupId
	GetGroup(groupId string) (r *Group, err error)
	GetGroupIdsInvited() (r []string, err error)
	GetGroupIdsJoined() (r []string, err error)
	// Parameters:
	//  - GroupIds
	GetGroups(groupIds []string) (r []*Group, err error)
	GetHiddenContactMids() (r []string, err error)
	GetIdentityIdentifier() (r string, err error)
	GetLastAnnouncementIndex() (r int32, err error)
	GetLastOpRevision() (r int64, err error)
	// Parameters:
	//  - ChannelId
	//  - MessageBoxId
	//  - LastMessagesCount
	GetMessageBox(channelId string, messageBoxId string, lastMessagesCount int32) (r *TMessageBox, err error)
	// Parameters:
	//  - Mid
	GetMessageBoxCompactWrapUp(mid string) (r *TMessageBoxWrapUp, err error)
	// Parameters:
	//  - Start
	//  - MessageBoxCount
	GetMessageBoxCompactWrapUpList(start int32, messageBoxCount int32) (r *TMessageBoxWrapUpResponse, err error)
	// Parameters:
	//  - ChannelId
	//  - LastMessagesCount
	GetMessageBoxList(channelId string, lastMessagesCount int32) (r []*TMessageBox, err error)
	// Parameters:
	//  - ChannelId
	//  - LastMessagesCount
	//  - Status
	GetMessageBoxListByStatus(channelId string, lastMessagesCount int32, status int32) (r []*TMessageBox, err error)
	// Parameters:
	//  - Mid
	GetMessageBoxWrapUp(mid string) (r *TMessageBoxWrapUp, err error)
	// Parameters:
	//  - Start
	//  - MessageBoxCount
	GetMessageBoxWrapUpList(start int32, messageBoxCount int32) (r *TMessageBoxWrapUpResponse, err error)
	// Parameters:
	//  - ChannelId
	//  - MessageBoxId
	//  - StartSeq
	//  - EndSeq
	GetMessagesBySequenceNumber(channelId string, messageBoxId string, startSeq int64, endSeq int64) (r []*Message, err error)
	// Parameters:
	//  - MessageBoxId
	//  - StartSeq
	//  - MessagesCount
	GetNextMessages(messageBoxId string, startSeq int64, messagesCount int32) (r []*Message, err error)
	// Parameters:
	//  - Carrier
	GetNotificationPolicy(carrier CarrierCode) (r []NotificationType, err error)
	// Parameters:
	//  - MessageBoxId
	//  - EndSeq
	//  - MessagesCount
	GetPreviousMessages(messageBoxId string, endSeq int64, messagesCount int32) (r []*Message, err error)
	GetProfile() (r *Profile, err error)
	// Parameters:
	//  - SessionId
	GetProximityMatchCandidateList(sessionId string) (r *ProximityMatchCandidateResult_, err error)
	// Parameters:
	//  - SessionId
	GetProximityMatchCandidates(sessionId string) (r map[*Contact]bool, err error)
	// Parameters:
	//  - MessageBoxId
	//  - MessagesCount
	GetRecentMessages(messageBoxId string, messagesCount int32) (r []*Message, err error)
	GetRecommendationIds() (r []string, err error)
	// Parameters:
	//  - RoomId
	GetRoom(roomId string) (r *Room, err error)
	// Parameters:
	//  - Provider
	GetRSAKeyInfo(provider IdentityProvider) (r *RSAKey, err error)
	GetServerTime() (r int64, err error)
	GetSessions() (r []*LoginSession, err error)
	GetSettings() (r *Settings, err error)
	// Parameters:
	//  - AttrBitset
	GetSettingsAttributes(attrBitset int32) (r *Settings, err error)
	GetSystemConfiguration() (r *SystemConfiguration, err error)
	GetUserTicket() (r *Ticket, err error)
	// Parameters:
	//  - InvitationHash
	GetWapInvitation(invitationHash string) (r *WapInvitation, err error)
	InvalidateUserTicket() (err error)
	// Parameters:
	//  - PhoneNumberList
	InviteFriendsBySms(phoneNumberList []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	InviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	//  - ContactIds
	InviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Email
	//  - Name
	InviteViaEmail(reqSeq int32, email string, name string) (err error)
	// Parameters:
	//  - Provider
	//  - Identifier
	IsIdentityIdentifierAvailable(provider IdentityProvider, identifier string) (r bool, err error)
	// Parameters:
	//  - Userid
	IsUseridAvailable(userid string) (r bool, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	//  - ContactIds
	KickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	LeaveGroup(reqSeq int32, groupId string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - RoomId
	LeaveRoom(reqSeq int32, roomId string) (err error)
	// Parameters:
	//  - IdentityProvider
	//  - Identifier
	//  - Password
	//  - KeepLoggedIn
	//  - AccessLocation
	//  - SystemName
	//  - Certificate
	LoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r string, err error)
	// Parameters:
	//  - IdentityProvider
	//  - Identifier
	//  - Password
	//  - KeepLoggedIn
	//  - AccessLocation
	//  - SystemName
	//  - Certificate
	LoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r *LoginResult_, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifier(verifier string) (r string, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifierForCerificate(verifier string) (r *LoginResult_, err error)
	// Parameters:
	//  - Verifier
	LoginWithVerifierForCertificate(verifier string) (r *LoginResult_, err error)
	Logout() (err error)
	// Parameters:
	//  - TokenKey
	LogoutSession(tokenKey string) (err error)
	Noop() (err error)
	// Parameters:
	//  - ParamMap
	NotifiedRedirect(paramMap map[string]string) (err error)
	// Parameters:
	//  - Seq
	//  - ReceiverMids
	NotifyBuddyOnAir(seq int32, receiverMids []string) (r map[string]string, err error)
	// Parameters:
	//  - NotificationStatus
	//  - ReceiverMids
	NotifyIndividualEvent(notificationStatus NotificationStatus, receiverMids []string) (err error)
	// Parameters:
	//  - UdidHash
	//  - ApplicationTypeWithExtensions
	NotifyInstalled(udidHash string, applicationTypeWithExtensions string) (err error)
	// Parameters:
	//  - UdidHash
	//  - ApplicationTypeWithExtensions
	NotifyRegistrationComplete(udidHash string, applicationTypeWithExtensions string) (err error)
	// Parameters:
	//  - LastRev
	//  - Badge
	NotifySleep(lastRev int64, badge int32) (err error)
	// Parameters:
	//  - LastRev
	//  - DeviceInfo
	NotifyUpdated(lastRev int64, deviceInfo *DeviceInfo) (err error)
	// Parameters:
	//  - Location
	OpenProximityMatch(location *Location) (r string, err error)
	// Parameters:
	//  - BuddyId
	//  - RegistrarPassword
	RegisterBuddyUser(buddyId string, registrarPassword string) (r string, err error)
	// Parameters:
	//  - Seq
	//  - Userid
	RegisterBuddyUserid(seq int32, userid string) (err error)
	// Parameters:
	//  - SessionId
	RegisterDevice(sessionId string) (r string, err error)
	// Parameters:
	//  - SessionId
	//  - Provider
	//  - Identifier
	//  - Verifier
	RegisterDeviceWithIdentityCredential(sessionId string, provider IdentityProvider, identifier string, verifier string) (r string, err error)
	// Parameters:
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	RegisterDeviceWithoutPhoneNumber(region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error)
	// Parameters:
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	//  - Provider
	//  - Identifier
	//  - Verifier
	//  - Mid
	RegisterDeviceWithoutPhoneNumberWithIdentityCredential(region string, udidHash string, deviceInfo *DeviceInfo, provider IdentityProvider, identifier string, verifier string, mid string) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - Userid
	RegisterUserid(reqSeq int32, userid string) (r bool, err error)
	// Parameters:
	//  - InvitationHash
	//  - GuidHash
	//  - Email
	//  - DeviceInfo
	RegisterWapDevice(invitationHash string, guidHash string, email string, deviceInfo *DeviceInfo) (r string, err error)
	// Parameters:
	//  - IdentityCredential
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	RegisterWithExistingSnsIdAndIdentityCredential(identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	//  - Mid
	RegisterWithSnsId(snsIdType SnsIdType, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string) (r *RegisterWithSnsIdResult_, err error)
	// Parameters:
	//  - SnsIdType
	//  - SnsAccessToken
	//  - IdentityCredential
	//  - Region
	//  - UdidHash
	//  - DeviceInfo
	RegisterWithSnsIdAndIdentityCredential(snsIdType SnsIdType, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error)
	ReissueDeviceCredential() (r string, err error)
	// Parameters:
	//  - ExpirationTime
	//  - MaxUseCount
	ReissueUserTicket(expirationTime int64, maxUseCount int32) (r string, err error)
	// Parameters:
	//  - ReqSeq
	//  - GroupId
	RejectGroupInvitation(reqSeq int32, groupId string) (err error)
	ReleaseSession() (err error)
	// Parameters:
	//  - Seq
	//  - LastMessageId
	RemoveAllMessages(seq int32, lastMessageId string) (err error)
	// Parameters:
	//  - Mid
	//  - Index
	RemoveBuddyLocation(mid string, index int32) (err error)
	// Parameters:
	//  - MessageId
	RemoveMessage(messageId string) (r bool, err error)
	// Parameters:
	//  - MessageId
	RemoveMessageFromMyHome(messageId string) (r bool, err error)
	// Parameters:
	//  - SnsIdType
	RemoveSnsId(snsIdType SnsIdType) (r string, err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Category
	//  - Report
	Report(syncOpRevision int64, category SyncCategory, report string) (err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Category
	//  - ContactReports
	//  - ActionType
	ReportContacts(syncOpRevision int64, category SyncCategory, contactReports []*ContactReport, actionType SyncActionType) (r []*ContactReportResult_, err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Groups
	ReportGroups(syncOpRevision int64, groups []*Group) (err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Profile
	ReportProfile(syncOpRevision int64, profile *Profile) (err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Rooms
	ReportRooms(syncOpRevision int64, rooms []*Room) (err error)
	// Parameters:
	//  - SyncOpRevision
	//  - Settings
	ReportSettings(syncOpRevision int64, settings *Settings) (err error)
	// Parameters:
	//  - SpammerMid
	//  - SpammerReasons
	//  - SpamMessageIds
	ReportSpammer(spammerMid string, spammerReasons []SpammerReason, spamMessageIds []string) (err error)
	// Parameters:
	//  - Provider
	//  - Identifier
	//  - Locale
	RequestAccountPasswordReset(provider IdentityProvider, identifier string, locale string) (err error)
	// Parameters:
	//  - EmailConfirmation
	RequestEmailConfirmation(emailConfirmation *EmailConfirmation) (r *EmailConfirmationSession, err error)
	// Parameters:
	//  - Provider
	//  - Identifier
	RequestIdentityUnbind(provider IdentityProvider, identifier string) (err error)
	// Parameters:
	//  - Verifier
	ResendEmailConfirmation(verifier string) (r *EmailConfirmationSession, err error)
	// Parameters:
	//  - SessionId
	ResendPinCode(sessionId string) (err error)
	// Parameters:
	//  - SessionId
	ResendPinCodeBySMS(sessionId string) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - LastMessageId
	SendChatChecked(seq int32, consumer string, lastMessageId string) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - LastMessageId
	SendChatRemoved(seq int32, consumer string, lastMessageId string) (err error)
	// Parameters:
	//  - Esq
	//  - MessageId
	//  - ReceiverMids
	SendContentPreviewUpdated(esq int32, messageId string, receiverMids []string) (r map[string]string, err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - MessageId
	SendContentReceipt(seq int32, consumer string, messageId string) (err error)
	SendDummyPush() (err error)
	// Parameters:
	//  - Seq
	//  - Message
	SendEvent(seq int32, message *Message) (r *Message, err error)
	// Parameters:
	//  - Seq
	//  - Message
	SendMessage(seq int32, message *Message) (r *Message, err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - MessageIds
	SendMessageIgnored(seq int32, consumer string, messageIds []string) (err error)
	// Parameters:
	//  - Seq
	//  - Consumer
	//  - MessageIds
	SendMessageReceipt(seq int32, consumer string, messageIds []string) (err error)
	// Parameters:
	//  - Seq
	//  - Message
	SendMessageToMyHome(seq int32, message *Message) (r *Message, err error)
	// Parameters:
	//  - Mid
	//  - Index
	//  - Location
	SetBuddyLocation(mid string, index int32, location *Geolocation) (err error)
	// Parameters:
	//  - Provider
	//  - Identifier
	//  - Verifier
	SetIdentityCredential(provider IdentityProvider, identifier string, verifier string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - TypeA1
	//  - Target
	//  - Enablement
	SetNotificationsEnabled(reqSeq int32, type_a1 MIDType, target string, enablement bool) (err error)
	// Parameters:
	//  - Region
	//  - Carrier
	//  - Phone
	//  - UdidHash
	//  - DeviceInfo
	//  - NetworkCode
	//  - Locale
	StartUpdateVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string) (r *VerificationSessionData, err error)
	// Parameters:
	//  - Region
	//  - Carrier
	//  - Phone
	//  - UdidHash
	//  - DeviceInfo
	//  - NetworkCode
	//  - Mid
	//  - Locale
	StartVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string) (r *VerificationSessionData, err error)
	// Parameters:
	//  - Seq
	//  - ProfileAttribute
	//  - Value
	StoreUpdateProfileAttribute(seq int32, profileAttribute ProfileAttribute, value string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Modifications
	SyncContactBySnsIds(reqSeq int32, modifications []*SnsFriendModification) (r []*SnsFriendContactRegistration, err error)
	// Parameters:
	//  - ReqSeq
	//  - LocalContacts
	SyncContacts(reqSeq int32, localContacts []*ContactModification) (r map[string]*ContactRegistration, err error)
	// Parameters:
	//  - Seq
	//  - Message
	TrySendMessage(seq int32, message *Message) (r *Message, err error)
	// Parameters:
	//  - ReqSeq
	//  - Id
	UnblockContact(reqSeq int32, id string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Id
	UnblockRecommendation(reqSeq int32, id string) (err error)
	UnregisterUserAndDevice() (r string, err error)
	// Parameters:
	//  - ApnsDeviceToken
	UpdateApnsDeviceToken(apnsDeviceToken []byte) (err error)
	// Parameters:
	//  - Key
	//  - Value
	UpdateBuddySetting(key string, value string) (err error)
	// Parameters:
	//  - RegistrationId
	UpdateC2DMRegistrationId(registrationId string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Mid
	//  - Flag
	//  - Value
	UpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error)
	// Parameters:
	//  - CustomMode
	//  - ParamMap
	UpdateCustomModeSettings(customMode CustomMode, paramMap map[string]string) (err error)
	// Parameters:
	//  - DeviceUid
	//  - DeviceInfo
	UpdateDeviceInfo(deviceUid string, deviceInfo *DeviceInfo) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Group
	UpdateGroup(reqSeq int32, group *Group) (err error)
	// Parameters:
	//  - TypeA1
	//  - Token
	UpdateNotificationToken(type_a1 NotificationType, token string) (err error)
	// Parameters:
	//  - TypeA1
	//  - Token
	UpdateNotificationTokenWithBytes(type_a1 NotificationType, token []byte) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Profile
	UpdateProfile(reqSeq int32, profile *Profile) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - Value
	UpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error)
	// Parameters:
	//  - Region
	UpdateRegion(region string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Settings
	UpdateSettings(reqSeq int32, settings *Settings) (err error)
	// Parameters:
	//  - ReqSeq
	//  - Settings
	UpdateSettings2(reqSeq int32, settings *Settings) (r int32, err error)
	// Parameters:
	//  - ReqSeq
	//  - Attr
	//  - Value
	UpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error)
	// Parameters:
	//  - ReqSeq
	//  - AttrBitset
	//  - Settings
	UpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (r int32, err error)
	// Parameters:
	//  - IdentityProvider
	//  - Identifier
	//  - Password
	VerifyIdentityCredential(identityProvider IdentityProvider, identifier string, password string) (err error)
	// Parameters:
	//  - IdentityCredential
	VerifyIdentityCredentialWithResult_(identityCredential *IdentityCredential) (r *UserAuthStatus, err error)
	// Parameters:
	//  - SessionId
	//  - PinCode
	//  - UdidHash
	VerifyPhone(sessionId string, pinCode string, udidHash string) (r VerificationResult_, err error)
	// Parameters:
	//  - Verifier
	//  - PinCode
	VerifyQrcode(verifier string, pinCode string) (r string, err error)
}

type TalkServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
	return &TalkServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
	return &TalkServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) AcceptGroupInvitation(reqSeq int32, groupId string) (err error) {
	if err = p.sendAcceptGroupInvitation(reqSeq, groupId); err != nil {
		return
	}
	return p.recvAcceptGroupInvitation()
}

func (p *TalkServiceClient) sendAcceptGroupInvitation(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AcceptGroupInvitationArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcceptGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acceptGroupInvitation failed: out of sequence response")
		return
	}
	result := AcceptGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
//  - Ids
func (p *TalkServiceClient) AcceptProximityMatches(sessionId string, ids map[string]bool) (err error) {
	if err = p.sendAcceptProximityMatches(sessionId, ids); err != nil {
		return
	}
	return p.recvAcceptProximityMatches()
}

func (p *TalkServiceClient) sendAcceptProximityMatches(sessionId string, ids map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acceptProximityMatches", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AcceptProximityMatchesArgs{
		SessionId: sessionId,
		Ids:       ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcceptProximityMatches() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error197 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error198 error
		error198, err = error197.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error198
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acceptProximityMatches failed: out of sequence response")
		return
	}
	result := AcceptProximityMatchesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - To
func (p *TalkServiceClient) AcquireCallRoute(to string) (r []string, err error) {
	if err = p.sendAcquireCallRoute(to); err != nil {
		return
	}
	return p.recvAcquireCallRoute()
}

func (p *TalkServiceClient) sendAcquireCallRoute(to string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireCallRoute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AcquireCallRouteArgs{
		To: to,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireCallRoute() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error199 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error200 error
		error200, err = error199.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error200
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireCallRoute failed: out of sequence response")
		return
	}
	result := AcquireCallRouteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - To
func (p *TalkServiceClient) AcquireCallTicket(to string) (r string, err error) {
	if err = p.sendAcquireCallTicket(to); err != nil {
		return
	}
	return p.recvAcquireCallTicket()
}

func (p *TalkServiceClient) sendAcquireCallTicket(to string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireCallTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AcquireCallTicketArgs{
		To: to,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireCallTicket() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error201 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error202 error
		error202, err = error201.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error202
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireCallTicket failed: out of sequence response")
		return
	}
	result := AcquireCallTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(featureType FeatureType) (r string, err error) {
	if err = p.sendAcquireEncryptedAccessToken(featureType); err != nil {
		return
	}
	return p.recvAcquireEncryptedAccessToken()
}

func (p *TalkServiceClient) sendAcquireEncryptedAccessToken(featureType FeatureType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AcquireEncryptedAccessTokenArgs{
		FeatureType: featureType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAcquireEncryptedAccessToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "acquireEncryptedAccessToken failed: out of sequence response")
		return
	}
	result := AcquireEncryptedAccessTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
func (p *TalkServiceClient) AddSnsId(snsIdType SnsIdType, snsAccessToken string) (r string, err error) {
	if err = p.sendAddSnsId(snsIdType, snsAccessToken); err != nil {
		return
	}
	return p.recvAddSnsId()
}

func (p *TalkServiceClient) sendAddSnsId(snsIdType SnsIdType, snsAccessToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addSnsId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddSnsIdArgs{
		SnsIdType:      snsIdType,
		SnsAccessToken: snsAccessToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvAddSnsId() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error205 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error206 error
		error206, err = error205.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error206
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSnsId failed: out of sequence response")
		return
	}
	result := AddSnsIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Id
func (p *TalkServiceClient) BlockContact(reqSeq int32, id string) (err error) {
	if err = p.sendBlockContact(reqSeq, id); err != nil {
		return
	}
	return p.recvBlockContact()
}

func (p *TalkServiceClient) sendBlockContact(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("blockContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockContactArgs{
		ReqSeq: reqSeq,
		Id:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvBlockContact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "blockContact failed: out of sequence response")
		return
	}
	result := BlockContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Id
func (p *TalkServiceClient) BlockRecommendation(reqSeq int32, id string) (err error) {
	if err = p.sendBlockRecommendation(reqSeq, id); err != nil {
		return
	}
	return p.recvBlockRecommendation()
}

func (p *TalkServiceClient) sendBlockRecommendation(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("blockRecommendation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockRecommendationArgs{
		ReqSeq: reqSeq,
		Id:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvBlockRecommendation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error209 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error210 error
		error210, err = error209.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error210
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "blockRecommendation failed: out of sequence response")
		return
	}
	result := BlockRecommendationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) CancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendCancelGroupInvitation(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvCancelGroupInvitation()
}

func (p *TalkServiceClient) sendCancelGroupInvitation(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CancelGroupInvitationArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCancelGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error211 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error212 error
		error212, err = error211.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error212
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelGroupInvitation failed: out of sequence response")
		return
	}
	result := CancelGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
//  - Method
func (p *TalkServiceClient) ChangeVerificationMethod(sessionId string, method VerificationMethod) (r *VerificationSessionData, err error) {
	if err = p.sendChangeVerificationMethod(sessionId, method); err != nil {
		return
	}
	return p.recvChangeVerificationMethod()
}

func (p *TalkServiceClient) sendChangeVerificationMethod(sessionId string, method VerificationMethod) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeVerificationMethod", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeVerificationMethodArgs{
		SessionId: sessionId,
		Method:    method,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvChangeVerificationMethod() (value *VerificationSessionData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error213 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error214 error
		error214, err = error213.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error214
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeVerificationMethod failed: out of sequence response")
		return
	}
	result := ChangeVerificationMethodResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) ClearIdentityCredential() (err error) {
	if err = p.sendClearIdentityCredential(); err != nil {
		return
	}
	return p.recvClearIdentityCredential()
}

func (p *TalkServiceClient) sendClearIdentityCredential() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ClearIdentityCredentialArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvClearIdentityCredential() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearIdentityCredential failed: out of sequence response")
		return
	}
	result := ClearIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ChannelId
//  - MessageBoxId
func (p *TalkServiceClient) ClearMessageBox(channelId string, messageBoxId string) (err error) {
	if err = p.sendClearMessageBox(channelId, messageBoxId); err != nil {
		return
	}
	return p.recvClearMessageBox()
}

func (p *TalkServiceClient) sendClearMessageBox(channelId string, messageBoxId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearMessageBox", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ClearMessageBoxArgs{
		ChannelId:    channelId,
		MessageBoxId: messageBoxId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvClearMessageBox() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearMessageBox failed: out of sequence response")
		return
	}
	result := ClearMessageBoxResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) CloseProximityMatch(sessionId string) (err error) {
	if err = p.sendCloseProximityMatch(sessionId); err != nil {
		return
	}
	return p.recvCloseProximityMatch()
}

func (p *TalkServiceClient) sendCloseProximityMatch(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("closeProximityMatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CloseProximityMatchArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCloseProximityMatch() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error219 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error220 error
		error220, err = error219.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error220
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeProximityMatch failed: out of sequence response")
		return
	}
	result := CloseProximityMatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - MessageId
//  - ReceiverMids
func (p *TalkServiceClient) CommitSendMessage(seq int32, messageId string, receiverMids []string) (r map[string]string, err error) {
	if err = p.sendCommitSendMessage(seq, messageId, receiverMids); err != nil {
		return
	}
	return p.recvCommitSendMessage()
}

func (p *TalkServiceClient) sendCommitSendMessage(seq int32, messageId string, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("commitSendMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CommitSendMessageArgs{
		Seq:          seq,
		MessageId:    messageId,
		ReceiverMids: receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCommitSendMessage() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error221 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error222 error
		error222, err = error221.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error222
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "commitSendMessage failed: out of sequence response")
		return
	}
	result := CommitSendMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - MessageIds
//  - ReceiverMids
func (p *TalkServiceClient) CommitSendMessages(seq int32, messageIds []string, receiverMids []string) (r map[string]string, err error) {
	if err = p.sendCommitSendMessages(seq, messageIds, receiverMids); err != nil {
		return
	}
	return p.recvCommitSendMessages()
}

func (p *TalkServiceClient) sendCommitSendMessages(seq int32, messageIds []string, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("commitSendMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CommitSendMessagesArgs{
		Seq:          seq,
		MessageIds:   messageIds,
		ReceiverMids: receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCommitSendMessages() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error223 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error224 error
		error224, err = error223.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error224
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "commitSendMessages failed: out of sequence response")
		return
	}
	result := CommitSendMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Attrs
//  - ReceiverMids
func (p *TalkServiceClient) CommitUpdateProfile(seq int32, attrs []ProfileAttribute, receiverMids []string) (r map[string]string, err error) {
	if err = p.sendCommitUpdateProfile(seq, attrs, receiverMids); err != nil {
		return
	}
	return p.recvCommitUpdateProfile()
}

func (p *TalkServiceClient) sendCommitUpdateProfile(seq int32, attrs []ProfileAttribute, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("commitUpdateProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CommitUpdateProfileArgs{
		Seq:          seq,
		Attrs:        attrs,
		ReceiverMids: receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCommitUpdateProfile() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error225 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error226 error
		error226, err = error225.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error226
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "commitUpdateProfile failed: out of sequence response")
		return
	}
	result := CommitUpdateProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) ConfirmEmail(verifier string, pinCode string) (err error) {
	if err = p.sendConfirmEmail(verifier, pinCode); err != nil {
		return
	}
	return p.recvConfirmEmail()
}

func (p *TalkServiceClient) sendConfirmEmail(verifier string, pinCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("confirmEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ConfirmEmailArgs{
		Verifier: verifier,
		PinCode:  pinCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvConfirmEmail() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "confirmEmail failed: out of sequence response")
		return
	}
	result := ConfirmEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Name
//  - ContactIds
func (p *TalkServiceClient) CreateGroup(seq int32, name string, contactIds []string) (r *Group, err error) {
	if err = p.sendCreateGroup(seq, name, contactIds); err != nil {
		return
	}
	return p.recvCreateGroup()
}

func (p *TalkServiceClient) sendCreateGroup(seq int32, name string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateGroupArgs{
		Seq:        seq,
		Name:       name,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error229 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error230 error
		error230, err = error229.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error230
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createGroup failed: out of sequence response")
		return
	}
	result := CreateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Url
//  - CharacterSet
//  - ImageSize
//  - X
//  - Y
//  - Width
//  - Height
func (p *TalkServiceClient) CreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (r string, err error) {
	if err = p.sendCreateQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height); err != nil {
		return
	}
	return p.recvCreateQrcodeBase64Image()
}

func (p *TalkServiceClient) sendCreateQrcodeBase64Image(url string, characterSet string, imageSize int32, x int32, y int32, width int32, height int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateQrcodeBase64ImageArgs{
		Url:          url,
		CharacterSet: characterSet,
		ImageSize:    imageSize,
		X:            x,
		Y:            y,
		Width:        width,
		Height:       height,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateQrcodeBase64Image() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error231 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error232 error
		error232, err = error231.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error232
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createQrcodeBase64Image failed: out of sequence response")
		return
	}
	result := CreateQrcodeBase64ImageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *TalkServiceClient) CreateRoom(reqSeq int32, contactIds []string) (r *Room, err error) {
	if err = p.sendCreateRoom(reqSeq, contactIds); err != nil {
		return
	}
	return p.recvCreateRoom()
}

func (p *TalkServiceClient) sendCreateRoom(reqSeq int32, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateRoomArgs{
		ReqSeq:     reqSeq,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateRoom() (value *Room, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error233 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error234 error
		error234, err = error233.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error234
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRoom failed: out of sequence response")
		return
	}
	result := CreateRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) CreateSession() (r string, err error) {
	if err = p.sendCreateSession(); err != nil {
		return
	}
	return p.recvCreateSession()
}

func (p *TalkServiceClient) sendCreateSession() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateSessionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvCreateSession() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error235 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error236 error
		error236, err = error235.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error236
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createSession failed: out of sequence response")
		return
	}
	result := CreateSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LastFetchedIndex
func (p *TalkServiceClient) FetchAnnouncements(lastFetchedIndex int32) (r []*Announcement, err error) {
	if err = p.sendFetchAnnouncements(lastFetchedIndex); err != nil {
		return
	}
	return p.recvFetchAnnouncements()
}

func (p *TalkServiceClient) sendFetchAnnouncements(lastFetchedIndex int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchAnnouncements", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchAnnouncementsArgs{
		LastFetchedIndex: lastFetchedIndex,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchAnnouncements() (value []*Announcement, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error237 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error238 error
		error238, err = error237.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error238
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchAnnouncements failed: out of sequence response")
		return
	}
	result := FetchAnnouncementsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LocalTs
//  - Count
func (p *TalkServiceClient) FetchMessages(localTs int64, count int32) (r []*Message, err error) {
	if err = p.sendFetchMessages(localTs, count); err != nil {
		return
	}
	return p.recvFetchMessages()
}

func (p *TalkServiceClient) sendFetchMessages(localTs int64, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchMessagesArgs{
		LocalTs: localTs,
		Count:   count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchMessages() (value []*Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error239 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error240 error
		error240, err = error239.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error240
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchMessages failed: out of sequence response")
		return
	}
	result := FetchMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(localRev int64, count int32) (r []*Operation, err error) {
	if err = p.sendFetchOperations(localRev, count); err != nil {
		return
	}
	return p.recvFetchOperations()
}

func (p *TalkServiceClient) sendFetchOperations(localRev int64, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchOperations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchOperationsArgs{
		LocalRev: localRev,
		Count:    count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchOperations() (value []*Operation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error241 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error242 error
		error242, err = error241.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error242
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchOperations failed: out of sequence response")
		return
	}
	result := FetchOperationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error) {
	if err = p.sendFetchOps(localRev, count, globalRev, individualRev); err != nil {
		return
	}
	return p.recvFetchOps()
}

func (p *TalkServiceClient) sendFetchOps(localRev int64, count int32, globalRev int64, individualRev int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchOps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchOpsArgs{
		LocalRev:      localRev,
		Count:         count,
		GlobalRev:     globalRev,
		IndividualRev: individualRev,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFetchOps() (value []*Operation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error243 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error244 error
		error244, err = error243.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error244
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchOps failed: out of sequence response")
		return
	}
	result := FetchOpsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Emails
func (p *TalkServiceClient) FindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByEmail(reqSeq, emails); err != nil {
		return
	}
	return p.recvFindAndAddContactsByEmail()
}

func (p *TalkServiceClient) sendFindAndAddContactsByEmail(reqSeq int32, emails map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAndAddContactsByEmailArgs{
		ReqSeq: reqSeq,
		Emails: emails,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByEmail() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error245 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error246 error
		error246, err = error245.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error246
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByEmail failed: out of sequence response")
		return
	}
	result := FindAndAddContactsByEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Mid
func (p *TalkServiceClient) FindAndAddContactsByMid(reqSeq int32, mid string) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByMid(reqSeq, mid); err != nil {
		return
	}
	return p.recvFindAndAddContactsByMid()
}

func (p *TalkServiceClient) sendFindAndAddContactsByMid(reqSeq int32, mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAndAddContactsByMidArgs{
		ReqSeq: reqSeq,
		Mid:    mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByMid() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByMid failed: out of sequence response")
		return
	}
	result := FindAndAddContactsByMidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Phones
func (p *TalkServiceClient) FindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByPhone(reqSeq, phones); err != nil {
		return
	}
	return p.recvFindAndAddContactsByPhone()
}

func (p *TalkServiceClient) sendFindAndAddContactsByPhone(reqSeq int32, phones map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAndAddContactsByPhoneArgs{
		ReqSeq: reqSeq,
		Phones: phones,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByPhone() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error249 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error250 error
		error250, err = error249.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error250
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByPhone failed: out of sequence response")
		return
	}
	result := FindAndAddContactsByPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Userid
func (p *TalkServiceClient) FindAndAddContactsByUserid(reqSeq int32, userid string) (r map[string]*Contact, err error) {
	if err = p.sendFindAndAddContactsByUserid(reqSeq, userid); err != nil {
		return
	}
	return p.recvFindAndAddContactsByUserid()
}

func (p *TalkServiceClient) sendFindAndAddContactsByUserid(reqSeq int32, userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindAndAddContactsByUseridArgs{
		ReqSeq: reqSeq,
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindAndAddContactsByUserid() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error251 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error252 error
		error252, err = error251.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error252
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findAndAddContactsByUserid failed: out of sequence response")
		return
	}
	result := FindAndAddContactsByUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Userid
func (p *TalkServiceClient) FindContactByUserid(userid string) (r *Contact, err error) {
	if err = p.sendFindContactByUserid(userid); err != nil {
		return
	}
	return p.recvFindContactByUserid()
}

func (p *TalkServiceClient) sendFindContactByUserid(userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactByUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindContactByUseridArgs{
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactByUserid() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error253 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error254 error
		error254, err = error253.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error254
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactByUserid failed: out of sequence response")
		return
	}
	result := FindContactByUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TicketId
func (p *TalkServiceClient) FindContactByUserTicket(ticketId string) (r *Contact, err error) {
	if err = p.sendFindContactByUserTicket(ticketId); err != nil {
		return
	}
	return p.recvFindContactByUserTicket()
}

func (p *TalkServiceClient) sendFindContactByUserTicket(ticketId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactByUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindContactByUserTicketArgs{
		TicketId: ticketId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactByUserTicket() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error255 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error256 error
		error256, err = error255.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error256
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactByUserTicket failed: out of sequence response")
		return
	}
	result := FindContactByUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Emails
func (p *TalkServiceClient) FindContactsByEmail(emails map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindContactsByEmail(emails); err != nil {
		return
	}
	return p.recvFindContactsByEmail()
}

func (p *TalkServiceClient) sendFindContactsByEmail(emails map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactsByEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindContactsByEmailArgs{
		Emails: emails,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactsByEmail() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error257 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error258 error
		error258, err = error257.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error258
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactsByEmail failed: out of sequence response")
		return
	}
	result := FindContactsByEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(phones map[string]bool) (r map[string]*Contact, err error) {
	if err = p.sendFindContactsByPhone(phones); err != nil {
		return
	}
	return p.recvFindContactsByPhone()
}

func (p *TalkServiceClient) sendFindContactsByPhone(phones map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findContactsByPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindContactsByPhoneArgs{
		Phones: phones,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindContactsByPhone() (value map[string]*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error259 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error260 error
		error260, err = error259.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error260
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findContactsByPhone failed: out of sequence response")
		return
	}
	result := FindContactsByPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - UdidHash
func (p *TalkServiceClient) FindSnsIdUserStatus(snsIdType SnsIdType, snsAccessToken string, udidHash string) (r *SnsIdUserStatus, err error) {
	if err = p.sendFindSnsIdUserStatus(snsIdType, snsAccessToken, udidHash); err != nil {
		return
	}
	return p.recvFindSnsIdUserStatus()
}

func (p *TalkServiceClient) sendFindSnsIdUserStatus(snsIdType SnsIdType, snsAccessToken string, udidHash string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FindSnsIdUserStatusArgs{
		SnsIdType:      snsIdType,
		SnsAccessToken: snsAccessToken,
		UdidHash:       udidHash,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFindSnsIdUserStatus() (value *SnsIdUserStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error261 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error262 error
		error262, err = error261.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error262
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findSnsIdUserStatus failed: out of sequence response")
		return
	}
	result := FindSnsIdUserStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) FinishUpdateVerification(sessionId string) (err error) {
	if err = p.sendFinishUpdateVerification(sessionId); err != nil {
		return
	}
	return p.recvFinishUpdateVerification()
}

func (p *TalkServiceClient) sendFinishUpdateVerification(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("finishUpdateVerification", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FinishUpdateVerificationArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvFinishUpdateVerification() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error263 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error264 error
		error264, err = error263.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error264
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "finishUpdateVerification failed: out of sequence response")
		return
	}
	result := FinishUpdateVerificationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(expirationTime int64, maxUseCount int32) (r *Ticket, err error) {
	if err = p.sendGenerateUserTicket(expirationTime, maxUseCount); err != nil {
		return
	}
	return p.recvGenerateUserTicket()
}

func (p *TalkServiceClient) sendGenerateUserTicket(expirationTime int64, maxUseCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("generateUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GenerateUserTicketArgs{
		ExpirationTime: expirationTime,
		MaxUseCount:    maxUseCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGenerateUserTicket() (value *Ticket, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error265 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error266 error
		error266, err = error265.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error266
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "generateUserTicket failed: out of sequence response")
		return
	}
	result := GenerateUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(sessionId string) (r map[string]bool, err error) {
	if err = p.sendGetAcceptedProximityMatches(sessionId); err != nil {
		return
	}
	return p.recvGetAcceptedProximityMatches()
}

func (p *TalkServiceClient) sendGetAcceptedProximityMatches(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAcceptedProximityMatchesArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAcceptedProximityMatches() (value map[string]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error267 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error268 error
		error268, err = error267.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error268
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAcceptedProximityMatches failed: out of sequence response")
		return
	}
	result := GetAcceptedProximityMatchesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetActiveBuddySubscriberIds() (r []string, err error) {
	if err = p.sendGetActiveBuddySubscriberIds(); err != nil {
		return
	}
	return p.recvGetActiveBuddySubscriberIds()
}

func (p *TalkServiceClient) sendGetActiveBuddySubscriberIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActiveBuddySubscriberIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetActiveBuddySubscriberIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetActiveBuddySubscriberIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error269 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error270 error
		error270, err = error269.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error270
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActiveBuddySubscriberIds failed: out of sequence response")
		return
	}
	result := GetActiveBuddySubscriberIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetAllContactIds() (r []string, err error) {
	if err = p.sendGetAllContactIds(); err != nil {
		return
	}
	return p.recvGetAllContactIds()
}

func (p *TalkServiceClient) sendGetAllContactIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAllContactIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllContactIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAllContactIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error271 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error272 error
		error272, err = error271.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error272
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllContactIds failed: out of sequence response")
		return
	}
	result := GetAllContactIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - KeepLoggedIn
//  - SystemName
func (p *TalkServiceClient) GetAuthQrcode(keepLoggedIn bool, systemName string) (r *AuthQrcode, err error) {
	if err = p.sendGetAuthQrcode(keepLoggedIn, systemName); err != nil {
		return
	}
	return p.recvGetAuthQrcode()
}

func (p *TalkServiceClient) sendGetAuthQrcode(keepLoggedIn bool, systemName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAuthQrcode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAuthQrcodeArgs{
		KeepLoggedIn: keepLoggedIn,
		SystemName:   systemName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetAuthQrcode() (value *AuthQrcode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error273 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error274 error
		error274, err = error273.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error274
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAuthQrcode failed: out of sequence response")
		return
	}
	result := GetAuthQrcodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetBlockedContactIds() (r []string, err error) {
	if err = p.sendGetBlockedContactIds(); err != nil {
		return
	}
	return p.recvGetBlockedContactIds()
}

func (p *TalkServiceClient) sendGetBlockedContactIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedContactIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBlockedContactIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedContactIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error275 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error276 error
		error276, err = error275.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error276
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedContactIds failed: out of sequence response")
		return
	}
	result := GetBlockedContactIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Count
func (p *TalkServiceClient) GetBlockedContactIdsByRange(start int32, count int32) (r []string, err error) {
	if err = p.sendGetBlockedContactIdsByRange(start, count); err != nil {
		return
	}
	return p.recvGetBlockedContactIdsByRange()
}

func (p *TalkServiceClient) sendGetBlockedContactIdsByRange(start int32, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBlockedContactIdsByRangeArgs{
		Start: start,
		Count: count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedContactIdsByRange() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error277 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error278 error
		error278, err = error277.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error278
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedContactIdsByRange failed: out of sequence response")
		return
	}
	result := GetBlockedContactIdsByRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetBlockedRecommendationIds() (r []string, err error) {
	if err = p.sendGetBlockedRecommendationIds(); err != nil {
		return
	}
	return p.recvGetBlockedRecommendationIds()
}

func (p *TalkServiceClient) sendGetBlockedRecommendationIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBlockedRecommendationIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBlockedRecommendationIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error279 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error280 error
		error280, err = error279.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error280
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockedRecommendationIds failed: out of sequence response")
		return
	}
	result := GetBlockedRecommendationIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetBuddyBlockerIds() (r []string, err error) {
	if err = p.sendGetBuddyBlockerIds(); err != nil {
		return
	}
	return p.recvGetBuddyBlockerIds()
}

func (p *TalkServiceClient) sendGetBuddyBlockerIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBuddyBlockerIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBuddyBlockerIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBuddyBlockerIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error281 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error282 error
		error282, err = error281.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error282
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBuddyBlockerIds failed: out of sequence response")
		return
	}
	result := GetBuddyBlockerIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mid
//  - Index
func (p *TalkServiceClient) GetBuddyLocation(mid string, index int32) (r *Geolocation, err error) {
	if err = p.sendGetBuddyLocation(mid, index); err != nil {
		return
	}
	return p.recvGetBuddyLocation()
}

func (p *TalkServiceClient) sendGetBuddyLocation(mid string, index int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBuddyLocation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBuddyLocationArgs{
		Mid:   mid,
		Index: index,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetBuddyLocation() (value *Geolocation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error283 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error284 error
		error284, err = error283.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error284
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBuddyLocation failed: out of sequence response")
		return
	}
	result := GetBuddyLocationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Timestamp
func (p *TalkServiceClient) GetCompactContactsModifiedSince(timestamp int64) (r []*CompactContact, err error) {
	if err = p.sendGetCompactContactsModifiedSince(timestamp); err != nil {
		return
	}
	return p.recvGetCompactContactsModifiedSince()
}

func (p *TalkServiceClient) sendGetCompactContactsModifiedSince(timestamp int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCompactContactsModifiedSince", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCompactContactsModifiedSinceArgs{
		Timestamp: timestamp,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCompactContactsModifiedSince() (value []*CompactContact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error285 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error286 error
		error286, err = error285.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error286
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCompactContactsModifiedSince failed: out of sequence response")
		return
	}
	result := GetCompactContactsModifiedSinceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetCompactGroup(groupId string) (r *Group, err error) {
	if err = p.sendGetCompactGroup(groupId); err != nil {
		return
	}
	return p.recvGetCompactGroup()
}

func (p *TalkServiceClient) sendGetCompactGroup(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCompactGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCompactGroupArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCompactGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error287 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error288 error
		error288, err = error287.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error288
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCompactGroup failed: out of sequence response")
		return
	}
	result := GetCompactGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoomId
func (p *TalkServiceClient) GetCompactRoom(roomId string) (r *Room, err error) {
	if err = p.sendGetCompactRoom(roomId); err != nil {
		return
	}
	return p.recvGetCompactRoom()
}

func (p *TalkServiceClient) sendGetCompactRoom(roomId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCompactRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCompactRoomArgs{
		RoomId: roomId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCompactRoom() (value *Room, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error289 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error290 error
		error290, err = error289.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error290
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCompactRoom failed: out of sequence response")
		return
	}
	result := GetCompactRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Id
func (p *TalkServiceClient) GetContact(id string) (r *Contact, err error) {
	if err = p.sendGetContact(id); err != nil {
		return
	}
	return p.recvGetContact()
}

func (p *TalkServiceClient) sendGetContact(id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetContactArgs{
		Id: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetContact() (value *Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error291 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error292 error
		error292, err = error291.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error292
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getContact failed: out of sequence response")
		return
	}
	result := GetContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ids []string) (r []*Contact, err error) {
	if err = p.sendGetContacts(ids); err != nil {
		return
	}
	return p.recvGetContacts()
}

func (p *TalkServiceClient) sendGetContacts(ids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getContacts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetContactsArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetContacts() (value []*Contact, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error293 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error294 error
		error294, err = error293.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error294
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getContacts failed: out of sequence response")
		return
	}
	result := GetContactsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetCountryWithRequestIp() (r string, err error) {
	if err = p.sendGetCountryWithRequestIp(); err != nil {
		return
	}
	return p.recvGetCountryWithRequestIp()
}

func (p *TalkServiceClient) sendGetCountryWithRequestIp() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCountryWithRequestIpArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetCountryWithRequestIp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error295 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error296 error
		error296, err = error295.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error296
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCountryWithRequestIp failed: out of sequence response")
		return
	}
	result := GetCountryWithRequestIpResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetFavoriteMids() (r []string, err error) {
	if err = p.sendGetFavoriteMids(); err != nil {
		return
	}
	return p.recvGetFavoriteMids()
}

func (p *TalkServiceClient) sendGetFavoriteMids() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFavoriteMids", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetFavoriteMidsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetFavoriteMids() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error297 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error298 error
		error298, err = error297.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error298
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFavoriteMids failed: out of sequence response")
		return
	}
	result := GetFavoriteMidsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
func (p *TalkServiceClient) GetGroup(groupId string) (r *Group, err error) {
	if err = p.sendGetGroup(groupId); err != nil {
		return
	}
	return p.recvGetGroup()
}

func (p *TalkServiceClient) sendGetGroup(groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetGroupArgs{
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroup() (value *Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error299 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error300 error
		error300, err = error299.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error300
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response")
		return
	}
	result := GetGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetGroupIdsInvited() (r []string, err error) {
	if err = p.sendGetGroupIdsInvited(); err != nil {
		return
	}
	return p.recvGetGroupIdsInvited()
}

func (p *TalkServiceClient) sendGetGroupIdsInvited() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetGroupIdsInvitedArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroupIdsInvited() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error301 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error302 error
		error302, err = error301.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error302
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupIdsInvited failed: out of sequence response")
		return
	}
	result := GetGroupIdsInvitedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetGroupIdsJoined() (r []string, err error) {
	if err = p.sendGetGroupIdsJoined(); err != nil {
		return
	}
	return p.recvGetGroupIdsJoined()
}

func (p *TalkServiceClient) sendGetGroupIdsJoined() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetGroupIdsJoinedArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroupIdsJoined() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error303 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error304 error
		error304, err = error303.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error304
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroupIdsJoined failed: out of sequence response")
		return
	}
	result := GetGroupIdsJoinedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupIds
func (p *TalkServiceClient) GetGroups(groupIds []string) (r []*Group, err error) {
	if err = p.sendGetGroups(groupIds); err != nil {
		return
	}
	return p.recvGetGroups()
}

func (p *TalkServiceClient) sendGetGroups(groupIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetGroupsArgs{
		GroupIds: groupIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetGroups() (value []*Group, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error305 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error306 error
		error306, err = error305.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error306
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroups failed: out of sequence response")
		return
	}
	result := GetGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetHiddenContactMids() (r []string, err error) {
	if err = p.sendGetHiddenContactMids(); err != nil {
		return
	}
	return p.recvGetHiddenContactMids()
}

func (p *TalkServiceClient) sendGetHiddenContactMids() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getHiddenContactMids", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetHiddenContactMidsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetHiddenContactMids() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error307 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error308 error
		error308, err = error307.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error308
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getHiddenContactMids failed: out of sequence response")
		return
	}
	result := GetHiddenContactMidsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetIdentityIdentifier() (r string, err error) {
	if err = p.sendGetIdentityIdentifier(); err != nil {
		return
	}
	return p.recvGetIdentityIdentifier()
}

func (p *TalkServiceClient) sendGetIdentityIdentifier() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getIdentityIdentifier", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIdentityIdentifierArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetIdentityIdentifier() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error309 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error310 error
		error310, err = error309.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error310
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getIdentityIdentifier failed: out of sequence response")
		return
	}
	result := GetIdentityIdentifierResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetLastAnnouncementIndex() (r int32, err error) {
	if err = p.sendGetLastAnnouncementIndex(); err != nil {
		return
	}
	return p.recvGetLastAnnouncementIndex()
}

func (p *TalkServiceClient) sendGetLastAnnouncementIndex() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLastAnnouncementIndex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetLastAnnouncementIndexArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetLastAnnouncementIndex() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error311 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error312 error
		error312, err = error311.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error312
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLastAnnouncementIndex failed: out of sequence response")
		return
	}
	result := GetLastAnnouncementIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetLastOpRevision() (r int64, err error) {
	if err = p.sendGetLastOpRevision(); err != nil {
		return
	}
	return p.recvGetLastOpRevision()
}

func (p *TalkServiceClient) sendGetLastOpRevision() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLastOpRevision", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetLastOpRevisionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetLastOpRevision() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error313 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error314 error
		error314, err = error313.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error314
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLastOpRevision failed: out of sequence response")
		return
	}
	result := GetLastOpRevisionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - MessageBoxId
//  - LastMessagesCount
func (p *TalkServiceClient) GetMessageBox(channelId string, messageBoxId string, lastMessagesCount int32) (r *TMessageBox, err error) {
	if err = p.sendGetMessageBox(channelId, messageBoxId, lastMessagesCount); err != nil {
		return
	}
	return p.recvGetMessageBox()
}

func (p *TalkServiceClient) sendGetMessageBox(channelId string, messageBoxId string, lastMessagesCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBox", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxArgs{
		ChannelId:         channelId,
		MessageBoxId:      messageBoxId,
		LastMessagesCount: lastMessagesCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBox() (value *TMessageBox, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error315 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error316 error
		error316, err = error315.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error316
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBox failed: out of sequence response")
		return
	}
	result := GetMessageBoxResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mid
func (p *TalkServiceClient) GetMessageBoxCompactWrapUp(mid string) (r *TMessageBoxWrapUp, err error) {
	if err = p.sendGetMessageBoxCompactWrapUp(mid); err != nil {
		return
	}
	return p.recvGetMessageBoxCompactWrapUp()
}

func (p *TalkServiceClient) sendGetMessageBoxCompactWrapUp(mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxCompactWrapUp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxCompactWrapUpArgs{
		Mid: mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxCompactWrapUp() (value *TMessageBoxWrapUp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error317 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error318 error
		error318, err = error317.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error318
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxCompactWrapUp failed: out of sequence response")
		return
	}
	result := GetMessageBoxCompactWrapUpResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - MessageBoxCount
func (p *TalkServiceClient) GetMessageBoxCompactWrapUpList(start int32, messageBoxCount int32) (r *TMessageBoxWrapUpResponse, err error) {
	if err = p.sendGetMessageBoxCompactWrapUpList(start, messageBoxCount); err != nil {
		return
	}
	return p.recvGetMessageBoxCompactWrapUpList()
}

func (p *TalkServiceClient) sendGetMessageBoxCompactWrapUpList(start int32, messageBoxCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxCompactWrapUpList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxCompactWrapUpListArgs{
		Start:           start,
		MessageBoxCount: messageBoxCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxCompactWrapUpList() (value *TMessageBoxWrapUpResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error319 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error320 error
		error320, err = error319.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error320
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxCompactWrapUpList failed: out of sequence response")
		return
	}
	result := GetMessageBoxCompactWrapUpListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - LastMessagesCount
func (p *TalkServiceClient) GetMessageBoxList(channelId string, lastMessagesCount int32) (r []*TMessageBox, err error) {
	if err = p.sendGetMessageBoxList(channelId, lastMessagesCount); err != nil {
		return
	}
	return p.recvGetMessageBoxList()
}

func (p *TalkServiceClient) sendGetMessageBoxList(channelId string, lastMessagesCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxListArgs{
		ChannelId:         channelId,
		LastMessagesCount: lastMessagesCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxList() (value []*TMessageBox, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error321 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error322 error
		error322, err = error321.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error322
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxList failed: out of sequence response")
		return
	}
	result := GetMessageBoxListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - LastMessagesCount
//  - Status
func (p *TalkServiceClient) GetMessageBoxListByStatus(channelId string, lastMessagesCount int32, status int32) (r []*TMessageBox, err error) {
	if err = p.sendGetMessageBoxListByStatus(channelId, lastMessagesCount, status); err != nil {
		return
	}
	return p.recvGetMessageBoxListByStatus()
}

func (p *TalkServiceClient) sendGetMessageBoxListByStatus(channelId string, lastMessagesCount int32, status int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxListByStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxListByStatusArgs{
		ChannelId:         channelId,
		LastMessagesCount: lastMessagesCount,
		Status:            status,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxListByStatus() (value []*TMessageBox, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error323 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error324 error
		error324, err = error323.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error324
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxListByStatus failed: out of sequence response")
		return
	}
	result := GetMessageBoxListByStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mid
func (p *TalkServiceClient) GetMessageBoxWrapUp(mid string) (r *TMessageBoxWrapUp, err error) {
	if err = p.sendGetMessageBoxWrapUp(mid); err != nil {
		return
	}
	return p.recvGetMessageBoxWrapUp()
}

func (p *TalkServiceClient) sendGetMessageBoxWrapUp(mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxWrapUp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxWrapUpArgs{
		Mid: mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxWrapUp() (value *TMessageBoxWrapUp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error325 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error326 error
		error326, err = error325.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error326
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxWrapUp failed: out of sequence response")
		return
	}
	result := GetMessageBoxWrapUpResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - MessageBoxCount
func (p *TalkServiceClient) GetMessageBoxWrapUpList(start int32, messageBoxCount int32) (r *TMessageBoxWrapUpResponse, err error) {
	if err = p.sendGetMessageBoxWrapUpList(start, messageBoxCount); err != nil {
		return
	}
	return p.recvGetMessageBoxWrapUpList()
}

func (p *TalkServiceClient) sendGetMessageBoxWrapUpList(start int32, messageBoxCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessageBoxWrapUpList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageBoxWrapUpListArgs{
		Start:           start,
		MessageBoxCount: messageBoxCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessageBoxWrapUpList() (value *TMessageBoxWrapUpResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error327 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error328 error
		error328, err = error327.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error328
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessageBoxWrapUpList failed: out of sequence response")
		return
	}
	result := GetMessageBoxWrapUpListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChannelId
//  - MessageBoxId
//  - StartSeq
//  - EndSeq
func (p *TalkServiceClient) GetMessagesBySequenceNumber(channelId string, messageBoxId string, startSeq int64, endSeq int64) (r []*Message, err error) {
	if err = p.sendGetMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq); err != nil {
		return
	}
	return p.recvGetMessagesBySequenceNumber()
}

func (p *TalkServiceClient) sendGetMessagesBySequenceNumber(channelId string, messageBoxId string, startSeq int64, endSeq int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessagesBySequenceNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessagesBySequenceNumberArgs{
		ChannelId:    channelId,
		MessageBoxId: messageBoxId,
		StartSeq:     startSeq,
		EndSeq:       endSeq,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetMessagesBySequenceNumber() (value []*Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error329 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error330 error
		error330, err = error329.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error330
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessagesBySequenceNumber failed: out of sequence response")
		return
	}
	result := GetMessagesBySequenceNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MessageBoxId
//  - StartSeq
//  - MessagesCount
func (p *TalkServiceClient) GetNextMessages(messageBoxId string, startSeq int64, messagesCount int32) (r []*Message, err error) {
	if err = p.sendGetNextMessages(messageBoxId, startSeq, messagesCount); err != nil {
		return
	}
	return p.recvGetNextMessages()
}

func (p *TalkServiceClient) sendGetNextMessages(messageBoxId string, startSeq int64, messagesCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNextMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetNextMessagesArgs{
		MessageBoxId:  messageBoxId,
		StartSeq:      startSeq,
		MessagesCount: messagesCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetNextMessages() (value []*Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error331 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error332 error
		error332, err = error331.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error332
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNextMessages failed: out of sequence response")
		return
	}
	result := GetNextMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Carrier
func (p *TalkServiceClient) GetNotificationPolicy(carrier CarrierCode) (r []NotificationType, err error) {
	if err = p.sendGetNotificationPolicy(carrier); err != nil {
		return
	}
	return p.recvGetNotificationPolicy()
}

func (p *TalkServiceClient) sendGetNotificationPolicy(carrier CarrierCode) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNotificationPolicy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetNotificationPolicyArgs{
		Carrier: carrier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetNotificationPolicy() (value []NotificationType, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error333 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error334 error
		error334, err = error333.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error334
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNotificationPolicy failed: out of sequence response")
		return
	}
	result := GetNotificationPolicyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MessageBoxId
//  - EndSeq
//  - MessagesCount
func (p *TalkServiceClient) GetPreviousMessages(messageBoxId string, endSeq int64, messagesCount int32) (r []*Message, err error) {
	if err = p.sendGetPreviousMessages(messageBoxId, endSeq, messagesCount); err != nil {
		return
	}
	return p.recvGetPreviousMessages()
}

func (p *TalkServiceClient) sendGetPreviousMessages(messageBoxId string, endSeq int64, messagesCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPreviousMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPreviousMessagesArgs{
		MessageBoxId:  messageBoxId,
		EndSeq:        endSeq,
		MessagesCount: messagesCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetPreviousMessages() (value []*Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error335 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error336 error
		error336, err = error335.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error336
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPreviousMessages failed: out of sequence response")
		return
	}
	result := GetPreviousMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetProfile() (r *Profile, err error) {
	if err = p.sendGetProfile(); err != nil {
		return
	}
	return p.recvGetProfile()
}

func (p *TalkServiceClient) sendGetProfile() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProfileArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetProfile() (value *Profile, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error337 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error338 error
		error338, err = error337.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error338
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProfile failed: out of sequence response")
		return
	}
	result := GetProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetProximityMatchCandidateList(sessionId string) (r *ProximityMatchCandidateResult_, err error) {
	if err = p.sendGetProximityMatchCandidateList(sessionId); err != nil {
		return
	}
	return p.recvGetProximityMatchCandidateList()
}

func (p *TalkServiceClient) sendGetProximityMatchCandidateList(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProximityMatchCandidateListArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetProximityMatchCandidateList() (value *ProximityMatchCandidateResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error339 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error340 error
		error340, err = error339.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error340
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProximityMatchCandidateList failed: out of sequence response")
		return
	}
	result := GetProximityMatchCandidateListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetProximityMatchCandidates(sessionId string) (r map[*Contact]bool, err error) {
	if err = p.sendGetProximityMatchCandidates(sessionId); err != nil {
		return
	}
	return p.recvGetProximityMatchCandidates()
}

func (p *TalkServiceClient) sendGetProximityMatchCandidates(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProximityMatchCandidates", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProximityMatchCandidatesArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetProximityMatchCandidates() (value map[*Contact]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error341 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error342 error
		error342, err = error341.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error342
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProximityMatchCandidates failed: out of sequence response")
		return
	}
	result := GetProximityMatchCandidatesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MessageBoxId
//  - MessagesCount
func (p *TalkServiceClient) GetRecentMessages(messageBoxId string, messagesCount int32) (r []*Message, err error) {
	if err = p.sendGetRecentMessages(messageBoxId, messagesCount); err != nil {
		return
	}
	return p.recvGetRecentMessages()
}

func (p *TalkServiceClient) sendGetRecentMessages(messageBoxId string, messagesCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRecentMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRecentMessagesArgs{
		MessageBoxId:  messageBoxId,
		MessagesCount: messagesCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRecentMessages() (value []*Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error343 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error344 error
		error344, err = error343.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error344
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRecentMessages failed: out of sequence response")
		return
	}
	result := GetRecentMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetRecommendationIds() (r []string, err error) {
	if err = p.sendGetRecommendationIds(); err != nil {
		return
	}
	return p.recvGetRecommendationIds()
}

func (p *TalkServiceClient) sendGetRecommendationIds() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRecommendationIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRecommendationIdsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRecommendationIds() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error345 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error346 error
		error346, err = error345.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error346
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRecommendationIds failed: out of sequence response")
		return
	}
	result := GetRecommendationIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoomId
func (p *TalkServiceClient) GetRoom(roomId string) (r *Room, err error) {
	if err = p.sendGetRoom(roomId); err != nil {
		return
	}
	return p.recvGetRoom()
}

func (p *TalkServiceClient) sendGetRoom(roomId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRoomArgs{
		RoomId: roomId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRoom() (value *Room, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error347 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error348 error
		error348, err = error347.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error348
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRoom failed: out of sequence response")
		return
	}
	result := GetRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(provider IdentityProvider) (r *RSAKey, err error) {
	if err = p.sendGetRSAKeyInfo(provider); err != nil {
		return
	}
	return p.recvGetRSAKeyInfo()
}

func (p *TalkServiceClient) sendGetRSAKeyInfo(provider IdentityProvider) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRSAKeyInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRSAKeyInfoArgs{
		Provider: provider,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetRSAKeyInfo() (value *RSAKey, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error349 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error350 error
		error350, err = error349.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error350
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRSAKeyInfo failed: out of sequence response")
		return
	}
	result := GetRSAKeyInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetServerTime() (r int64, err error) {
	if err = p.sendGetServerTime(); err != nil {
		return
	}
	return p.recvGetServerTime()
}

func (p *TalkServiceClient) sendGetServerTime() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getServerTime", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetServerTimeArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetServerTime() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error351 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error352 error
		error352, err = error351.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error352
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getServerTime failed: out of sequence response")
		return
	}
	result := GetServerTimeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetSessions() (r []*LoginSession, err error) {
	if err = p.sendGetSessions(); err != nil {
		return
	}
	return p.recvGetSessions()
}

func (p *TalkServiceClient) sendGetSessions() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSessions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSessionsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSessions() (value []*LoginSession, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error353 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error354 error
		error354, err = error353.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error354
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSessions failed: out of sequence response")
		return
	}
	result := GetSessionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetSettings() (r *Settings, err error) {
	if err = p.sendGetSettings(); err != nil {
		return
	}
	return p.recvGetSettings()
}

func (p *TalkServiceClient) sendGetSettings() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSettingsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSettings() (value *Settings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error355 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error356 error
		error356, err = error355.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error356
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSettings failed: out of sequence response")
		return
	}
	result := GetSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AttrBitset
func (p *TalkServiceClient) GetSettingsAttributes(attrBitset int32) (r *Settings, err error) {
	if err = p.sendGetSettingsAttributes(attrBitset); err != nil {
		return
	}
	return p.recvGetSettingsAttributes()
}

func (p *TalkServiceClient) sendGetSettingsAttributes(attrBitset int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSettingsAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSettingsAttributesArgs{
		AttrBitset: attrBitset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSettingsAttributes() (value *Settings, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error357 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error358 error
		error358, err = error357.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error358
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSettingsAttributes failed: out of sequence response")
		return
	}
	result := GetSettingsAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetSystemConfiguration() (r *SystemConfiguration, err error) {
	if err = p.sendGetSystemConfiguration(); err != nil {
		return
	}
	return p.recvGetSystemConfiguration()
}

func (p *TalkServiceClient) sendGetSystemConfiguration() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSystemConfiguration", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSystemConfigurationArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetSystemConfiguration() (value *SystemConfiguration, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error359 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error360 error
		error360, err = error359.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error360
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSystemConfiguration failed: out of sequence response")
		return
	}
	result := GetSystemConfigurationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) GetUserTicket() (r *Ticket, err error) {
	if err = p.sendGetUserTicket(); err != nil {
		return
	}
	return p.recvGetUserTicket()
}

func (p *TalkServiceClient) sendGetUserTicket() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetUserTicketArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetUserTicket() (value *Ticket, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error361 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error362 error
		error362, err = error361.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error362
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserTicket failed: out of sequence response")
		return
	}
	result := GetUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - InvitationHash
func (p *TalkServiceClient) GetWapInvitation(invitationHash string) (r *WapInvitation, err error) {
	if err = p.sendGetWapInvitation(invitationHash); err != nil {
		return
	}
	return p.recvGetWapInvitation()
}

func (p *TalkServiceClient) sendGetWapInvitation(invitationHash string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getWapInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetWapInvitationArgs{
		InvitationHash: invitationHash,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvGetWapInvitation() (value *WapInvitation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error363 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error364 error
		error364, err = error363.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error364
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWapInvitation failed: out of sequence response")
		return
	}
	result := GetWapInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) InvalidateUserTicket() (err error) {
	if err = p.sendInvalidateUserTicket(); err != nil {
		return
	}
	return p.recvInvalidateUserTicket()
}

func (p *TalkServiceClient) sendInvalidateUserTicket() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("invalidateUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InvalidateUserTicketArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInvalidateUserTicket() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error365 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error366 error
		error366, err = error365.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error366
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "invalidateUserTicket failed: out of sequence response")
		return
	}
	result := InvalidateUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - PhoneNumberList
func (p *TalkServiceClient) InviteFriendsBySms(phoneNumberList []string) (err error) {
	if err = p.sendInviteFriendsBySms(phoneNumberList); err != nil {
		return
	}
	return p.recvInviteFriendsBySms()
}

func (p *TalkServiceClient) sendInviteFriendsBySms(phoneNumberList []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteFriendsBySms", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InviteFriendsBySmsArgs{
		PhoneNumberList: phoneNumberList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteFriendsBySms() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error367 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error368 error
		error368, err = error367.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error368
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteFriendsBySms failed: out of sequence response")
		return
	}
	result := InviteFriendsBySmsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendInviteIntoGroup(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvInviteIntoGroup()
}

func (p *TalkServiceClient) sendInviteIntoGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteIntoGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InviteIntoGroupArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteIntoGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error369 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error370 error
		error370, err = error369.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error370
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteIntoGroup failed: out of sequence response")
		return
	}
	result := InviteIntoGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error) {
	if err = p.sendInviteIntoRoom(reqSeq, roomId, contactIds); err != nil {
		return
	}
	return p.recvInviteIntoRoom()
}

func (p *TalkServiceClient) sendInviteIntoRoom(reqSeq int32, roomId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteIntoRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InviteIntoRoomArgs{
		ReqSeq:     reqSeq,
		RoomId:     roomId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteIntoRoom() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error371 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error372 error
		error372, err = error371.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error372
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteIntoRoom failed: out of sequence response")
		return
	}
	result := InviteIntoRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Email
//  - Name
func (p *TalkServiceClient) InviteViaEmail(reqSeq int32, email string, name string) (err error) {
	if err = p.sendInviteViaEmail(reqSeq, email, name); err != nil {
		return
	}
	return p.recvInviteViaEmail()
}

func (p *TalkServiceClient) sendInviteViaEmail(reqSeq int32, email string, name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("inviteViaEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := InviteViaEmailArgs{
		ReqSeq: reqSeq,
		Email:  email,
		Name:   name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvInviteViaEmail() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error373 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error374 error
		error374, err = error373.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error374
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "inviteViaEmail failed: out of sequence response")
		return
	}
	result := InviteViaEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Provider
//  - Identifier
func (p *TalkServiceClient) IsIdentityIdentifierAvailable(provider IdentityProvider, identifier string) (r bool, err error) {
	if err = p.sendIsIdentityIdentifierAvailable(provider, identifier); err != nil {
		return
	}
	return p.recvIsIdentityIdentifierAvailable()
}

func (p *TalkServiceClient) sendIsIdentityIdentifierAvailable(provider IdentityProvider, identifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isIdentityIdentifierAvailable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsIdentityIdentifierAvailableArgs{
		Provider:   provider,
		Identifier: identifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvIsIdentityIdentifierAvailable() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error375 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error376 error
		error376, err = error375.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error376
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isIdentityIdentifierAvailable failed: out of sequence response")
		return
	}
	result := IsIdentityIdentifierAvailableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Userid
func (p *TalkServiceClient) IsUseridAvailable(userid string) (r bool, err error) {
	if err = p.sendIsUseridAvailable(userid); err != nil {
		return
	}
	return p.recvIsUseridAvailable()
}

func (p *TalkServiceClient) sendIsUseridAvailable(userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isUseridAvailable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IsUseridAvailableArgs{
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvIsUseridAvailable() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error377 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error378 error
		error378, err = error377.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error378
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isUseridAvailable failed: out of sequence response")
		return
	}
	result := IsUseridAvailableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *TalkServiceClient) KickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	if err = p.sendKickoutFromGroup(reqSeq, groupId, contactIds); err != nil {
		return
	}
	return p.recvKickoutFromGroup()
}

func (p *TalkServiceClient) sendKickoutFromGroup(reqSeq int32, groupId string, contactIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("kickoutFromGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KickoutFromGroupArgs{
		ReqSeq:     reqSeq,
		GroupId:    groupId,
		ContactIds: contactIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvKickoutFromGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error379 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error380 error
		error380, err = error379.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error380
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "kickoutFromGroup failed: out of sequence response")
		return
	}
	result := KickoutFromGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) LeaveGroup(reqSeq int32, groupId string) (err error) {
	if err = p.sendLeaveGroup(reqSeq, groupId); err != nil {
		return
	}
	return p.recvLeaveGroup()
}

func (p *TalkServiceClient) sendLeaveGroup(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("leaveGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LeaveGroupArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLeaveGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error381 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error382 error
		error382, err = error381.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error382
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "leaveGroup failed: out of sequence response")
		return
	}
	result := LeaveGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(reqSeq int32, roomId string) (err error) {
	if err = p.sendLeaveRoom(reqSeq, roomId); err != nil {
		return
	}
	return p.recvLeaveRoom()
}

func (p *TalkServiceClient) sendLeaveRoom(reqSeq int32, roomId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("leaveRoom", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LeaveRoomArgs{
		ReqSeq: reqSeq,
		RoomId: roomId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLeaveRoom() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error383 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error384 error
		error384, err = error383.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error384
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "leaveRoom failed: out of sequence response")
		return
	}
	result := LeaveRoomResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
func (p *TalkServiceClient) LoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r string, err error) {
	if err = p.sendLoginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate); err != nil {
		return
	}
	return p.recvLoginWithIdentityCredential()
}

func (p *TalkServiceClient) sendLoginWithIdentityCredential(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LoginWithIdentityCredentialArgs{
		IdentityProvider: identityProvider,
		Identifier:       identifier,
		Password:         password,
		KeepLoggedIn:     keepLoggedIn,
		AccessLocation:   accessLocation,
		SystemName:       systemName,
		Certificate:      certificate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error385 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error386 error
		error386, err = error385.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error386
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithIdentityCredential failed: out of sequence response")
		return
	}
	result := LoginWithIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
func (p *TalkServiceClient) LoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate); err != nil {
		return
	}
	return p.recvLoginWithIdentityCredentialForCertificate()
}

func (p *TalkServiceClient) sendLoginWithIdentityCredentialForCertificate(identityProvider IdentityProvider, identifier string, password string, keepLoggedIn bool, accessLocation string, systemName string, certificate string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LoginWithIdentityCredentialForCertificateArgs{
		IdentityProvider: identityProvider,
		Identifier:       identifier,
		Password:         password,
		KeepLoggedIn:     keepLoggedIn,
		AccessLocation:   accessLocation,
		SystemName:       systemName,
		Certificate:      certificate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithIdentityCredentialForCertificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error387 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error388 error
		error388, err = error387.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error388
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithIdentityCredentialForCertificate failed: out of sequence response")
		return
	}
	result := LoginWithIdentityCredentialForCertificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifier(verifier string) (r string, err error) {
	if err = p.sendLoginWithVerifier(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifier()
}

func (p *TalkServiceClient) sendLoginWithVerifier(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifier", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LoginWithVerifierArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifier() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error389 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error390 error
		error390, err = error389.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error390
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifier failed: out of sequence response")
		return
	}
	result := LoginWithVerifierResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifierForCerificate(verifier string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithVerifierForCerificate(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifierForCerificate()
}

func (p *TalkServiceClient) sendLoginWithVerifierForCerificate(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LoginWithVerifierForCerificateArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifierForCerificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error391 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error392 error
		error392, err = error391.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error392
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifierForCerificate failed: out of sequence response")
		return
	}
	result := LoginWithVerifierForCerificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) LoginWithVerifierForCertificate(verifier string) (r *LoginResult_, err error) {
	if err = p.sendLoginWithVerifierForCertificate(verifier); err != nil {
		return
	}
	return p.recvLoginWithVerifierForCertificate()
}

func (p *TalkServiceClient) sendLoginWithVerifierForCertificate(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LoginWithVerifierForCertificateArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLoginWithVerifierForCertificate() (value *LoginResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error393 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error394 error
		error394, err = error393.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error394
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loginWithVerifierForCertificate failed: out of sequence response")
		return
	}
	result := LoginWithVerifierForCertificateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) Logout() (err error) {
	if err = p.sendLogout(); err != nil {
		return
	}
	return p.recvLogout()
}

func (p *TalkServiceClient) sendLogout() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logout", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LogoutArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLogout() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error395 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error396 error
		error396, err = error395.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error396
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logout failed: out of sequence response")
		return
	}
	result := LogoutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - TokenKey
func (p *TalkServiceClient) LogoutSession(tokenKey string) (err error) {
	if err = p.sendLogoutSession(tokenKey); err != nil {
		return
	}
	return p.recvLogoutSession()
}

func (p *TalkServiceClient) sendLogoutSession(tokenKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("logoutSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LogoutSessionArgs{
		TokenKey: tokenKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvLogoutSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error397 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error398 error
		error398, err = error397.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error398
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logoutSession failed: out of sequence response")
		return
	}
	result := LogoutSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) Noop() (err error) {
	if err = p.sendNoop(); err != nil {
		return
	}
	return p.recvNoop()
}

func (p *TalkServiceClient) sendNoop() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("noop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoopArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNoop() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error399 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error400 error
		error400, err = error399.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error400
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "noop failed: out of sequence response")
		return
	}
	result := NoopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ParamMap
func (p *TalkServiceClient) NotifiedRedirect(paramMap map[string]string) (err error) {
	if err = p.sendNotifiedRedirect(paramMap); err != nil {
		return
	}
	return p.recvNotifiedRedirect()
}

func (p *TalkServiceClient) sendNotifiedRedirect(paramMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifiedRedirect", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifiedRedirectArgs{
		ParamMap: paramMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifiedRedirect() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error401 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error402 error
		error402, err = error401.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error402
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifiedRedirect failed: out of sequence response")
		return
	}
	result := NotifiedRedirectResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - ReceiverMids
func (p *TalkServiceClient) NotifyBuddyOnAir(seq int32, receiverMids []string) (r map[string]string, err error) {
	if err = p.sendNotifyBuddyOnAir(seq, receiverMids); err != nil {
		return
	}
	return p.recvNotifyBuddyOnAir()
}

func (p *TalkServiceClient) sendNotifyBuddyOnAir(seq int32, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyBuddyOnAir", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyBuddyOnAirArgs{
		Seq:          seq,
		ReceiverMids: receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifyBuddyOnAir() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error403 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error404 error
		error404, err = error403.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error404
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyBuddyOnAir failed: out of sequence response")
		return
	}
	result := NotifyBuddyOnAirResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NotificationStatus
//  - ReceiverMids
func (p *TalkServiceClient) NotifyIndividualEvent(notificationStatus NotificationStatus, receiverMids []string) (err error) {
	if err = p.sendNotifyIndividualEvent(notificationStatus, receiverMids); err != nil {
		return
	}
	return p.recvNotifyIndividualEvent()
}

func (p *TalkServiceClient) sendNotifyIndividualEvent(notificationStatus NotificationStatus, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyIndividualEvent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyIndividualEventArgs{
		NotificationStatus: notificationStatus,
		ReceiverMids:       receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifyIndividualEvent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error405 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error406 error
		error406, err = error405.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error406
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyIndividualEvent failed: out of sequence response")
		return
	}
	result := NotifyIndividualEventResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyInstalled(udidHash string, applicationTypeWithExtensions string) (err error) {
	if err = p.sendNotifyInstalled(udidHash, applicationTypeWithExtensions); err != nil {
		return
	}
	return p.recvNotifyInstalled()
}

func (p *TalkServiceClient) sendNotifyInstalled(udidHash string, applicationTypeWithExtensions string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyInstalled", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyInstalledArgs{
		UdidHash:                      udidHash,
		ApplicationTypeWithExtensions: applicationTypeWithExtensions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifyInstalled() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error407 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error408 error
		error408, err = error407.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error408
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyInstalled failed: out of sequence response")
		return
	}
	result := NotifyInstalledResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyRegistrationComplete(udidHash string, applicationTypeWithExtensions string) (err error) {
	if err = p.sendNotifyRegistrationComplete(udidHash, applicationTypeWithExtensions); err != nil {
		return
	}
	return p.recvNotifyRegistrationComplete()
}

func (p *TalkServiceClient) sendNotifyRegistrationComplete(udidHash string, applicationTypeWithExtensions string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyRegistrationCompleteArgs{
		UdidHash:                      udidHash,
		ApplicationTypeWithExtensions: applicationTypeWithExtensions,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifyRegistrationComplete() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error409 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error410 error
		error410, err = error409.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error410
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyRegistrationComplete failed: out of sequence response")
		return
	}
	result := NotifyRegistrationCompleteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - LastRev
//  - Badge
func (p *TalkServiceClient) NotifySleep(lastRev int64, badge int32) (err error) {
	if err = p.sendNotifySleep(lastRev, badge); err != nil {
		return
	}
	return p.recvNotifySleep()
}

func (p *TalkServiceClient) sendNotifySleep(lastRev int64, badge int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifySleep", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifySleepArgs{
		LastRev: lastRev,
		Badge:   badge,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifySleep() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error411 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error412 error
		error412, err = error411.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error412
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifySleep failed: out of sequence response")
		return
	}
	result := NotifySleepResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - LastRev
//  - DeviceInfo
func (p *TalkServiceClient) NotifyUpdated(lastRev int64, deviceInfo *DeviceInfo) (err error) {
	if err = p.sendNotifyUpdated(lastRev, deviceInfo); err != nil {
		return
	}
	return p.recvNotifyUpdated()
}

func (p *TalkServiceClient) sendNotifyUpdated(lastRev int64, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyUpdated", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyUpdatedArgs{
		LastRev:    lastRev,
		DeviceInfo: deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvNotifyUpdated() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error413 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error414 error
		error414, err = error413.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error414
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyUpdated failed: out of sequence response")
		return
	}
	result := NotifyUpdatedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Location
func (p *TalkServiceClient) OpenProximityMatch(location *Location) (r string, err error) {
	if err = p.sendOpenProximityMatch(location); err != nil {
		return
	}
	return p.recvOpenProximityMatch()
}

func (p *TalkServiceClient) sendOpenProximityMatch(location *Location) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("openProximityMatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := OpenProximityMatchArgs{
		Location: location,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvOpenProximityMatch() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error415 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error416 error
		error416, err = error415.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error416
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "openProximityMatch failed: out of sequence response")
		return
	}
	result := OpenProximityMatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BuddyId
//  - RegistrarPassword
func (p *TalkServiceClient) RegisterBuddyUser(buddyId string, registrarPassword string) (r string, err error) {
	if err = p.sendRegisterBuddyUser(buddyId, registrarPassword); err != nil {
		return
	}
	return p.recvRegisterBuddyUser()
}

func (p *TalkServiceClient) sendRegisterBuddyUser(buddyId string, registrarPassword string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerBuddyUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterBuddyUserArgs{
		BuddyId:           buddyId,
		RegistrarPassword: registrarPassword,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterBuddyUser() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error417 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error418 error
		error418, err = error417.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error418
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerBuddyUser failed: out of sequence response")
		return
	}
	result := RegisterBuddyUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Userid
func (p *TalkServiceClient) RegisterBuddyUserid(seq int32, userid string) (err error) {
	if err = p.sendRegisterBuddyUserid(seq, userid); err != nil {
		return
	}
	return p.recvRegisterBuddyUserid()
}

func (p *TalkServiceClient) sendRegisterBuddyUserid(seq int32, userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerBuddyUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterBuddyUseridArgs{
		Seq:    seq,
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterBuddyUserid() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error419 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error420 error
		error420, err = error419.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error420
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerBuddyUserid failed: out of sequence response")
		return
	}
	result := RegisterBuddyUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) RegisterDevice(sessionId string) (r string, err error) {
	if err = p.sendRegisterDevice(sessionId); err != nil {
		return
	}
	return p.recvRegisterDevice()
}

func (p *TalkServiceClient) sendRegisterDevice(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerDevice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterDeviceArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterDevice() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error421 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error422 error
		error422, err = error421.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error422
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerDevice failed: out of sequence response")
		return
	}
	result := RegisterDeviceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
//  - Provider
//  - Identifier
//  - Verifier
func (p *TalkServiceClient) RegisterDeviceWithIdentityCredential(sessionId string, provider IdentityProvider, identifier string, verifier string) (r string, err error) {
	if err = p.sendRegisterDeviceWithIdentityCredential(sessionId, provider, identifier, verifier); err != nil {
		return
	}
	return p.recvRegisterDeviceWithIdentityCredential()
}

func (p *TalkServiceClient) sendRegisterDeviceWithIdentityCredential(sessionId string, provider IdentityProvider, identifier string, verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterDeviceWithIdentityCredentialArgs{
		SessionId:  sessionId,
		Provider:   provider,
		Identifier: identifier,
		Verifier:   verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterDeviceWithIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error423 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error424 error
		error424, err = error423.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error424
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerDeviceWithIdentityCredential failed: out of sequence response")
		return
	}
	result := RegisterDeviceWithIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Region
//  - UdidHash
//  - DeviceInfo
func (p *TalkServiceClient) RegisterDeviceWithoutPhoneNumber(region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error) {
	if err = p.sendRegisterDeviceWithoutPhoneNumber(region, udidHash, deviceInfo); err != nil {
		return
	}
	return p.recvRegisterDeviceWithoutPhoneNumber()
}

func (p *TalkServiceClient) sendRegisterDeviceWithoutPhoneNumber(region string, udidHash string, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterDeviceWithoutPhoneNumberArgs{
		Region:     region,
		UdidHash:   udidHash,
		DeviceInfo: deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterDeviceWithoutPhoneNumber() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error425 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error426 error
		error426, err = error425.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error426
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerDeviceWithoutPhoneNumber failed: out of sequence response")
		return
	}
	result := RegisterDeviceWithoutPhoneNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Provider
//  - Identifier
//  - Verifier
//  - Mid
func (p *TalkServiceClient) RegisterDeviceWithoutPhoneNumberWithIdentityCredential(region string, udidHash string, deviceInfo *DeviceInfo, provider IdentityProvider, identifier string, verifier string, mid string) (r string, err error) {
	if err = p.sendRegisterDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid); err != nil {
		return
	}
	return p.recvRegisterDeviceWithoutPhoneNumberWithIdentityCredential()
}

func (p *TalkServiceClient) sendRegisterDeviceWithoutPhoneNumberWithIdentityCredential(region string, udidHash string, deviceInfo *DeviceInfo, provider IdentityProvider, identifier string, verifier string, mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs{
		Region:     region,
		UdidHash:   udidHash,
		DeviceInfo: deviceInfo,
		Provider:   provider,
		Identifier: identifier,
		Verifier:   verifier,
		Mid:        mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterDeviceWithoutPhoneNumberWithIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error427 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error428 error
		error428, err = error427.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error428
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: out of sequence response")
		return
	}
	result := RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Userid
func (p *TalkServiceClient) RegisterUserid(reqSeq int32, userid string) (r bool, err error) {
	if err = p.sendRegisterUserid(reqSeq, userid); err != nil {
		return
	}
	return p.recvRegisterUserid()
}

func (p *TalkServiceClient) sendRegisterUserid(reqSeq int32, userid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerUserid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterUseridArgs{
		ReqSeq: reqSeq,
		Userid: userid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterUserid() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error429 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error430 error
		error430, err = error429.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error430
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerUserid failed: out of sequence response")
		return
	}
	result := RegisterUseridResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - InvitationHash
//  - GuidHash
//  - Email
//  - DeviceInfo
func (p *TalkServiceClient) RegisterWapDevice(invitationHash string, guidHash string, email string, deviceInfo *DeviceInfo) (r string, err error) {
	if err = p.sendRegisterWapDevice(invitationHash, guidHash, email, deviceInfo); err != nil {
		return
	}
	return p.recvRegisterWapDevice()
}

func (p *TalkServiceClient) sendRegisterWapDevice(invitationHash string, guidHash string, email string, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWapDevice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterWapDeviceArgs{
		InvitationHash: invitationHash,
		GuidHash:       guidHash,
		Email:          email,
		DeviceInfo:     deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterWapDevice() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error431 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error432 error
		error432, err = error431.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error432
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWapDevice failed: out of sequence response")
		return
	}
	result := RegisterWapDeviceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
func (p *TalkServiceClient) RegisterWithExistingSnsIdAndIdentityCredential(identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error) {
	if err = p.sendRegisterWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo); err != nil {
		return
	}
	return p.recvRegisterWithExistingSnsIdAndIdentityCredential()
}

func (p *TalkServiceClient) sendRegisterWithExistingSnsIdAndIdentityCredential(identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWithExistingSnsIdAndIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterWithExistingSnsIdAndIdentityCredentialArgs{
		IdentityCredential: identityCredential,
		Region:             region,
		UdidHash:           udidHash,
		DeviceInfo:         deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterWithExistingSnsIdAndIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error433 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error434 error
		error434, err = error433.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error434
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWithExistingSnsIdAndIdentityCredential failed: out of sequence response")
		return
	}
	result := RegisterWithExistingSnsIdAndIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
func (p *TalkServiceClient) RegisterWithSnsId(snsIdType SnsIdType, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string) (r *RegisterWithSnsIdResult_, err error) {
	if err = p.sendRegisterWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid); err != nil {
		return
	}
	return p.recvRegisterWithSnsId()
}

func (p *TalkServiceClient) sendRegisterWithSnsId(snsIdType SnsIdType, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWithSnsId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterWithSnsIdArgs{
		SnsIdType:      snsIdType,
		SnsAccessToken: snsAccessToken,
		Region:         region,
		UdidHash:       udidHash,
		DeviceInfo:     deviceInfo,
		Mid:            mid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterWithSnsId() (value *RegisterWithSnsIdResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error435 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error436 error
		error436, err = error435.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error436
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWithSnsId failed: out of sequence response")
		return
	}
	result := RegisterWithSnsIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
func (p *TalkServiceClient) RegisterWithSnsIdAndIdentityCredential(snsIdType SnsIdType, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (r string, err error) {
	if err = p.sendRegisterWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo); err != nil {
		return
	}
	return p.recvRegisterWithSnsIdAndIdentityCredential()
}

func (p *TalkServiceClient) sendRegisterWithSnsIdAndIdentityCredential(snsIdType SnsIdType, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterWithSnsIdAndIdentityCredentialArgs{
		SnsIdType:          snsIdType,
		SnsAccessToken:     snsAccessToken,
		IdentityCredential: identityCredential,
		Region:             region,
		UdidHash:           udidHash,
		DeviceInfo:         deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRegisterWithSnsIdAndIdentityCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error437 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error438 error
		error438, err = error437.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error438
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWithSnsIdAndIdentityCredential failed: out of sequence response")
		return
	}
	result := RegisterWithSnsIdAndIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TalkServiceClient) ReissueDeviceCredential() (r string, err error) {
	if err = p.sendReissueDeviceCredential(); err != nil {
		return
	}
	return p.recvReissueDeviceCredential()
}

func (p *TalkServiceClient) sendReissueDeviceCredential() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reissueDeviceCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReissueDeviceCredentialArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReissueDeviceCredential() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error439 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error440 error
		error440, err = error439.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error440
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reissueDeviceCredential failed: out of sequence response")
		return
	}
	result := ReissueDeviceCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) ReissueUserTicket(expirationTime int64, maxUseCount int32) (r string, err error) {
	if err = p.sendReissueUserTicket(expirationTime, maxUseCount); err != nil {
		return
	}
	return p.recvReissueUserTicket()
}

func (p *TalkServiceClient) sendReissueUserTicket(expirationTime int64, maxUseCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reissueUserTicket", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReissueUserTicketArgs{
		ExpirationTime: expirationTime,
		MaxUseCount:    maxUseCount,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReissueUserTicket() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error441 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error442 error
		error442, err = error441.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error442
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reissueUserTicket failed: out of sequence response")
		return
	}
	result := ReissueUserTicketResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *TalkServiceClient) RejectGroupInvitation(reqSeq int32, groupId string) (err error) {
	if err = p.sendRejectGroupInvitation(reqSeq, groupId); err != nil {
		return
	}
	return p.recvRejectGroupInvitation()
}

func (p *TalkServiceClient) sendRejectGroupInvitation(reqSeq int32, groupId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RejectGroupInvitationArgs{
		ReqSeq:  reqSeq,
		GroupId: groupId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRejectGroupInvitation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error443 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error444 error
		error444, err = error443.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error444
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rejectGroupInvitation failed: out of sequence response")
		return
	}
	result := RejectGroupInvitationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) ReleaseSession() (err error) {
	if err = p.sendReleaseSession(); err != nil {
		return
	}
	return p.recvReleaseSession()
}

func (p *TalkServiceClient) sendReleaseSession() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("releaseSession", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReleaseSessionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReleaseSession() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error445 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error446 error
		error446, err = error445.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error446
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "releaseSession failed: out of sequence response")
		return
	}
	result := ReleaseSessionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(seq int32, lastMessageId string) (err error) {
	if err = p.sendRemoveAllMessages(seq, lastMessageId); err != nil {
		return
	}
	return p.recvRemoveAllMessages()
}

func (p *TalkServiceClient) sendRemoveAllMessages(seq int32, lastMessageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeAllMessages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveAllMessagesArgs{
		Seq:           seq,
		LastMessageId: lastMessageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveAllMessages() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error447 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error448 error
		error448, err = error447.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error448
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeAllMessages failed: out of sequence response")
		return
	}
	result := RemoveAllMessagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Mid
//  - Index
func (p *TalkServiceClient) RemoveBuddyLocation(mid string, index int32) (err error) {
	if err = p.sendRemoveBuddyLocation(mid, index); err != nil {
		return
	}
	return p.recvRemoveBuddyLocation()
}

func (p *TalkServiceClient) sendRemoveBuddyLocation(mid string, index int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeBuddyLocation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveBuddyLocationArgs{
		Mid:   mid,
		Index: index,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveBuddyLocation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error449 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error450 error
		error450, err = error449.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error450
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeBuddyLocation failed: out of sequence response")
		return
	}
	result := RemoveBuddyLocationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - MessageId
func (p *TalkServiceClient) RemoveMessage(messageId string) (r bool, err error) {
	if err = p.sendRemoveMessage(messageId); err != nil {
		return
	}
	return p.recvRemoveMessage()
}

func (p *TalkServiceClient) sendRemoveMessage(messageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveMessageArgs{
		MessageId: messageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveMessage() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error451 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error452 error
		error452, err = error451.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error452
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeMessage failed: out of sequence response")
		return
	}
	result := RemoveMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - MessageId
func (p *TalkServiceClient) RemoveMessageFromMyHome(messageId string) (r bool, err error) {
	if err = p.sendRemoveMessageFromMyHome(messageId); err != nil {
		return
	}
	return p.recvRemoveMessageFromMyHome()
}

func (p *TalkServiceClient) sendRemoveMessageFromMyHome(messageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeMessageFromMyHome", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveMessageFromMyHomeArgs{
		MessageId: messageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveMessageFromMyHome() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error453 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error454 error
		error454, err = error453.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error454
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeMessageFromMyHome failed: out of sequence response")
		return
	}
	result := RemoveMessageFromMyHomeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SnsIdType
func (p *TalkServiceClient) RemoveSnsId(snsIdType SnsIdType) (r string, err error) {
	if err = p.sendRemoveSnsId(snsIdType); err != nil {
		return
	}
	return p.recvRemoveSnsId()
}

func (p *TalkServiceClient) sendRemoveSnsId(snsIdType SnsIdType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeSnsId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RemoveSnsIdArgs{
		SnsIdType: snsIdType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRemoveSnsId() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error455 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error456 error
		error456, err = error455.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error456
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeSnsId failed: out of sequence response")
		return
	}
	result := RemoveSnsIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SyncOpRevision
//  - Category
//  - Report
func (p *TalkServiceClient) Report(syncOpRevision int64, category SyncCategory, report string) (err error) {
	if err = p.sendReport(syncOpRevision, category, report); err != nil {
		return
	}
	return p.recvReport()
}

func (p *TalkServiceClient) sendReport(syncOpRevision int64, category SyncCategory, report string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("report", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportArgs{
		SyncOpRevision: syncOpRevision,
		Category:       category,
		Report:         report,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReport() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error457 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error458 error
		error458, err = error457.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error458
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "report failed: out of sequence response")
		return
	}
	result := ReportResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SyncOpRevision
//  - Category
//  - ContactReports
//  - ActionType
func (p *TalkServiceClient) ReportContacts(syncOpRevision int64, category SyncCategory, contactReports []*ContactReport, actionType SyncActionType) (r []*ContactReportResult_, err error) {
	if err = p.sendReportContacts(syncOpRevision, category, contactReports, actionType); err != nil {
		return
	}
	return p.recvReportContacts()
}

func (p *TalkServiceClient) sendReportContacts(syncOpRevision int64, category SyncCategory, contactReports []*ContactReport, actionType SyncActionType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportContacts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportContactsArgs{
		SyncOpRevision: syncOpRevision,
		Category:       category,
		ContactReports: contactReports,
		ActionType:     actionType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportContacts() (value []*ContactReportResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error459 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error460 error
		error460, err = error459.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error460
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportContacts failed: out of sequence response")
		return
	}
	result := ReportContactsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SyncOpRevision
//  - Groups
func (p *TalkServiceClient) ReportGroups(syncOpRevision int64, groups []*Group) (err error) {
	if err = p.sendReportGroups(syncOpRevision, groups); err != nil {
		return
	}
	return p.recvReportGroups()
}

func (p *TalkServiceClient) sendReportGroups(syncOpRevision int64, groups []*Group) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportGroupsArgs{
		SyncOpRevision: syncOpRevision,
		Groups:         groups,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportGroups() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error461 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error462 error
		error462, err = error461.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error462
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportGroups failed: out of sequence response")
		return
	}
	result := ReportGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SyncOpRevision
//  - Profile
func (p *TalkServiceClient) ReportProfile(syncOpRevision int64, profile *Profile) (err error) {
	if err = p.sendReportProfile(syncOpRevision, profile); err != nil {
		return
	}
	return p.recvReportProfile()
}

func (p *TalkServiceClient) sendReportProfile(syncOpRevision int64, profile *Profile) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportProfileArgs{
		SyncOpRevision: syncOpRevision,
		Profile:        profile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportProfile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error463 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error464 error
		error464, err = error463.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error464
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportProfile failed: out of sequence response")
		return
	}
	result := ReportProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SyncOpRevision
//  - Rooms
func (p *TalkServiceClient) ReportRooms(syncOpRevision int64, rooms []*Room) (err error) {
	if err = p.sendReportRooms(syncOpRevision, rooms); err != nil {
		return
	}
	return p.recvReportRooms()
}

func (p *TalkServiceClient) sendReportRooms(syncOpRevision int64, rooms []*Room) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportRooms", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportRoomsArgs{
		SyncOpRevision: syncOpRevision,
		Rooms:          rooms,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportRooms() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error465 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error466 error
		error466, err = error465.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error466
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportRooms failed: out of sequence response")
		return
	}
	result := ReportRoomsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SyncOpRevision
//  - Settings
func (p *TalkServiceClient) ReportSettings(syncOpRevision int64, settings *Settings) (err error) {
	if err = p.sendReportSettings(syncOpRevision, settings); err != nil {
		return
	}
	return p.recvReportSettings()
}

func (p *TalkServiceClient) sendReportSettings(syncOpRevision int64, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportSettingsArgs{
		SyncOpRevision: syncOpRevision,
		Settings:       settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportSettings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error467 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error468 error
		error468, err = error467.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error468
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportSettings failed: out of sequence response")
		return
	}
	result := ReportSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SpammerMid
//  - SpammerReasons
//  - SpamMessageIds
func (p *TalkServiceClient) ReportSpammer(spammerMid string, spammerReasons []SpammerReason, spamMessageIds []string) (err error) {
	if err = p.sendReportSpammer(spammerMid, spammerReasons, spamMessageIds); err != nil {
		return
	}
	return p.recvReportSpammer()
}

func (p *TalkServiceClient) sendReportSpammer(spammerMid string, spammerReasons []SpammerReason, spamMessageIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportSpammer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReportSpammerArgs{
		SpammerMid:     spammerMid,
		SpammerReasons: spammerReasons,
		SpamMessageIds: spamMessageIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvReportSpammer() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error469 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error470 error
		error470, err = error469.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error470
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportSpammer failed: out of sequence response")
		return
	}
	result := ReportSpammerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Provider
//  - Identifier
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(provider IdentityProvider, identifier string, locale string) (err error) {
	if err = p.sendRequestAccountPasswordReset(provider, identifier, locale); err != nil {
		return
	}
	return p.recvRequestAccountPasswordReset()
}

func (p *TalkServiceClient) sendRequestAccountPasswordReset(provider IdentityProvider, identifier string, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RequestAccountPasswordResetArgs{
		Provider:   provider,
		Identifier: identifier,
		Locale:     locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRequestAccountPasswordReset() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error471 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error472 error
		error472, err = error471.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error472
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestAccountPasswordReset failed: out of sequence response")
		return
	}
	result := RequestAccountPasswordResetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - EmailConfirmation
func (p *TalkServiceClient) RequestEmailConfirmation(emailConfirmation *EmailConfirmation) (r *EmailConfirmationSession, err error) {
	if err = p.sendRequestEmailConfirmation(emailConfirmation); err != nil {
		return
	}
	return p.recvRequestEmailConfirmation()
}

func (p *TalkServiceClient) sendRequestEmailConfirmation(emailConfirmation *EmailConfirmation) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("requestEmailConfirmation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RequestEmailConfirmationArgs{
		EmailConfirmation: emailConfirmation,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRequestEmailConfirmation() (value *EmailConfirmationSession, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error473 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error474 error
		error474, err = error473.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error474
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestEmailConfirmation failed: out of sequence response")
		return
	}
	result := RequestEmailConfirmationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Provider
//  - Identifier
func (p *TalkServiceClient) RequestIdentityUnbind(provider IdentityProvider, identifier string) (err error) {
	if err = p.sendRequestIdentityUnbind(provider, identifier); err != nil {
		return
	}
	return p.recvRequestIdentityUnbind()
}

func (p *TalkServiceClient) sendRequestIdentityUnbind(provider IdentityProvider, identifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("requestIdentityUnbind", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RequestIdentityUnbindArgs{
		Provider:   provider,
		Identifier: identifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvRequestIdentityUnbind() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error475 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error476 error
		error476, err = error475.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error476
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestIdentityUnbind failed: out of sequence response")
		return
	}
	result := RequestIdentityUnbindResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Verifier
func (p *TalkServiceClient) ResendEmailConfirmation(verifier string) (r *EmailConfirmationSession, err error) {
	if err = p.sendResendEmailConfirmation(verifier); err != nil {
		return
	}
	return p.recvResendEmailConfirmation()
}

func (p *TalkServiceClient) sendResendEmailConfirmation(verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("resendEmailConfirmation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ResendEmailConfirmationArgs{
		Verifier: verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvResendEmailConfirmation() (value *EmailConfirmationSession, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error477 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error478 error
		error478, err = error477.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error478
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "resendEmailConfirmation failed: out of sequence response")
		return
	}
	result := ResendEmailConfirmationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) ResendPinCode(sessionId string) (err error) {
	if err = p.sendResendPinCode(sessionId); err != nil {
		return
	}
	return p.recvResendPinCode()
}

func (p *TalkServiceClient) sendResendPinCode(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("resendPinCode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ResendPinCodeArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvResendPinCode() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error479 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error480 error
		error480, err = error479.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error480
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "resendPinCode failed: out of sequence response")
		return
	}
	result := ResendPinCodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) ResendPinCodeBySMS(sessionId string) (err error) {
	if err = p.sendResendPinCodeBySMS(sessionId); err != nil {
		return
	}
	return p.recvResendPinCodeBySMS()
}

func (p *TalkServiceClient) sendResendPinCodeBySMS(sessionId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("resendPinCodeBySMS", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ResendPinCodeBySMSArgs{
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvResendPinCodeBySMS() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error481 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error482 error
		error482, err = error481.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error482
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "resendPinCodeBySMS failed: out of sequence response")
		return
	}
	result := ResendPinCodeBySMSResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - LastMessageId
func (p *TalkServiceClient) SendChatChecked(seq int32, consumer string, lastMessageId string) (err error) {
	if err = p.sendSendChatChecked(seq, consumer, lastMessageId); err != nil {
		return
	}
	return p.recvSendChatChecked()
}

func (p *TalkServiceClient) sendSendChatChecked(seq int32, consumer string, lastMessageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendChatChecked", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendChatCheckedArgs{
		Seq:           seq,
		Consumer:      consumer,
		LastMessageId: lastMessageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendChatChecked() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error483 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error484 error
		error484, err = error483.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error484
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendChatChecked failed: out of sequence response")
		return
	}
	result := SendChatCheckedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - LastMessageId
func (p *TalkServiceClient) SendChatRemoved(seq int32, consumer string, lastMessageId string) (err error) {
	if err = p.sendSendChatRemoved(seq, consumer, lastMessageId); err != nil {
		return
	}
	return p.recvSendChatRemoved()
}

func (p *TalkServiceClient) sendSendChatRemoved(seq int32, consumer string, lastMessageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendChatRemoved", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendChatRemovedArgs{
		Seq:           seq,
		Consumer:      consumer,
		LastMessageId: lastMessageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendChatRemoved() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error485 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error486 error
		error486, err = error485.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error486
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendChatRemoved failed: out of sequence response")
		return
	}
	result := SendChatRemovedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Esq
//  - MessageId
//  - ReceiverMids
func (p *TalkServiceClient) SendContentPreviewUpdated(esq int32, messageId string, receiverMids []string) (r map[string]string, err error) {
	if err = p.sendSendContentPreviewUpdated(esq, messageId, receiverMids); err != nil {
		return
	}
	return p.recvSendContentPreviewUpdated()
}

func (p *TalkServiceClient) sendSendContentPreviewUpdated(esq int32, messageId string, receiverMids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendContentPreviewUpdated", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendContentPreviewUpdatedArgs{
		Esq:          esq,
		MessageId:    messageId,
		ReceiverMids: receiverMids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendContentPreviewUpdated() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error487 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error488 error
		error488, err = error487.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error488
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendContentPreviewUpdated failed: out of sequence response")
		return
	}
	result := SendContentPreviewUpdatedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - MessageId
func (p *TalkServiceClient) SendContentReceipt(seq int32, consumer string, messageId string) (err error) {
	if err = p.sendSendContentReceipt(seq, consumer, messageId); err != nil {
		return
	}
	return p.recvSendContentReceipt()
}

func (p *TalkServiceClient) sendSendContentReceipt(seq int32, consumer string, messageId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendContentReceipt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendContentReceiptArgs{
		Seq:       seq,
		Consumer:  consumer,
		MessageId: messageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendContentReceipt() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error489 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error490 error
		error490, err = error489.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error490
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendContentReceipt failed: out of sequence response")
		return
	}
	result := SendContentReceiptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) SendDummyPush() (err error) {
	if err = p.sendSendDummyPush(); err != nil {
		return
	}
	return p.recvSendDummyPush()
}

func (p *TalkServiceClient) sendSendDummyPush() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendDummyPush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendDummyPushArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendDummyPush() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error491 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error492 error
		error492, err = error491.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error492
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendDummyPush failed: out of sequence response")
		return
	}
	result := SendDummyPushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendEvent(seq int32, message *Message) (r *Message, err error) {
	if err = p.sendSendEvent(seq, message); err != nil {
		return
	}
	return p.recvSendEvent()
}

func (p *TalkServiceClient) sendSendEvent(seq int32, message *Message) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendEvent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendEventArgs{
		Seq:     seq,
		Message: message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendEvent() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error493 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error494 error
		error494, err = error493.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error494
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendEvent failed: out of sequence response")
		return
	}
	result := SendEventResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(seq int32, message *Message) (r *Message, err error) {
	if err = p.sendSendMessage(seq, message); err != nil {
		return
	}
	return p.recvSendMessage()
}

func (p *TalkServiceClient) sendSendMessage(seq int32, message *Message) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageArgs{
		Seq:     seq,
		Message: message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessage() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error495 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error496 error
		error496, err = error495.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error496
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessage failed: out of sequence response")
		return
	}
	result := SendMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - MessageIds
func (p *TalkServiceClient) SendMessageIgnored(seq int32, consumer string, messageIds []string) (err error) {
	if err = p.sendSendMessageIgnored(seq, consumer, messageIds); err != nil {
		return
	}
	return p.recvSendMessageIgnored()
}

func (p *TalkServiceClient) sendSendMessageIgnored(seq int32, consumer string, messageIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageIgnored", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageIgnoredArgs{
		Seq:        seq,
		Consumer:   consumer,
		MessageIds: messageIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessageIgnored() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error497 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error498 error
		error498, err = error497.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error498
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageIgnored failed: out of sequence response")
		return
	}
	result := SendMessageIgnoredResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Consumer
//  - MessageIds
func (p *TalkServiceClient) SendMessageReceipt(seq int32, consumer string, messageIds []string) (err error) {
	if err = p.sendSendMessageReceipt(seq, consumer, messageIds); err != nil {
		return
	}
	return p.recvSendMessageReceipt()
}

func (p *TalkServiceClient) sendSendMessageReceipt(seq int32, consumer string, messageIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageReceipt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageReceiptArgs{
		Seq:        seq,
		Consumer:   consumer,
		MessageIds: messageIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessageReceipt() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error499 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error500 error
		error500, err = error499.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error500
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageReceipt failed: out of sequence response")
		return
	}
	result := SendMessageReceiptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessageToMyHome(seq int32, message *Message) (r *Message, err error) {
	if err = p.sendSendMessageToMyHome(seq, message); err != nil {
		return
	}
	return p.recvSendMessageToMyHome()
}

func (p *TalkServiceClient) sendSendMessageToMyHome(seq int32, message *Message) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageToMyHome", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMessageToMyHomeArgs{
		Seq:     seq,
		Message: message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSendMessageToMyHome() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error501 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error502 error
		error502, err = error501.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error502
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageToMyHome failed: out of sequence response")
		return
	}
	result := SendMessageToMyHomeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mid
//  - Index
//  - Location
func (p *TalkServiceClient) SetBuddyLocation(mid string, index int32, location *Geolocation) (err error) {
	if err = p.sendSetBuddyLocation(mid, index, location); err != nil {
		return
	}
	return p.recvSetBuddyLocation()
}

func (p *TalkServiceClient) sendSetBuddyLocation(mid string, index int32, location *Geolocation) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setBuddyLocation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetBuddyLocationArgs{
		Mid:      mid,
		Index:    index,
		Location: location,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSetBuddyLocation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error503 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error504 error
		error504, err = error503.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error504
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setBuddyLocation failed: out of sequence response")
		return
	}
	result := SetBuddyLocationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Provider
//  - Identifier
//  - Verifier
func (p *TalkServiceClient) SetIdentityCredential(provider IdentityProvider, identifier string, verifier string) (err error) {
	if err = p.sendSetIdentityCredential(provider, identifier, verifier); err != nil {
		return
	}
	return p.recvSetIdentityCredential()
}

func (p *TalkServiceClient) sendSetIdentityCredential(provider IdentityProvider, identifier string, verifier string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetIdentityCredentialArgs{
		Provider:   provider,
		Identifier: identifier,
		Verifier:   verifier,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSetIdentityCredential() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error505 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error506 error
		error506, err = error505.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error506
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setIdentityCredential failed: out of sequence response")
		return
	}
	result := SetIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - TypeA1
//  - Target
//  - Enablement
func (p *TalkServiceClient) SetNotificationsEnabled(reqSeq int32, type_a1 MIDType, target string, enablement bool) (err error) {
	if err = p.sendSetNotificationsEnabled(reqSeq, type_a1, target, enablement); err != nil {
		return
	}
	return p.recvSetNotificationsEnabled()
}

func (p *TalkServiceClient) sendSetNotificationsEnabled(reqSeq int32, type_a1 MIDType, target string, enablement bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setNotificationsEnabled", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetNotificationsEnabledArgs{
		ReqSeq:     reqSeq,
		TypeA1:     type_a1,
		Target:     target,
		Enablement: enablement,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSetNotificationsEnabled() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error507 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error508 error
		error508, err = error507.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error508
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setNotificationsEnabled failed: out of sequence response")
		return
	}
	result := SetNotificationsEnabledResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
func (p *TalkServiceClient) StartUpdateVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string) (r *VerificationSessionData, err error) {
	if err = p.sendStartUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale); err != nil {
		return
	}
	return p.recvStartUpdateVerification()
}

func (p *TalkServiceClient) sendStartUpdateVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("startUpdateVerification", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StartUpdateVerificationArgs{
		Region:      region,
		Carrier:     carrier,
		Phone:       phone,
		UdidHash:    udidHash,
		DeviceInfo:  deviceInfo,
		NetworkCode: networkCode,
		Locale:      locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvStartUpdateVerification() (value *VerificationSessionData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error509 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error510 error
		error510, err = error509.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error510
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startUpdateVerification failed: out of sequence response")
		return
	}
	result := StartUpdateVerificationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Mid
//  - Locale
func (p *TalkServiceClient) StartVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string) (r *VerificationSessionData, err error) {
	if err = p.sendStartVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale); err != nil {
		return
	}
	return p.recvStartVerification()
}

func (p *TalkServiceClient) sendStartVerification(region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("startVerification", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StartVerificationArgs{
		Region:      region,
		Carrier:     carrier,
		Phone:       phone,
		UdidHash:    udidHash,
		DeviceInfo:  deviceInfo,
		NetworkCode: networkCode,
		Mid:         mid,
		Locale:      locale,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvStartVerification() (value *VerificationSessionData, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error511 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error512 error
		error512, err = error511.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error512
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startVerification failed: out of sequence response")
		return
	}
	result := StartVerificationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - ProfileAttribute
//  - Value
func (p *TalkServiceClient) StoreUpdateProfileAttribute(seq int32, profileAttribute ProfileAttribute, value string) (err error) {
	if err = p.sendStoreUpdateProfileAttribute(seq, profileAttribute, value); err != nil {
		return
	}
	return p.recvStoreUpdateProfileAttribute()
}

func (p *TalkServiceClient) sendStoreUpdateProfileAttribute(seq int32, profileAttribute ProfileAttribute, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("storeUpdateProfileAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := StoreUpdateProfileAttributeArgs{
		Seq:              seq,
		ProfileAttribute: profileAttribute,
		Value:            value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvStoreUpdateProfileAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error513 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error514 error
		error514, err = error513.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error514
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "storeUpdateProfileAttribute failed: out of sequence response")
		return
	}
	result := StoreUpdateProfileAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Modifications
func (p *TalkServiceClient) SyncContactBySnsIds(reqSeq int32, modifications []*SnsFriendModification) (r []*SnsFriendContactRegistration, err error) {
	if err = p.sendSyncContactBySnsIds(reqSeq, modifications); err != nil {
		return
	}
	return p.recvSyncContactBySnsIds()
}

func (p *TalkServiceClient) sendSyncContactBySnsIds(reqSeq int32, modifications []*SnsFriendModification) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("syncContactBySnsIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SyncContactBySnsIdsArgs{
		ReqSeq:        reqSeq,
		Modifications: modifications,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSyncContactBySnsIds() (value []*SnsFriendContactRegistration, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error515 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error516 error
		error516, err = error515.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error516
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "syncContactBySnsIds failed: out of sequence response")
		return
	}
	result := SyncContactBySnsIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - LocalContacts
func (p *TalkServiceClient) SyncContacts(reqSeq int32, localContacts []*ContactModification) (r map[string]*ContactRegistration, err error) {
	if err = p.sendSyncContacts(reqSeq, localContacts); err != nil {
		return
	}
	return p.recvSyncContacts()
}

func (p *TalkServiceClient) sendSyncContacts(reqSeq int32, localContacts []*ContactModification) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("syncContacts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SyncContactsArgs{
		ReqSeq:        reqSeq,
		LocalContacts: localContacts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvSyncContacts() (value map[string]*ContactRegistration, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error517 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error518 error
		error518, err = error517.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error518
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "syncContacts failed: out of sequence response")
		return
	}
	result := SyncContactsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) TrySendMessage(seq int32, message *Message) (r *Message, err error) {
	if err = p.sendTrySendMessage(seq, message); err != nil {
		return
	}
	return p.recvTrySendMessage()
}

func (p *TalkServiceClient) sendTrySendMessage(seq int32, message *Message) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("trySendMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TrySendMessageArgs{
		Seq:     seq,
		Message: message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvTrySendMessage() (value *Message, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error519 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error520 error
		error520, err = error519.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error520
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "trySendMessage failed: out of sequence response")
		return
	}
	result := TrySendMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Id
func (p *TalkServiceClient) UnblockContact(reqSeq int32, id string) (err error) {
	if err = p.sendUnblockContact(reqSeq, id); err != nil {
		return
	}
	return p.recvUnblockContact()
}

func (p *TalkServiceClient) sendUnblockContact(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unblockContact", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UnblockContactArgs{
		ReqSeq: reqSeq,
		Id:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUnblockContact() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error521 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error522 error
		error522, err = error521.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error522
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unblockContact failed: out of sequence response")
		return
	}
	result := UnblockContactResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Id
func (p *TalkServiceClient) UnblockRecommendation(reqSeq int32, id string) (err error) {
	if err = p.sendUnblockRecommendation(reqSeq, id); err != nil {
		return
	}
	return p.recvUnblockRecommendation()
}

func (p *TalkServiceClient) sendUnblockRecommendation(reqSeq int32, id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unblockRecommendation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UnblockRecommendationArgs{
		ReqSeq: reqSeq,
		Id:     id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUnblockRecommendation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error523 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error524 error
		error524, err = error523.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error524
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unblockRecommendation failed: out of sequence response")
		return
	}
	result := UnblockRecommendationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *TalkServiceClient) UnregisterUserAndDevice() (r string, err error) {
	if err = p.sendUnregisterUserAndDevice(); err != nil {
		return
	}
	return p.recvUnregisterUserAndDevice()
}

func (p *TalkServiceClient) sendUnregisterUserAndDevice() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UnregisterUserAndDeviceArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUnregisterUserAndDevice() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error525 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error526 error
		error526, err = error525.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error526
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unregisterUserAndDevice failed: out of sequence response")
		return
	}
	result := UnregisterUserAndDeviceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ApnsDeviceToken
func (p *TalkServiceClient) UpdateApnsDeviceToken(apnsDeviceToken []byte) (err error) {
	if err = p.sendUpdateApnsDeviceToken(apnsDeviceToken); err != nil {
		return
	}
	return p.recvUpdateApnsDeviceToken()
}

func (p *TalkServiceClient) sendUpdateApnsDeviceToken(apnsDeviceToken []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateApnsDeviceToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateApnsDeviceTokenArgs{
		ApnsDeviceToken: apnsDeviceToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateApnsDeviceToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error527 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error528 error
		error528, err = error527.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error528
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateApnsDeviceToken failed: out of sequence response")
		return
	}
	result := UpdateApnsDeviceTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Key
//  - Value
func (p *TalkServiceClient) UpdateBuddySetting(key string, value string) (err error) {
	if err = p.sendUpdateBuddySetting(key, value); err != nil {
		return
	}
	return p.recvUpdateBuddySetting()
}

func (p *TalkServiceClient) sendUpdateBuddySetting(key string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateBuddySetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateBuddySettingArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateBuddySetting() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error529 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error530 error
		error530, err = error529.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error530
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateBuddySetting failed: out of sequence response")
		return
	}
	result := UpdateBuddySettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - RegistrationId
func (p *TalkServiceClient) UpdateC2DMRegistrationId(registrationId string) (err error) {
	if err = p.sendUpdateC2DMRegistrationId(registrationId); err != nil {
		return
	}
	return p.recvUpdateC2DMRegistrationId()
}

func (p *TalkServiceClient) sendUpdateC2DMRegistrationId(registrationId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateC2DMRegistrationId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateC2DMRegistrationIdArgs{
		RegistrationId: registrationId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateC2DMRegistrationId() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error531 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error532 error
		error532, err = error531.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error532
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateC2DMRegistrationId failed: out of sequence response")
		return
	}
	result := UpdateC2DMRegistrationIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error) {
	if err = p.sendUpdateContactSetting(reqSeq, mid, flag, value); err != nil {
		return
	}
	return p.recvUpdateContactSetting()
}

func (p *TalkServiceClient) sendUpdateContactSetting(reqSeq int32, mid string, flag ContactSetting, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateContactSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateContactSettingArgs{
		ReqSeq: reqSeq,
		Mid:    mid,
		Flag:   flag,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateContactSetting() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error533 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error534 error
		error534, err = error533.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error534
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateContactSetting failed: out of sequence response")
		return
	}
	result := UpdateContactSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - CustomMode
//  - ParamMap
func (p *TalkServiceClient) UpdateCustomModeSettings(customMode CustomMode, paramMap map[string]string) (err error) {
	if err = p.sendUpdateCustomModeSettings(customMode, paramMap); err != nil {
		return
	}
	return p.recvUpdateCustomModeSettings()
}

func (p *TalkServiceClient) sendUpdateCustomModeSettings(customMode CustomMode, paramMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateCustomModeSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateCustomModeSettingsArgs{
		CustomMode: customMode,
		ParamMap:   paramMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateCustomModeSettings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error535 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error536 error
		error536, err = error535.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error536
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateCustomModeSettings failed: out of sequence response")
		return
	}
	result := UpdateCustomModeSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - DeviceUid
//  - DeviceInfo
func (p *TalkServiceClient) UpdateDeviceInfo(deviceUid string, deviceInfo *DeviceInfo) (err error) {
	if err = p.sendUpdateDeviceInfo(deviceUid, deviceInfo); err != nil {
		return
	}
	return p.recvUpdateDeviceInfo()
}

func (p *TalkServiceClient) sendUpdateDeviceInfo(deviceUid string, deviceInfo *DeviceInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDeviceInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateDeviceInfoArgs{
		DeviceUid:  deviceUid,
		DeviceInfo: deviceInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateDeviceInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error537 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error538 error
		error538, err = error537.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error538
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDeviceInfo failed: out of sequence response")
		return
	}
	result := UpdateDeviceInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *TalkServiceClient) UpdateGroup(reqSeq int32, group *Group) (err error) {
	if err = p.sendUpdateGroup(reqSeq, group); err != nil {
		return
	}
	return p.recvUpdateGroup()
}

func (p *TalkServiceClient) sendUpdateGroup(reqSeq int32, group *Group) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateGroupArgs{
		ReqSeq: reqSeq,
		Group:  group,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error539 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error540 error
		error540, err = error539.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error540
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGroup failed: out of sequence response")
		return
	}
	result := UpdateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - TypeA1
//  - Token
func (p *TalkServiceClient) UpdateNotificationToken(type_a1 NotificationType, token string) (err error) {
	if err = p.sendUpdateNotificationToken(type_a1, token); err != nil {
		return
	}
	return p.recvUpdateNotificationToken()
}

func (p *TalkServiceClient) sendUpdateNotificationToken(type_a1 NotificationType, token string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNotificationToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateNotificationTokenArgs{
		TypeA1: type_a1,
		Token:  token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateNotificationToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error541 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error542 error
		error542, err = error541.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error542
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNotificationToken failed: out of sequence response")
		return
	}
	result := UpdateNotificationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - TypeA1
//  - Token
func (p *TalkServiceClient) UpdateNotificationTokenWithBytes(type_a1 NotificationType, token []byte) (err error) {
	if err = p.sendUpdateNotificationTokenWithBytes(type_a1, token); err != nil {
		return
	}
	return p.recvUpdateNotificationTokenWithBytes()
}

func (p *TalkServiceClient) sendUpdateNotificationTokenWithBytes(type_a1 NotificationType, token []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNotificationTokenWithBytes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateNotificationTokenWithBytesArgs{
		TypeA1: type_a1,
		Token:  token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateNotificationTokenWithBytes() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error543 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error544 error
		error544, err = error543.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error544
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNotificationTokenWithBytes failed: out of sequence response")
		return
	}
	result := UpdateNotificationTokenWithBytesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *TalkServiceClient) UpdateProfile(reqSeq int32, profile *Profile) (err error) {
	if err = p.sendUpdateProfile(reqSeq, profile); err != nil {
		return
	}
	return p.recvUpdateProfile()
}

func (p *TalkServiceClient) sendUpdateProfile(reqSeq int32, profile *Profile) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateProfileArgs{
		ReqSeq:  reqSeq,
		Profile: profile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateProfile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error545 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error546 error
		error546, err = error545.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error546
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProfile failed: out of sequence response")
		return
	}
	result := UpdateProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error) {
	if err = p.sendUpdateProfileAttribute(reqSeq, attr, value); err != nil {
		return
	}
	return p.recvUpdateProfileAttribute()
}

func (p *TalkServiceClient) sendUpdateProfileAttribute(reqSeq int32, attr ProfileAttribute, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateProfileAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateProfileAttributeArgs{
		ReqSeq: reqSeq,
		Attr:   attr,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateProfileAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error547 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error548 error
		error548, err = error547.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error548
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProfileAttribute failed: out of sequence response")
		return
	}
	result := UpdateProfileAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Region
func (p *TalkServiceClient) UpdateRegion(region string) (err error) {
	if err = p.sendUpdateRegion(region); err != nil {
		return
	}
	return p.recvUpdateRegion()
}

func (p *TalkServiceClient) sendUpdateRegion(region string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateRegion", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateRegionArgs{
		Region: region,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateRegion() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error549 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error550 error
		error550, err = error549.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error550
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRegion failed: out of sequence response")
		return
	}
	result := UpdateRegionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Settings
func (p *TalkServiceClient) UpdateSettings(reqSeq int32, settings *Settings) (err error) {
	if err = p.sendUpdateSettings(reqSeq, settings); err != nil {
		return
	}
	return p.recvUpdateSettings()
}

func (p *TalkServiceClient) sendUpdateSettings(reqSeq int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateSettingsArgs{
		ReqSeq:   reqSeq,
		Settings: settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettings() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error551 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error552 error
		error552, err = error551.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error552
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettings failed: out of sequence response")
		return
	}
	result := UpdateSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - Settings
func (p *TalkServiceClient) UpdateSettings2(reqSeq int32, settings *Settings) (r int32, err error) {
	if err = p.sendUpdateSettings2(reqSeq, settings); err != nil {
		return
	}
	return p.recvUpdateSettings2()
}

func (p *TalkServiceClient) sendUpdateSettings2(reqSeq int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettings2", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateSettings2Args{
		ReqSeq:   reqSeq,
		Settings: settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettings2() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error553 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error554 error
		error554, err = error553.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error554
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettings2 failed: out of sequence response")
		return
	}
	result := UpdateSettings2Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error) {
	if err = p.sendUpdateSettingsAttribute(reqSeq, attr, value); err != nil {
		return
	}
	return p.recvUpdateSettingsAttribute()
}

func (p *TalkServiceClient) sendUpdateSettingsAttribute(reqSeq int32, attr SettingsAttribute, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettingsAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateSettingsAttributeArgs{
		ReqSeq: reqSeq,
		Attr:   attr,
		Value:  value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettingsAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error555 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error556 error
		error556, err = error555.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error556
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettingsAttribute failed: out of sequence response")
		return
	}
	result := UpdateSettingsAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReqSeq
//  - AttrBitset
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (r int32, err error) {
	if err = p.sendUpdateSettingsAttributes(reqSeq, attrBitset, settings); err != nil {
		return
	}
	return p.recvUpdateSettingsAttributes()
}

func (p *TalkServiceClient) sendUpdateSettingsAttributes(reqSeq int32, attrBitset int32, settings *Settings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSettingsAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateSettingsAttributesArgs{
		ReqSeq:     reqSeq,
		AttrBitset: attrBitset,
		Settings:   settings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvUpdateSettingsAttributes() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error557 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error558 error
		error558, err = error557.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error558
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSettingsAttributes failed: out of sequence response")
		return
	}
	result := UpdateSettingsAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IdentityProvider
//  - Identifier
//  - Password
func (p *TalkServiceClient) VerifyIdentityCredential(identityProvider IdentityProvider, identifier string, password string) (err error) {
	if err = p.sendVerifyIdentityCredential(identityProvider, identifier, password); err != nil {
		return
	}
	return p.recvVerifyIdentityCredential()
}

func (p *TalkServiceClient) sendVerifyIdentityCredential(identityProvider IdentityProvider, identifier string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyIdentityCredential", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyIdentityCredentialArgs{
		IdentityProvider: identityProvider,
		Identifier:       identifier,
		Password:         password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvVerifyIdentityCredential() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error559 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error560 error
		error560, err = error559.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error560
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyIdentityCredential failed: out of sequence response")
		return
	}
	result := VerifyIdentityCredentialResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - IdentityCredential
func (p *TalkServiceClient) VerifyIdentityCredentialWithResult_(identityCredential *IdentityCredential) (r *UserAuthStatus, err error) {
	if err = p.sendVerifyIdentityCredentialWithResult_(identityCredential); err != nil {
		return
	}
	return p.recvVerifyIdentityCredentialWithResult_()
}

func (p *TalkServiceClient) sendVerifyIdentityCredentialWithResult_(identityCredential *IdentityCredential) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyIdentityCredentialWithResultArgs{
		IdentityCredential: identityCredential,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvVerifyIdentityCredentialWithResult_() (value *UserAuthStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error561 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error562 error
		error562, err = error561.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error562
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyIdentityCredentialWithResult failed: out of sequence response")
		return
	}
	result := VerifyIdentityCredentialWithResultResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
func (p *TalkServiceClient) VerifyPhone(sessionId string, pinCode string, udidHash string) (r VerificationResult_, err error) {
	if err = p.sendVerifyPhone(sessionId, pinCode, udidHash); err != nil {
		return
	}
	return p.recvVerifyPhone()
}

func (p *TalkServiceClient) sendVerifyPhone(sessionId string, pinCode string, udidHash string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyPhone", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyPhoneArgs{
		SessionId: sessionId,
		PinCode:   pinCode,
		UdidHash:  udidHash,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvVerifyPhone() (value VerificationResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error563 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error564 error
		error564, err = error563.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error564
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyPhone failed: out of sequence response")
		return
	}
	result := VerifyPhoneResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(verifier string, pinCode string) (r string, err error) {
	if err = p.sendVerifyQrcode(verifier, pinCode); err != nil {
		return
	}
	return p.recvVerifyQrcode()
}

func (p *TalkServiceClient) sendVerifyQrcode(verifier string, pinCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("verifyQrcode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VerifyQrcodeArgs{
		Verifier: verifier,
		PinCode:  pinCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalkServiceClient) recvVerifyQrcode() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error565 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error566 error
		error566, err = error565.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error566
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "verifyQrcode failed: out of sequence response")
		return
	}
	result := VerifyQrcodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type TalkServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

	self567 := &TalkServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self567.processorMap["acceptGroupInvitation"] = &talkServiceProcessorAcceptGroupInvitation{handler: handler}
	self567.processorMap["acceptProximityMatches"] = &talkServiceProcessorAcceptProximityMatches{handler: handler}
	self567.processorMap["acquireCallRoute"] = &talkServiceProcessorAcquireCallRoute{handler: handler}
	self567.processorMap["acquireCallTicket"] = &talkServiceProcessorAcquireCallTicket{handler: handler}
	self567.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler: handler}
	self567.processorMap["addSnsId"] = &talkServiceProcessorAddSnsId{handler: handler}
	self567.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler: handler}
	self567.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler: handler}
	self567.processorMap["cancelGroupInvitation"] = &talkServiceProcessorCancelGroupInvitation{handler: handler}
	self567.processorMap["changeVerificationMethod"] = &talkServiceProcessorChangeVerificationMethod{handler: handler}
	self567.processorMap["clearIdentityCredential"] = &talkServiceProcessorClearIdentityCredential{handler: handler}
	self567.processorMap["clearMessageBox"] = &talkServiceProcessorClearMessageBox{handler: handler}
	self567.processorMap["closeProximityMatch"] = &talkServiceProcessorCloseProximityMatch{handler: handler}
	self567.processorMap["commitSendMessage"] = &talkServiceProcessorCommitSendMessage{handler: handler}
	self567.processorMap["commitSendMessages"] = &talkServiceProcessorCommitSendMessages{handler: handler}
	self567.processorMap["commitUpdateProfile"] = &talkServiceProcessorCommitUpdateProfile{handler: handler}
	self567.processorMap["confirmEmail"] = &talkServiceProcessorConfirmEmail{handler: handler}
	self567.processorMap["createGroup"] = &talkServiceProcessorCreateGroup{handler: handler}
	self567.processorMap["createQrcodeBase64Image"] = &talkServiceProcessorCreateQrcodeBase64Image{handler: handler}
	self567.processorMap["createRoom"] = &talkServiceProcessorCreateRoom{handler: handler}
	self567.processorMap["createSession"] = &talkServiceProcessorCreateSession{handler: handler}
	self567.processorMap["fetchAnnouncements"] = &talkServiceProcessorFetchAnnouncements{handler: handler}
	self567.processorMap["fetchMessages"] = &talkServiceProcessorFetchMessages{handler: handler}
	self567.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler: handler}
	self567.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler: handler}
	self567.processorMap["findAndAddContactsByEmail"] = &talkServiceProcessorFindAndAddContactsByEmail{handler: handler}
	self567.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler: handler}
	self567.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler: handler}
	self567.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler: handler}
	self567.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler: handler}
	self567.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler: handler}
	self567.processorMap["findContactsByEmail"] = &talkServiceProcessorFindContactsByEmail{handler: handler}
	self567.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler: handler}
	self567.processorMap["findSnsIdUserStatus"] = &talkServiceProcessorFindSnsIdUserStatus{handler: handler}
	self567.processorMap["finishUpdateVerification"] = &talkServiceProcessorFinishUpdateVerification{handler: handler}
	self567.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler: handler}
	self567.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler: handler}
	self567.processorMap["getActiveBuddySubscriberIds"] = &talkServiceProcessorGetActiveBuddySubscriberIds{handler: handler}
	self567.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler: handler}
	self567.processorMap["getAuthQrcode"] = &talkServiceProcessorGetAuthQrcode{handler: handler}
	self567.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler: handler}
	self567.processorMap["getBlockedContactIdsByRange"] = &talkServiceProcessorGetBlockedContactIdsByRange{handler: handler}
	self567.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler: handler}
	self567.processorMap["getBuddyBlockerIds"] = &talkServiceProcessorGetBuddyBlockerIds{handler: handler}
	self567.processorMap["getBuddyLocation"] = &talkServiceProcessorGetBuddyLocation{handler: handler}
	self567.processorMap["getCompactContactsModifiedSince"] = &talkServiceProcessorGetCompactContactsModifiedSince{handler: handler}
	self567.processorMap["getCompactGroup"] = &talkServiceProcessorGetCompactGroup{handler: handler}
	self567.processorMap["getCompactRoom"] = &talkServiceProcessorGetCompactRoom{handler: handler}
	self567.processorMap["getContact"] = &talkServiceProcessorGetContact{handler: handler}
	self567.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler: handler}
	self567.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler: handler}
	self567.processorMap["getFavoriteMids"] = &talkServiceProcessorGetFavoriteMids{handler: handler}
	self567.processorMap["getGroup"] = &talkServiceProcessorGetGroup{handler: handler}
	self567.processorMap["getGroupIdsInvited"] = &talkServiceProcessorGetGroupIdsInvited{handler: handler}
	self567.processorMap["getGroupIdsJoined"] = &talkServiceProcessorGetGroupIdsJoined{handler: handler}
	self567.processorMap["getGroups"] = &talkServiceProcessorGetGroups{handler: handler}
	self567.processorMap["getHiddenContactMids"] = &talkServiceProcessorGetHiddenContactMids{handler: handler}
	self567.processorMap["getIdentityIdentifier"] = &talkServiceProcessorGetIdentityIdentifier{handler: handler}
	self567.processorMap["getLastAnnouncementIndex"] = &talkServiceProcessorGetLastAnnouncementIndex{handler: handler}
	self567.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler: handler}
	self567.processorMap["getMessageBox"] = &talkServiceProcessorGetMessageBox{handler: handler}
	self567.processorMap["getMessageBoxCompactWrapUp"] = &talkServiceProcessorGetMessageBoxCompactWrapUp{handler: handler}
	self567.processorMap["getMessageBoxCompactWrapUpList"] = &talkServiceProcessorGetMessageBoxCompactWrapUpList{handler: handler}
	self567.processorMap["getMessageBoxList"] = &talkServiceProcessorGetMessageBoxList{handler: handler}
	self567.processorMap["getMessageBoxListByStatus"] = &talkServiceProcessorGetMessageBoxListByStatus{handler: handler}
	self567.processorMap["getMessageBoxWrapUp"] = &talkServiceProcessorGetMessageBoxWrapUp{handler: handler}
	self567.processorMap["getMessageBoxWrapUpList"] = &talkServiceProcessorGetMessageBoxWrapUpList{handler: handler}
	self567.processorMap["getMessagesBySequenceNumber"] = &talkServiceProcessorGetMessagesBySequenceNumber{handler: handler}
	self567.processorMap["getNextMessages"] = &talkServiceProcessorGetNextMessages{handler: handler}
	self567.processorMap["getNotificationPolicy"] = &talkServiceProcessorGetNotificationPolicy{handler: handler}
	self567.processorMap["getPreviousMessages"] = &talkServiceProcessorGetPreviousMessages{handler: handler}
	self567.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler: handler}
	self567.processorMap["getProximityMatchCandidateList"] = &talkServiceProcessorGetProximityMatchCandidateList{handler: handler}
	self567.processorMap["getProximityMatchCandidates"] = &talkServiceProcessorGetProximityMatchCandidates{handler: handler}
	self567.processorMap["getRecentMessages"] = &talkServiceProcessorGetRecentMessages{handler: handler}
	self567.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler: handler}
	self567.processorMap["getRoom"] = &talkServiceProcessorGetRoom{handler: handler}
	self567.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler: handler}
	self567.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler: handler}
	self567.processorMap["getSessions"] = &talkServiceProcessorGetSessions{handler: handler}
	self567.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler: handler}
	self567.processorMap["getSettingsAttributes"] = &talkServiceProcessorGetSettingsAttributes{handler: handler}
	self567.processorMap["getSystemConfiguration"] = &talkServiceProcessorGetSystemConfiguration{handler: handler}
	self567.processorMap["getUserTicket"] = &talkServiceProcessorGetUserTicket{handler: handler}
	self567.processorMap["getWapInvitation"] = &talkServiceProcessorGetWapInvitation{handler: handler}
	self567.processorMap["invalidateUserTicket"] = &talkServiceProcessorInvalidateUserTicket{handler: handler}
	self567.processorMap["inviteFriendsBySms"] = &talkServiceProcessorInviteFriendsBySms{handler: handler}
	self567.processorMap["inviteIntoGroup"] = &talkServiceProcessorInviteIntoGroup{handler: handler}
	self567.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler: handler}
	self567.processorMap["inviteViaEmail"] = &talkServiceProcessorInviteViaEmail{handler: handler}
	self567.processorMap["isIdentityIdentifierAvailable"] = &talkServiceProcessorIsIdentityIdentifierAvailable{handler: handler}
	self567.processorMap["isUseridAvailable"] = &talkServiceProcessorIsUseridAvailable{handler: handler}
	self567.processorMap["kickoutFromGroup"] = &talkServiceProcessorKickoutFromGroup{handler: handler}
	self567.processorMap["leaveGroup"] = &talkServiceProcessorLeaveGroup{handler: handler}
	self567.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler: handler}
	self567.processorMap["loginWithIdentityCredential"] = &talkServiceProcessorLoginWithIdentityCredential{handler: handler}
	self567.processorMap["loginWithIdentityCredentialForCertificate"] = &talkServiceProcessorLoginWithIdentityCredentialForCertificate{handler: handler}
	self567.processorMap["loginWithVerifier"] = &talkServiceProcessorLoginWithVerifier{handler: handler}
	self567.processorMap["loginWithVerifierForCerificate"] = &talkServiceProcessorLoginWithVerifierForCerificate{handler: handler}
	self567.processorMap["loginWithVerifierForCertificate"] = &talkServiceProcessorLoginWithVerifierForCertificate{handler: handler}
	self567.processorMap["logout"] = &talkServiceProcessorLogout{handler: handler}
	self567.processorMap["logoutSession"] = &talkServiceProcessorLogoutSession{handler: handler}
	self567.processorMap["noop"] = &talkServiceProcessorNoop{handler: handler}
	self567.processorMap["notifiedRedirect"] = &talkServiceProcessorNotifiedRedirect{handler: handler}
	self567.processorMap["notifyBuddyOnAir"] = &talkServiceProcessorNotifyBuddyOnAir{handler: handler}
	self567.processorMap["notifyIndividualEvent"] = &talkServiceProcessorNotifyIndividualEvent{handler: handler}
	self567.processorMap["notifyInstalled"] = &talkServiceProcessorNotifyInstalled{handler: handler}
	self567.processorMap["notifyRegistrationComplete"] = &talkServiceProcessorNotifyRegistrationComplete{handler: handler}
	self567.processorMap["notifySleep"] = &talkServiceProcessorNotifySleep{handler: handler}
	self567.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler: handler}
	self567.processorMap["openProximityMatch"] = &talkServiceProcessorOpenProximityMatch{handler: handler}
	self567.processorMap["registerBuddyUser"] = &talkServiceProcessorRegisterBuddyUser{handler: handler}
	self567.processorMap["registerBuddyUserid"] = &talkServiceProcessorRegisterBuddyUserid{handler: handler}
	self567.processorMap["registerDevice"] = &talkServiceProcessorRegisterDevice{handler: handler}
	self567.processorMap["registerDeviceWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithIdentityCredential{handler: handler}
	self567.processorMap["registerDeviceWithoutPhoneNumber"] = &talkServiceProcessorRegisterDeviceWithoutPhoneNumber{handler: handler}
	self567.processorMap["registerDeviceWithoutPhoneNumberWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithoutPhoneNumberWithIdentityCredential{handler: handler}
	self567.processorMap["registerUserid"] = &talkServiceProcessorRegisterUserid{handler: handler}
	self567.processorMap["registerWapDevice"] = &talkServiceProcessorRegisterWapDevice{handler: handler}
	self567.processorMap["registerWithExistingSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithExistingSnsIdAndIdentityCredential{handler: handler}
	self567.processorMap["registerWithSnsId"] = &talkServiceProcessorRegisterWithSnsId{handler: handler}
	self567.processorMap["registerWithSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithSnsIdAndIdentityCredential{handler: handler}
	self567.processorMap["reissueDeviceCredential"] = &talkServiceProcessorReissueDeviceCredential{handler: handler}
	self567.processorMap["reissueUserTicket"] = &talkServiceProcessorReissueUserTicket{handler: handler}
	self567.processorMap["rejectGroupInvitation"] = &talkServiceProcessorRejectGroupInvitation{handler: handler}
	self567.processorMap["releaseSession"] = &talkServiceProcessorReleaseSession{handler: handler}
	self567.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler: handler}
	self567.processorMap["removeBuddyLocation"] = &talkServiceProcessorRemoveBuddyLocation{handler: handler}
	self567.processorMap["removeMessage"] = &talkServiceProcessorRemoveMessage{handler: handler}
	self567.processorMap["removeMessageFromMyHome"] = &talkServiceProcessorRemoveMessageFromMyHome{handler: handler}
	self567.processorMap["removeSnsId"] = &talkServiceProcessorRemoveSnsId{handler: handler}
	self567.processorMap["report"] = &talkServiceProcessorReport{handler: handler}
	self567.processorMap["reportContacts"] = &talkServiceProcessorReportContacts{handler: handler}
	self567.processorMap["reportGroups"] = &talkServiceProcessorReportGroups{handler: handler}
	self567.processorMap["reportProfile"] = &talkServiceProcessorReportProfile{handler: handler}
	self567.processorMap["reportRooms"] = &talkServiceProcessorReportRooms{handler: handler}
	self567.processorMap["reportSettings"] = &talkServiceProcessorReportSettings{handler: handler}
	self567.processorMap["reportSpammer"] = &talkServiceProcessorReportSpammer{handler: handler}
	self567.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler: handler}
	self567.processorMap["requestEmailConfirmation"] = &talkServiceProcessorRequestEmailConfirmation{handler: handler}
	self567.processorMap["requestIdentityUnbind"] = &talkServiceProcessorRequestIdentityUnbind{handler: handler}
	self567.processorMap["resendEmailConfirmation"] = &talkServiceProcessorResendEmailConfirmation{handler: handler}
	self567.processorMap["resendPinCode"] = &talkServiceProcessorResendPinCode{handler: handler}
	self567.processorMap["resendPinCodeBySMS"] = &talkServiceProcessorResendPinCodeBySMS{handler: handler}
	self567.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler: handler}
	self567.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler: handler}
	self567.processorMap["sendContentPreviewUpdated"] = &talkServiceProcessorSendContentPreviewUpdated{handler: handler}
	self567.processorMap["sendContentReceipt"] = &talkServiceProcessorSendContentReceipt{handler: handler}
	self567.processorMap["sendDummyPush"] = &talkServiceProcessorSendDummyPush{handler: handler}
	self567.processorMap["sendEvent"] = &talkServiceProcessorSendEvent{handler: handler}
	self567.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler: handler}
	self567.processorMap["sendMessageIgnored"] = &talkServiceProcessorSendMessageIgnored{handler: handler}
	self567.processorMap["sendMessageReceipt"] = &talkServiceProcessorSendMessageReceipt{handler: handler}
	self567.processorMap["sendMessageToMyHome"] = &talkServiceProcessorSendMessageToMyHome{handler: handler}
	self567.processorMap["setBuddyLocation"] = &talkServiceProcessorSetBuddyLocation{handler: handler}
	self567.processorMap["setIdentityCredential"] = &talkServiceProcessorSetIdentityCredential{handler: handler}
	self567.processorMap["setNotificationsEnabled"] = &talkServiceProcessorSetNotificationsEnabled{handler: handler}
	self567.processorMap["startUpdateVerification"] = &talkServiceProcessorStartUpdateVerification{handler: handler}
	self567.processorMap["startVerification"] = &talkServiceProcessorStartVerification{handler: handler}
	self567.processorMap["storeUpdateProfileAttribute"] = &talkServiceProcessorStoreUpdateProfileAttribute{handler: handler}
	self567.processorMap["syncContactBySnsIds"] = &talkServiceProcessorSyncContactBySnsIds{handler: handler}
	self567.processorMap["syncContacts"] = &talkServiceProcessorSyncContacts{handler: handler}
	self567.processorMap["trySendMessage"] = &talkServiceProcessorTrySendMessage{handler: handler}
	self567.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler: handler}
	self567.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler: handler}
	self567.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler: handler}
	self567.processorMap["updateApnsDeviceToken"] = &talkServiceProcessorUpdateApnsDeviceToken{handler: handler}
	self567.processorMap["updateBuddySetting"] = &talkServiceProcessorUpdateBuddySetting{handler: handler}
	self567.processorMap["updateC2DMRegistrationId"] = &talkServiceProcessorUpdateC2DMRegistrationId{handler: handler}
	self567.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler: handler}
	self567.processorMap["updateCustomModeSettings"] = &talkServiceProcessorUpdateCustomModeSettings{handler: handler}
	self567.processorMap["updateDeviceInfo"] = &talkServiceProcessorUpdateDeviceInfo{handler: handler}
	self567.processorMap["updateGroup"] = &talkServiceProcessorUpdateGroup{handler: handler}
	self567.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler: handler}
	self567.processorMap["updateNotificationTokenWithBytes"] = &talkServiceProcessorUpdateNotificationTokenWithBytes{handler: handler}
	self567.processorMap["updateProfile"] = &talkServiceProcessorUpdateProfile{handler: handler}
	self567.processorMap["updateProfileAttribute"] = &talkServiceProcessorUpdateProfileAttribute{handler: handler}
	self567.processorMap["updateRegion"] = &talkServiceProcessorUpdateRegion{handler: handler}
	self567.processorMap["updateSettings"] = &talkServiceProcessorUpdateSettings{handler: handler}
	self567.processorMap["updateSettings2"] = &talkServiceProcessorUpdateSettings2{handler: handler}
	self567.processorMap["updateSettingsAttribute"] = &talkServiceProcessorUpdateSettingsAttribute{handler: handler}
	self567.processorMap["updateSettingsAttributes"] = &talkServiceProcessorUpdateSettingsAttributes{handler: handler}
	self567.processorMap["verifyIdentityCredential"] = &talkServiceProcessorVerifyIdentityCredential{handler: handler}
	self567.processorMap["verifyIdentityCredentialWithResult"] = &talkServiceProcessorVerifyIdentityCredentialWithResult_{handler: handler}
	self567.processorMap["verifyPhone"] = &talkServiceProcessorVerifyPhone{handler: handler}
	self567.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler: handler}
	return self567
}

func (p *TalkServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x568 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x568.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x568

}

type talkServiceProcessorAcceptGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AcceptGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AcceptGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.AcceptGroupInvitation(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcceptProximityMatches struct {
	handler TalkService
}

func (p *talkServiceProcessorAcceptProximityMatches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AcceptProximityMatchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AcceptProximityMatchesResult{}
	var err2 error
	if err2 = p.handler.AcceptProximityMatches(args.SessionId, args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptProximityMatches: "+err2.Error())
			oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("acceptProximityMatches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireCallRoute struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireCallRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AcquireCallRouteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AcquireCallRouteResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.AcquireCallRoute(args.To); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallRoute: "+err2.Error())
			oprot.WriteMessageBegin("acquireCallRoute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireCallRoute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireCallTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireCallTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AcquireCallTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireCallTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AcquireCallTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AcquireCallTicket(args.To); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallTicket: "+err2.Error())
			oprot.WriteMessageBegin("acquireCallTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("acquireCallTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
	handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AcquireEncryptedAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AcquireEncryptedAccessTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AcquireEncryptedAccessToken(args.FeatureType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: "+err2.Error())
			oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorAddSnsId struct {
	handler TalkService
}

func (p *talkServiceProcessorAddSnsId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddSnsIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSnsId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddSnsIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AddSnsId(args.SnsIdType, args.SnsAccessToken); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSnsId: "+err2.Error())
			oprot.WriteMessageBegin("addSnsId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSnsId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockContactResult{}
	var err2 error
	if err2 = p.handler.BlockContact(args.ReqSeq, args.Id); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: "+err2.Error())
			oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorBlockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockRecommendationResult{}
	var err2 error
	if err2 = p.handler.BlockRecommendation(args.ReqSeq, args.Id); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("blockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCancelGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorCancelGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CancelGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CancelGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.CancelGroupInvitation(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorChangeVerificationMethod struct {
	handler TalkService
}

func (p *talkServiceProcessorChangeVerificationMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeVerificationMethodArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeVerificationMethodResult{}
	var retval *VerificationSessionData
	var err2 error
	if retval, err2 = p.handler.ChangeVerificationMethod(args.SessionId, args.Method); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeVerificationMethod: "+err2.Error())
			oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("changeVerificationMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorClearIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorClearIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClearIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ClearIdentityCredentialResult{}
	var err2 error
	if err2 = p.handler.ClearIdentityCredential(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("clearIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorClearMessageBox struct {
	handler TalkService
}

func (p *talkServiceProcessorClearMessageBox) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ClearMessageBoxArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearMessageBox", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ClearMessageBoxResult{}
	var err2 error
	if err2 = p.handler.ClearMessageBox(args.ChannelId, args.MessageBoxId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearMessageBox: "+err2.Error())
			oprot.WriteMessageBegin("clearMessageBox", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearMessageBox", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCloseProximityMatch struct {
	handler TalkService
}

func (p *talkServiceProcessorCloseProximityMatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloseProximityMatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloseProximityMatchResult{}
	var err2 error
	if err2 = p.handler.CloseProximityMatch(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeProximityMatch: "+err2.Error())
			oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("closeProximityMatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCommitSendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorCommitSendMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommitSendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitSendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CommitSendMessageResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.CommitSendMessage(args.Seq, args.MessageId, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitSendMessage: "+err2.Error())
			oprot.WriteMessageBegin("commitSendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("commitSendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCommitSendMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorCommitSendMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommitSendMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitSendMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CommitSendMessagesResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.CommitSendMessages(args.Seq, args.MessageIds, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitSendMessages: "+err2.Error())
			oprot.WriteMessageBegin("commitSendMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("commitSendMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCommitUpdateProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorCommitUpdateProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommitUpdateProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitUpdateProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CommitUpdateProfileResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.CommitUpdateProfile(args.Seq, args.Attrs, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitUpdateProfile: "+err2.Error())
			oprot.WriteMessageBegin("commitUpdateProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("commitUpdateProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorConfirmEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorConfirmEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ConfirmEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("confirmEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ConfirmEmailResult{}
	var err2 error
	if err2 = p.handler.ConfirmEmail(args.Verifier, args.PinCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmEmail: "+err2.Error())
			oprot.WriteMessageBegin("confirmEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("confirmEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.CreateGroup(args.Seq, args.Name, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: "+err2.Error())
			oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateQrcodeBase64Image struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateQrcodeBase64Image) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateQrcodeBase64ImageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateQrcodeBase64ImageResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateQrcodeBase64Image(args.Url, args.CharacterSet, args.ImageSize, args.X, args.Y, args.Width, args.Height); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createQrcodeBase64Image: "+err2.Error())
			oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createQrcodeBase64Image", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateRoomResult{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.CreateRoom(args.ReqSeq, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoom: "+err2.Error())
			oprot.WriteMessageBegin("createRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorCreateSession struct {
	handler TalkService
}

func (p *talkServiceProcessorCreateSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateSessionResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateSession(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: "+err2.Error())
			oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchAnnouncements struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchAnnouncements) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchAnnouncementsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchAnnouncements", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchAnnouncementsResult{}
	var retval []*Announcement
	var err2 error
	if retval, err2 = p.handler.FetchAnnouncements(args.LastFetchedIndex); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchAnnouncements: "+err2.Error())
			oprot.WriteMessageBegin("fetchAnnouncements", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchAnnouncements", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchMessagesResult{}
	var retval []*Message
	var err2 error
	if retval, err2 = p.handler.FetchMessages(args.LocalTs, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchMessages: "+err2.Error())
			oprot.WriteMessageBegin("fetchMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOperations struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchOperationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchOperationsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOperations(args.LocalRev, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: "+err2.Error())
			oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOperations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFetchOps struct {
	handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchOpsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchOpsResult{}
	var retval []*Operation
	var err2 error
	if retval, err2 = p.handler.FetchOps(args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: "+err2.Error())
			oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchOps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAndAddContactsByEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAndAddContactsByEmailResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByEmail(args.ReqSeq, args.Emails); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByEmail: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAndAddContactsByMidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAndAddContactsByMidResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByMid(args.ReqSeq, args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAndAddContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAndAddContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByPhone(args.ReqSeq, args.Phones); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindAndAddContactsByUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindAndAddContactsByUseridResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindAndAddContactsByUserid(args.ReqSeq, args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: "+err2.Error())
			oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindContactByUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindContactByUseridResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByUserid(args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: "+err2.Error())
			oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindContactByUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindContactByUserTicketResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.FindContactByUserTicket(args.TicketId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactsByEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactsByEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindContactsByEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactsByEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindContactsByEmailResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindContactsByEmail(args.Emails); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByEmail: "+err2.Error())
			oprot.WriteMessageBegin("findContactsByEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactsByEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindContactsByPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindContactsByPhoneResult{}
	var retval map[string]*Contact
	var err2 error
	if retval, err2 = p.handler.FindContactsByPhone(args.Phones); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: "+err2.Error())
			oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFindSnsIdUserStatus struct {
	handler TalkService
}

func (p *talkServiceProcessorFindSnsIdUserStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FindSnsIdUserStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FindSnsIdUserStatusResult{}
	var retval *SnsIdUserStatus
	var err2 error
	if retval, err2 = p.handler.FindSnsIdUserStatus(args.SnsIdType, args.SnsAccessToken, args.UdidHash); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findSnsIdUserStatus: "+err2.Error())
			oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorFinishUpdateVerification struct {
	handler TalkService
}

func (p *talkServiceProcessorFinishUpdateVerification) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FinishUpdateVerificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FinishUpdateVerificationResult{}
	var err2 error
	if err2 = p.handler.FinishUpdateVerification(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishUpdateVerification: "+err2.Error())
			oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("finishUpdateVerification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GenerateUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GenerateUserTicketResult{}
	var retval *Ticket
	var err2 error
	if retval, err2 = p.handler.GenerateUserTicket(args.ExpirationTime, args.MaxUseCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("generateUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAcceptedProximityMatchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAcceptedProximityMatchesResult{}
	var retval map[string]bool
	var err2 error
	if retval, err2 = p.handler.GetAcceptedProximityMatches(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: "+err2.Error())
			oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetActiveBuddySubscriberIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetActiveBuddySubscriberIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetActiveBuddySubscriberIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActiveBuddySubscriberIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetActiveBuddySubscriberIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetActiveBuddySubscriberIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActiveBuddySubscriberIds: "+err2.Error())
			oprot.WriteMessageBegin("getActiveBuddySubscriberIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActiveBuddySubscriberIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAllContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllContactIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetAuthQrcode struct {
	handler TalkService
}

func (p *talkServiceProcessorGetAuthQrcode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAuthQrcodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAuthQrcodeResult{}
	var retval *AuthQrcode
	var err2 error
	if retval, err2 = p.handler.GetAuthQrcode(args.KeepLoggedIn, args.SystemName); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAuthQrcode: "+err2.Error())
			oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAuthQrcode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBlockedContactIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBlockedContactIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedContactIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedContactIdsByRange struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIdsByRange) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBlockedContactIdsByRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBlockedContactIdsByRangeResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedContactIdsByRange(args.Start, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIdsByRange: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedContactIdsByRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBlockedRecommendationIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBlockedRecommendationIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBlockedRecommendationIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: "+err2.Error())
			oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBuddyBlockerIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBuddyBlockerIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBuddyBlockerIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBuddyBlockerIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBuddyBlockerIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetBuddyBlockerIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyBlockerIds: "+err2.Error())
			oprot.WriteMessageBegin("getBuddyBlockerIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBuddyBlockerIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetBuddyLocation struct {
	handler TalkService
}

func (p *talkServiceProcessorGetBuddyLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBuddyLocationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBuddyLocation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBuddyLocationResult{}
	var retval *Geolocation
	var err2 error
	if retval, err2 = p.handler.GetBuddyLocation(args.Mid, args.Index); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyLocation: "+err2.Error())
			oprot.WriteMessageBegin("getBuddyLocation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBuddyLocation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCompactContactsModifiedSince struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCompactContactsModifiedSince) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCompactContactsModifiedSinceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCompactContactsModifiedSince", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCompactContactsModifiedSinceResult{}
	var retval []*CompactContact
	var err2 error
	if retval, err2 = p.handler.GetCompactContactsModifiedSince(args.Timestamp); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactContactsModifiedSince: "+err2.Error())
			oprot.WriteMessageBegin("getCompactContactsModifiedSince", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCompactContactsModifiedSince", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCompactGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCompactGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCompactGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCompactGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetCompactGroup(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactGroup: "+err2.Error())
			oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCompactGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCompactRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCompactRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCompactRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCompactRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCompactRoomResult{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.GetCompactRoom(args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactRoom: "+err2.Error())
			oprot.WriteMessageBegin("getCompactRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCompactRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContact struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetContactResult{}
	var retval *Contact
	var err2 error
	if retval, err2 = p.handler.GetContact(args.Id); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: "+err2.Error())
			oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetContacts struct {
	handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetContactsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetContactsResult{}
	var retval []*Contact
	var err2 error
	if retval, err2 = p.handler.GetContacts(args.Ids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: "+err2.Error())
			oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getContacts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
	handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCountryWithRequestIpArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCountryWithRequestIpResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCountryWithRequestIp(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: "+err2.Error())
			oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetFavoriteMids struct {
	handler TalkService
}

func (p *talkServiceProcessorGetFavoriteMids) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetFavoriteMidsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFavoriteMids", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetFavoriteMidsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetFavoriteMids(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFavoriteMids: "+err2.Error())
			oprot.WriteMessageBegin("getFavoriteMids", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFavoriteMids", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetGroupResult{}
	var retval *Group
	var err2 error
	if retval, err2 = p.handler.GetGroup(args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: "+err2.Error())
			oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsInvited struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsInvited) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetGroupIdsInvitedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetGroupIdsInvitedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsInvited(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroupIdsJoined struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroupIdsJoined) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetGroupIdsJoinedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetGroupIdsJoinedResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetGroupIdsJoined(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined: "+err2.Error())
			oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetGroups struct {
	handler TalkService
}

func (p *talkServiceProcessorGetGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetGroupsResult{}
	var retval []*Group
	var err2 error
	if retval, err2 = p.handler.GetGroups(args.GroupIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroups: "+err2.Error())
			oprot.WriteMessageBegin("getGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetHiddenContactMids struct {
	handler TalkService
}

func (p *talkServiceProcessorGetHiddenContactMids) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetHiddenContactMidsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getHiddenContactMids", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetHiddenContactMidsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetHiddenContactMids(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getHiddenContactMids: "+err2.Error())
			oprot.WriteMessageBegin("getHiddenContactMids", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getHiddenContactMids", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetIdentityIdentifier struct {
	handler TalkService
}

func (p *talkServiceProcessorGetIdentityIdentifier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIdentityIdentifierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getIdentityIdentifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIdentityIdentifierResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetIdentityIdentifier(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIdentityIdentifier: "+err2.Error())
			oprot.WriteMessageBegin("getIdentityIdentifier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getIdentityIdentifier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetLastAnnouncementIndex struct {
	handler TalkService
}

func (p *talkServiceProcessorGetLastAnnouncementIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetLastAnnouncementIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastAnnouncementIndex", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetLastAnnouncementIndexResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetLastAnnouncementIndex(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastAnnouncementIndex: "+err2.Error())
			oprot.WriteMessageBegin("getLastAnnouncementIndex", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getLastAnnouncementIndex", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
	handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetLastOpRevisionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetLastOpRevisionResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetLastOpRevision(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: "+err2.Error())
			oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBox struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBox) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBox", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxResult{}
	var retval *TMessageBox
	var err2 error
	if retval, err2 = p.handler.GetMessageBox(args.ChannelId, args.MessageBoxId, args.LastMessagesCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBox: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBox", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBox", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxCompactWrapUp struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxCompactWrapUp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxCompactWrapUpArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxCompactWrapUp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxCompactWrapUpResult{}
	var retval *TMessageBoxWrapUp
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxCompactWrapUp(args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUp: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxCompactWrapUp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxCompactWrapUp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxCompactWrapUpList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxCompactWrapUpList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxCompactWrapUpListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxCompactWrapUpList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxCompactWrapUpListResult{}
	var retval *TMessageBoxWrapUpResponse
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxCompactWrapUpList(args.Start, args.MessageBoxCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUpList: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxCompactWrapUpList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxCompactWrapUpList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxListResult{}
	var retval []*TMessageBox
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxList(args.ChannelId, args.LastMessagesCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxList: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxListByStatus struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxListByStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxListByStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxListByStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxListByStatusResult{}
	var retval []*TMessageBox
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxListByStatus(args.ChannelId, args.LastMessagesCount, args.Status); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxListByStatus: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxListByStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxListByStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxWrapUp struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxWrapUp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxWrapUpArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxWrapUp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxWrapUpResult{}
	var retval *TMessageBoxWrapUp
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxWrapUp(args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUp: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxWrapUp", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxWrapUp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessageBoxWrapUpList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxWrapUpList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageBoxWrapUpListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessageBoxWrapUpList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageBoxWrapUpListResult{}
	var retval *TMessageBoxWrapUpResponse
	var err2 error
	if retval, err2 = p.handler.GetMessageBoxWrapUpList(args.Start, args.MessageBoxCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUpList: "+err2.Error())
			oprot.WriteMessageBegin("getMessageBoxWrapUpList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessageBoxWrapUpList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetMessagesBySequenceNumber struct {
	handler TalkService
}

func (p *talkServiceProcessorGetMessagesBySequenceNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessagesBySequenceNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessagesBySequenceNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessagesBySequenceNumberResult{}
	var retval []*Message
	var err2 error
	if retval, err2 = p.handler.GetMessagesBySequenceNumber(args.ChannelId, args.MessageBoxId, args.StartSeq, args.EndSeq); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessagesBySequenceNumber: "+err2.Error())
			oprot.WriteMessageBegin("getMessagesBySequenceNumber", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessagesBySequenceNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetNextMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorGetNextMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetNextMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNextMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetNextMessagesResult{}
	var retval []*Message
	var err2 error
	if retval, err2 = p.handler.GetNextMessages(args.MessageBoxId, args.StartSeq, args.MessagesCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNextMessages: "+err2.Error())
			oprot.WriteMessageBegin("getNextMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNextMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetNotificationPolicy struct {
	handler TalkService
}

func (p *talkServiceProcessorGetNotificationPolicy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetNotificationPolicyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNotificationPolicy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetNotificationPolicyResult{}
	var retval []NotificationType
	var err2 error
	if retval, err2 = p.handler.GetNotificationPolicy(args.Carrier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNotificationPolicy: "+err2.Error())
			oprot.WriteMessageBegin("getNotificationPolicy", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNotificationPolicy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetPreviousMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorGetPreviousMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPreviousMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPreviousMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPreviousMessagesResult{}
	var retval []*Message
	var err2 error
	if retval, err2 = p.handler.GetPreviousMessages(args.MessageBoxId, args.EndSeq, args.MessagesCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPreviousMessages: "+err2.Error())
			oprot.WriteMessageBegin("getPreviousMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPreviousMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProfileResult{}
	var retval *Profile
	var err2 error
	if retval, err2 = p.handler.GetProfile(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: "+err2.Error())
			oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProximityMatchCandidateList struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProximityMatchCandidateList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProximityMatchCandidateListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProximityMatchCandidateListResult{}
	var retval *ProximityMatchCandidateResult_
	var err2 error
	if retval, err2 = p.handler.GetProximityMatchCandidateList(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList: "+err2.Error())
			oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetProximityMatchCandidates struct {
	handler TalkService
}

func (p *talkServiceProcessorGetProximityMatchCandidates) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProximityMatchCandidatesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProximityMatchCandidates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProximityMatchCandidatesResult{}
	var retval map[*Contact]bool
	var err2 error
	if retval, err2 = p.handler.GetProximityMatchCandidates(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidates: "+err2.Error())
			oprot.WriteMessageBegin("getProximityMatchCandidates", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProximityMatchCandidates", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRecentMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRecentMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRecentMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecentMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRecentMessagesResult{}
	var retval []*Message
	var err2 error
	if retval, err2 = p.handler.GetRecentMessages(args.MessageBoxId, args.MessagesCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentMessages: "+err2.Error())
			oprot.WriteMessageBegin("getRecentMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRecentMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRecommendationIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRecommendationIdsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRecommendationIds(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: "+err2.Error())
			oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRoomResult{}
	var retval *Room
	var err2 error
	if retval, err2 = p.handler.GetRoom(args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoom: "+err2.Error())
			oprot.WriteMessageBegin("getRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetRSAKeyInfo struct {
	handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRSAKeyInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRSAKeyInfoResult{}
	var retval *RSAKey
	var err2 error
	if retval, err2 = p.handler.GetRSAKeyInfo(args.Provider); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: "+err2.Error())
			oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetServerTime struct {
	handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetServerTimeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetServerTimeResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetServerTime(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: "+err2.Error())
			oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getServerTime", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSessions struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSessions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSessionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSessions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSessionsResult{}
	var retval []*LoginSession
	var err2 error
	if retval, err2 = p.handler.GetSessions(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSessions: "+err2.Error())
			oprot.WriteMessageBegin("getSessions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSessions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSettingsResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettings(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: "+err2.Error())
			oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSettingsAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSettingsAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSettingsAttributesResult{}
	var retval *Settings
	var err2 error
	if retval, err2 = p.handler.GetSettingsAttributes(args.AttrBitset); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes: "+err2.Error())
			oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetSystemConfiguration struct {
	handler TalkService
}

func (p *talkServiceProcessorGetSystemConfiguration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSystemConfigurationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSystemConfiguration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSystemConfigurationResult{}
	var retval *SystemConfiguration
	var err2 error
	if retval, err2 = p.handler.GetSystemConfiguration(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSystemConfiguration: "+err2.Error())
			oprot.WriteMessageBegin("getSystemConfiguration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSystemConfiguration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorGetUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetUserTicketResult{}
	var retval *Ticket
	var err2 error
	if retval, err2 = p.handler.GetUserTicket(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("getUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorGetWapInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorGetWapInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetWapInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getWapInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetWapInvitationResult{}
	var retval *WapInvitation
	var err2 error
	if retval, err2 = p.handler.GetWapInvitation(args.InvitationHash); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWapInvitation: "+err2.Error())
			oprot.WriteMessageBegin("getWapInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getWapInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInvalidateUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorInvalidateUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InvalidateUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("invalidateUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InvalidateUserTicketResult{}
	var err2 error
	if err2 = p.handler.InvalidateUserTicket(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidateUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("invalidateUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("invalidateUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteFriendsBySms struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteFriendsBySms) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InviteFriendsBySmsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteFriendsBySms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InviteFriendsBySmsResult{}
	var err2 error
	if err2 = p.handler.InviteFriendsBySms(args.PhoneNumberList); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms: "+err2.Error())
			oprot.WriteMessageBegin("inviteFriendsBySms", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteFriendsBySms", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InviteIntoGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InviteIntoGroupResult{}
	var err2 error
	if err2 = p.handler.InviteIntoGroup(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroup: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InviteIntoRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InviteIntoRoomResult{}
	var err2 error
	if err2 = p.handler.InviteIntoRoom(args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: "+err2.Error())
			oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorInviteViaEmail struct {
	handler TalkService
}

func (p *talkServiceProcessorInviteViaEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := InviteViaEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("inviteViaEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := InviteViaEmailResult{}
	var err2 error
	if err2 = p.handler.InviteViaEmail(args.ReqSeq, args.Email, args.Name); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteViaEmail: "+err2.Error())
			oprot.WriteMessageBegin("inviteViaEmail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("inviteViaEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorIsIdentityIdentifierAvailable struct {
	handler TalkService
}

func (p *talkServiceProcessorIsIdentityIdentifierAvailable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsIdentityIdentifierAvailableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isIdentityIdentifierAvailable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsIdentityIdentifierAvailableResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsIdentityIdentifierAvailable(args.Provider, args.Identifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isIdentityIdentifierAvailable: "+err2.Error())
			oprot.WriteMessageBegin("isIdentityIdentifierAvailable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isIdentityIdentifierAvailable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorIsUseridAvailable struct {
	handler TalkService
}

func (p *talkServiceProcessorIsUseridAvailable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IsUseridAvailableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IsUseridAvailableResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsUseridAvailable(args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUseridAvailable: "+err2.Error())
			oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isUseridAvailable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorKickoutFromGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorKickoutFromGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KickoutFromGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KickoutFromGroupResult{}
	var err2 error
	if err2 = p.handler.KickoutFromGroup(args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickoutFromGroup: "+err2.Error())
			oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("kickoutFromGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LeaveGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LeaveGroupResult{}
	var err2 error
	if err2 = p.handler.LeaveGroup(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveGroup: "+err2.Error())
			oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLeaveRoom struct {
	handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LeaveRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LeaveRoomResult{}
	var err2 error
	if err2 = p.handler.LeaveRoom(args.ReqSeq, args.RoomId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: "+err2.Error())
			oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("leaveRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LoginWithIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LoginWithIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.LoginWithIdentityCredential(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithIdentityCredentialForCertificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithIdentityCredentialForCertificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LoginWithIdentityCredentialForCertificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LoginWithIdentityCredentialForCertificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithIdentityCredentialForCertificate(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredentialForCertificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithIdentityCredentialForCertificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifier struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LoginWithVerifierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LoginWithVerifierResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifier(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifier: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifierForCerificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifierForCerificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LoginWithVerifierForCerificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LoginWithVerifierForCerificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifierForCerificate(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCerificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifierForCerificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLoginWithVerifierForCertificate struct {
	handler TalkService
}

func (p *talkServiceProcessorLoginWithVerifierForCertificate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LoginWithVerifierForCertificateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LoginWithVerifierForCertificateResult{}
	var retval *LoginResult_
	var err2 error
	if retval, err2 = p.handler.LoginWithVerifierForCertificate(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCertificate: "+err2.Error())
			oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loginWithVerifierForCertificate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLogout struct {
	handler TalkService
}

func (p *talkServiceProcessorLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LogoutResult{}
	var err2 error
	if err2 = p.handler.Logout(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logout: "+err2.Error())
			oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("logout", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorLogoutSession struct {
	handler TalkService
}

func (p *talkServiceProcessorLogoutSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogoutSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("logoutSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LogoutSessionResult{}
	var err2 error
	if err2 = p.handler.LogoutSession(args.TokenKey); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logoutSession: "+err2.Error())
			oprot.WriteMessageBegin("logoutSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("logoutSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNoop struct {
	handler TalkService
}

func (p *talkServiceProcessorNoop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoopResult{}
	var err2 error
	if err2 = p.handler.Noop(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: "+err2.Error())
			oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("noop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifiedRedirect struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifiedRedirect) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifiedRedirectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifiedRedirect", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifiedRedirectResult{}
	var err2 error
	if err2 = p.handler.NotifiedRedirect(args.ParamMap); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifiedRedirect: "+err2.Error())
			oprot.WriteMessageBegin("notifiedRedirect", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifiedRedirect", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyBuddyOnAir struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyBuddyOnAir) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyBuddyOnAirArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyBuddyOnAir", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyBuddyOnAirResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.NotifyBuddyOnAir(args.Seq, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyBuddyOnAir: "+err2.Error())
			oprot.WriteMessageBegin("notifyBuddyOnAir", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("notifyBuddyOnAir", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyIndividualEvent struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyIndividualEvent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyIndividualEventArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyIndividualEvent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyIndividualEventResult{}
	var err2 error
	if err2 = p.handler.NotifyIndividualEvent(args.NotificationStatus, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyIndividualEvent: "+err2.Error())
			oprot.WriteMessageBegin("notifyIndividualEvent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifyIndividualEvent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyInstalled struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyInstalled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyInstalledArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyInstalled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyInstalledResult{}
	var err2 error
	if err2 = p.handler.NotifyInstalled(args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyInstalled: "+err2.Error())
		oprot.WriteMessageBegin("notifyInstalled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("notifyInstalled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyRegistrationComplete struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyRegistrationComplete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyRegistrationCompleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyRegistrationCompleteResult{}
	var err2 error
	if err2 = p.handler.NotifyRegistrationComplete(args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete: "+err2.Error())
		oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifySleep struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifySleep) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifySleepArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifySleepResult{}
	var err2 error
	if err2 = p.handler.NotifySleep(args.LastRev, args.Badge); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifySleep: "+err2.Error())
			oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifySleep", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorNotifyUpdated struct {
	handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyUpdatedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyUpdatedResult{}
	var err2 error
	if err2 = p.handler.NotifyUpdated(args.LastRev, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: "+err2.Error())
			oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("notifyUpdated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorOpenProximityMatch struct {
	handler TalkService
}

func (p *talkServiceProcessorOpenProximityMatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OpenProximityMatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("openProximityMatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := OpenProximityMatchResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.OpenProximityMatch(args.Location); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openProximityMatch: "+err2.Error())
			oprot.WriteMessageBegin("openProximityMatch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("openProximityMatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterBuddyUser struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterBuddyUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterBuddyUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerBuddyUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterBuddyUserResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterBuddyUser(args.BuddyId, args.RegistrarPassword); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerBuddyUser: "+err2.Error())
			oprot.WriteMessageBegin("registerBuddyUser", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerBuddyUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterBuddyUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterBuddyUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterBuddyUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerBuddyUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterBuddyUseridResult{}
	var err2 error
	if err2 = p.handler.RegisterBuddyUserid(args.Seq, args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerBuddyUserid: "+err2.Error())
			oprot.WriteMessageBegin("registerBuddyUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("registerBuddyUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterDevice struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterDeviceResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterDevice(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDevice: "+err2.Error())
			oprot.WriteMessageBegin("registerDevice", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterDeviceWithIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterDeviceWithIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterDeviceWithIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterDeviceWithIdentityCredential(args.SessionId, args.Provider, args.Identifier, args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterDeviceWithoutPhoneNumber struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithoutPhoneNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterDeviceWithoutPhoneNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterDeviceWithoutPhoneNumberResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterDeviceWithoutPhoneNumber(args.Region, args.UdidHash, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumber: "+err2.Error())
			oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumber", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterDeviceWithoutPhoneNumberWithIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithoutPhoneNumberWithIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterDeviceWithoutPhoneNumberWithIdentityCredential(args.Region, args.UdidHash, args.DeviceInfo, args.Provider, args.Identifier, args.Verifier, args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumberWithIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterUserid struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterUserid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterUseridArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterUseridResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RegisterUserid(args.ReqSeq, args.Userid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserid: "+err2.Error())
			oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerUserid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWapDevice struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWapDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterWapDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWapDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterWapDeviceResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterWapDevice(args.InvitationHash, args.GuidHash, args.Email, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWapDevice: "+err2.Error())
			oprot.WriteMessageBegin("registerWapDevice", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerWapDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithExistingSnsIdAndIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithExistingSnsIdAndIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterWithExistingSnsIdAndIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithExistingSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterWithExistingSnsIdAndIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterWithExistingSnsIdAndIdentityCredential(args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithExistingSnsIdAndIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerWithExistingSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithExistingSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithSnsId struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterWithSnsIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterWithSnsIdResult{}
	var retval *RegisterWithSnsIdResult_
	var err2 error
	if retval, err2 = p.handler.RegisterWithSnsId(args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsId: "+err2.Error())
			oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithSnsId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRegisterWithSnsIdAndIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsIdAndIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterWithSnsIdAndIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterWithSnsIdAndIdentityCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RegisterWithSnsIdAndIdentityCredential(args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueDeviceCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueDeviceCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReissueDeviceCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueDeviceCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReissueDeviceCredentialResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ReissueDeviceCredential(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueDeviceCredential: "+err2.Error())
			oprot.WriteMessageBegin("reissueDeviceCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reissueDeviceCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReissueUserTicket struct {
	handler TalkService
}

func (p *talkServiceProcessorReissueUserTicket) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReissueUserTicketArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reissueUserTicket", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReissueUserTicketResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ReissueUserTicket(args.ExpirationTime, args.MaxUseCount); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueUserTicket: "+err2.Error())
			oprot.WriteMessageBegin("reissueUserTicket", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reissueUserTicket", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRejectGroupInvitation struct {
	handler TalkService
}

func (p *talkServiceProcessorRejectGroupInvitation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RejectGroupInvitationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RejectGroupInvitationResult{}
	var err2 error
	if err2 = p.handler.RejectGroupInvitation(args.ReqSeq, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation: "+err2.Error())
			oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReleaseSession struct {
	handler TalkService
}

func (p *talkServiceProcessorReleaseSession) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReleaseSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("releaseSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReleaseSessionResult{}
	var err2 error
	if err2 = p.handler.ReleaseSession(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing releaseSession: "+err2.Error())
			oprot.WriteMessageBegin("releaseSession", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("releaseSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveAllMessagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveAllMessagesResult{}
	var err2 error
	if err2 = p.handler.RemoveAllMessages(args.Seq, args.LastMessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: "+err2.Error())
			oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeAllMessages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveBuddyLocation struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveBuddyLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveBuddyLocationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeBuddyLocation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveBuddyLocationResult{}
	var err2 error
	if err2 = p.handler.RemoveBuddyLocation(args.Mid, args.Index); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeBuddyLocation: "+err2.Error())
			oprot.WriteMessageBegin("removeBuddyLocation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeBuddyLocation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveMessageResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RemoveMessage(args.MessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeMessage: "+err2.Error())
			oprot.WriteMessageBegin("removeMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveMessageFromMyHome struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveMessageFromMyHome) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveMessageFromMyHomeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeMessageFromMyHome", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveMessageFromMyHomeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RemoveMessageFromMyHome(args.MessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeMessageFromMyHome: "+err2.Error())
			oprot.WriteMessageBegin("removeMessageFromMyHome", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeMessageFromMyHome", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRemoveSnsId struct {
	handler TalkService
}

func (p *talkServiceProcessorRemoveSnsId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RemoveSnsIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeSnsId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RemoveSnsIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RemoveSnsId(args.SnsIdType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSnsId: "+err2.Error())
			oprot.WriteMessageBegin("removeSnsId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeSnsId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReport struct {
	handler TalkService
}

func (p *talkServiceProcessorReport) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportResult{}
	var err2 error
	if err2 = p.handler.Report(args.SyncOpRevision, args.Category, args.Report); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report: "+err2.Error())
			oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("report", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportContacts struct {
	handler TalkService
}

func (p *talkServiceProcessorReportContacts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportContactsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportContacts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportContactsResult{}
	var retval []*ContactReportResult_
	var err2 error
	if retval, err2 = p.handler.ReportContacts(args.SyncOpRevision, args.Category, args.ContactReports, args.ActionType); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportContacts: "+err2.Error())
			oprot.WriteMessageBegin("reportContacts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reportContacts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportGroups struct {
	handler TalkService
}

func (p *talkServiceProcessorReportGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportGroupsResult{}
	var err2 error
	if err2 = p.handler.ReportGroups(args.SyncOpRevision, args.Groups); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportGroups: "+err2.Error())
			oprot.WriteMessageBegin("reportGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorReportProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportProfileResult{}
	var err2 error
	if err2 = p.handler.ReportProfile(args.SyncOpRevision, args.Profile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportProfile: "+err2.Error())
			oprot.WriteMessageBegin("reportProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportRooms struct {
	handler TalkService
}

func (p *talkServiceProcessorReportRooms) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportRoomsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportRooms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportRoomsResult{}
	var err2 error
	if err2 = p.handler.ReportRooms(args.SyncOpRevision, args.Rooms); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportRooms: "+err2.Error())
			oprot.WriteMessageBegin("reportRooms", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportRooms", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorReportSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportSettingsResult{}
	var err2 error
	if err2 = p.handler.ReportSettings(args.SyncOpRevision, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportSettings: "+err2.Error())
			oprot.WriteMessageBegin("reportSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorReportSpammer struct {
	handler TalkService
}

func (p *talkServiceProcessorReportSpammer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportSpammerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportSpammer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReportSpammerResult{}
	var err2 error
	if err2 = p.handler.ReportSpammer(args.SpammerMid, args.SpammerReasons, args.SpamMessageIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportSpammer: "+err2.Error())
			oprot.WriteMessageBegin("reportSpammer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportSpammer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
	handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RequestAccountPasswordResetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RequestAccountPasswordResetResult{}
	var err2 error
	if err2 = p.handler.RequestAccountPasswordReset(args.Provider, args.Identifier, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: "+err2.Error())
			oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRequestEmailConfirmation struct {
	handler TalkService
}

func (p *talkServiceProcessorRequestEmailConfirmation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RequestEmailConfirmationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestEmailConfirmation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RequestEmailConfirmationResult{}
	var retval *EmailConfirmationSession
	var err2 error
	if retval, err2 = p.handler.RequestEmailConfirmation(args.EmailConfirmation); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestEmailConfirmation: "+err2.Error())
			oprot.WriteMessageBegin("requestEmailConfirmation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("requestEmailConfirmation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorRequestIdentityUnbind struct {
	handler TalkService
}

func (p *talkServiceProcessorRequestIdentityUnbind) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RequestIdentityUnbindArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestIdentityUnbind", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RequestIdentityUnbindResult{}
	var err2 error
	if err2 = p.handler.RequestIdentityUnbind(args.Provider, args.Identifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestIdentityUnbind: "+err2.Error())
			oprot.WriteMessageBegin("requestIdentityUnbind", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("requestIdentityUnbind", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorResendEmailConfirmation struct {
	handler TalkService
}

func (p *talkServiceProcessorResendEmailConfirmation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResendEmailConfirmationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("resendEmailConfirmation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ResendEmailConfirmationResult{}
	var retval *EmailConfirmationSession
	var err2 error
	if retval, err2 = p.handler.ResendEmailConfirmation(args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendEmailConfirmation: "+err2.Error())
			oprot.WriteMessageBegin("resendEmailConfirmation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("resendEmailConfirmation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorResendPinCode struct {
	handler TalkService
}

func (p *talkServiceProcessorResendPinCode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResendPinCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("resendPinCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ResendPinCodeResult{}
	var err2 error
	if err2 = p.handler.ResendPinCode(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendPinCode: "+err2.Error())
			oprot.WriteMessageBegin("resendPinCode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("resendPinCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorResendPinCodeBySMS struct {
	handler TalkService
}

func (p *talkServiceProcessorResendPinCodeBySMS) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResendPinCodeBySMSArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("resendPinCodeBySMS", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ResendPinCodeBySMSResult{}
	var err2 error
	if err2 = p.handler.ResendPinCodeBySMS(args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendPinCodeBySMS: "+err2.Error())
			oprot.WriteMessageBegin("resendPinCodeBySMS", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("resendPinCodeBySMS", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatChecked struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendChatCheckedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendChatCheckedResult{}
	var err2 error
	if err2 = p.handler.SendChatChecked(args.Seq, args.Consumer, args.LastMessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: "+err2.Error())
			oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatChecked", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendChatRemoved struct {
	handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendChatRemovedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendChatRemovedResult{}
	var err2 error
	if err2 = p.handler.SendChatRemoved(args.Seq, args.Consumer, args.LastMessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: "+err2.Error())
			oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendContentPreviewUpdated struct {
	handler TalkService
}

func (p *talkServiceProcessorSendContentPreviewUpdated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendContentPreviewUpdatedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendContentPreviewUpdated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendContentPreviewUpdatedResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.SendContentPreviewUpdated(args.Esq, args.MessageId, args.ReceiverMids); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendContentPreviewUpdated: "+err2.Error())
			oprot.WriteMessageBegin("sendContentPreviewUpdated", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendContentPreviewUpdated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendContentReceipt struct {
	handler TalkService
}

func (p *talkServiceProcessorSendContentReceipt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendContentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendContentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendContentReceiptResult{}
	var err2 error
	if err2 = p.handler.SendContentReceipt(args.Seq, args.Consumer, args.MessageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendContentReceipt: "+err2.Error())
			oprot.WriteMessageBegin("sendContentReceipt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendContentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendDummyPush struct {
	handler TalkService
}

func (p *talkServiceProcessorSendDummyPush) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendDummyPushArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendDummyPush", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendDummyPushResult{}
	var err2 error
	if err2 = p.handler.SendDummyPush(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendDummyPush: "+err2.Error())
			oprot.WriteMessageBegin("sendDummyPush", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendDummyPush", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendEvent struct {
	handler TalkService
}

func (p *talkServiceProcessorSendEvent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendEventArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendEvent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendEventResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendEvent(args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEvent: "+err2.Error())
			oprot.WriteMessageBegin("sendEvent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendEvent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendMessage(args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: "+err2.Error())
			oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessageIgnored struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessageIgnored) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageIgnoredArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageIgnored", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageIgnoredResult{}
	var err2 error
	if err2 = p.handler.SendMessageIgnored(args.Seq, args.Consumer, args.MessageIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageIgnored: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageIgnored", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendMessageIgnored", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessageReceipt struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessageReceipt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageReceiptResult{}
	var err2 error
	if err2 = p.handler.SendMessageReceipt(args.Seq, args.Consumer, args.MessageIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageReceipt: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageReceipt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("sendMessageReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSendMessageToMyHome struct {
	handler TalkService
}

func (p *talkServiceProcessorSendMessageToMyHome) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMessageToMyHomeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageToMyHome", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMessageToMyHomeResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.SendMessageToMyHome(args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageToMyHome: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageToMyHome", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessageToMyHome", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSetBuddyLocation struct {
	handler TalkService
}

func (p *talkServiceProcessorSetBuddyLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetBuddyLocationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setBuddyLocation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetBuddyLocationResult{}
	var err2 error
	if err2 = p.handler.SetBuddyLocation(args.Mid, args.Index, args.Location); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setBuddyLocation: "+err2.Error())
			oprot.WriteMessageBegin("setBuddyLocation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setBuddyLocation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSetIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorSetIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetIdentityCredentialResult{}
	var err2 error
	if err2 = p.handler.SetIdentityCredential(args.Provider, args.Identifier, args.Verifier); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("setIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSetNotificationsEnabled struct {
	handler TalkService
}

func (p *talkServiceProcessorSetNotificationsEnabled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetNotificationsEnabledArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setNotificationsEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetNotificationsEnabledResult{}
	var err2 error
	if err2 = p.handler.SetNotificationsEnabled(args.ReqSeq, args.TypeA1, args.Target, args.Enablement); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled: "+err2.Error())
			oprot.WriteMessageBegin("setNotificationsEnabled", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setNotificationsEnabled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorStartUpdateVerification struct {
	handler TalkService
}

func (p *talkServiceProcessorStartUpdateVerification) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StartUpdateVerificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("startUpdateVerification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StartUpdateVerificationResult{}
	var retval *VerificationSessionData
	var err2 error
	if retval, err2 = p.handler.StartUpdateVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startUpdateVerification: "+err2.Error())
			oprot.WriteMessageBegin("startUpdateVerification", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("startUpdateVerification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorStartVerification struct {
	handler TalkService
}

func (p *talkServiceProcessorStartVerification) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StartVerificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("startVerification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StartVerificationResult{}
	var retval *VerificationSessionData
	var err2 error
	if retval, err2 = p.handler.StartVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Mid, args.Locale); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startVerification: "+err2.Error())
			oprot.WriteMessageBegin("startVerification", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("startVerification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorStoreUpdateProfileAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorStoreUpdateProfileAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StoreUpdateProfileAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("storeUpdateProfileAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := StoreUpdateProfileAttributeResult{}
	var err2 error
	if err2 = p.handler.StoreUpdateProfileAttribute(args.Seq, args.ProfileAttribute, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeUpdateProfileAttribute: "+err2.Error())
			oprot.WriteMessageBegin("storeUpdateProfileAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("storeUpdateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSyncContactBySnsIds struct {
	handler TalkService
}

func (p *talkServiceProcessorSyncContactBySnsIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SyncContactBySnsIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncContactBySnsIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SyncContactBySnsIdsResult{}
	var retval []*SnsFriendContactRegistration
	var err2 error
	if retval, err2 = p.handler.SyncContactBySnsIds(args.ReqSeq, args.Modifications); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncContactBySnsIds: "+err2.Error())
			oprot.WriteMessageBegin("syncContactBySnsIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("syncContactBySnsIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorSyncContacts struct {
	handler TalkService
}

func (p *talkServiceProcessorSyncContacts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SyncContactsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncContacts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SyncContactsResult{}
	var retval map[string]*ContactRegistration
	var err2 error
	if retval, err2 = p.handler.SyncContacts(args.ReqSeq, args.LocalContacts); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncContacts: "+err2.Error())
			oprot.WriteMessageBegin("syncContacts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("syncContacts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorTrySendMessage struct {
	handler TalkService
}

func (p *talkServiceProcessorTrySendMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TrySendMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("trySendMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TrySendMessageResult{}
	var retval *Message
	var err2 error
	if retval, err2 = p.handler.TrySendMessage(args.Seq, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing trySendMessage: "+err2.Error())
			oprot.WriteMessageBegin("trySendMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("trySendMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockContact struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UnblockContactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UnblockContactResult{}
	var err2 error
	if err2 = p.handler.UnblockContact(args.ReqSeq, args.Id); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: "+err2.Error())
			oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockContact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
	handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UnblockRecommendationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UnblockRecommendationResult{}
	var err2 error
	if err2 = p.handler.UnblockRecommendation(args.ReqSeq, args.Id); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: "+err2.Error())
			oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUnregisterUserAndDevice struct {
	handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UnregisterUserAndDeviceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UnregisterUserAndDeviceResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UnregisterUserAndDevice(); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: "+err2.Error())
			oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateApnsDeviceToken struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateApnsDeviceToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateApnsDeviceTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateApnsDeviceToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateApnsDeviceTokenResult{}
	var err2 error
	if err2 = p.handler.UpdateApnsDeviceToken(args.ApnsDeviceToken); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateApnsDeviceToken: "+err2.Error())
			oprot.WriteMessageBegin("updateApnsDeviceToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateApnsDeviceToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateBuddySetting struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateBuddySetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateBuddySettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateBuddySetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateBuddySettingResult{}
	var err2 error
	if err2 = p.handler.UpdateBuddySetting(args.Key, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateBuddySetting: "+err2.Error())
			oprot.WriteMessageBegin("updateBuddySetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateBuddySetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateC2DMRegistrationId struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateC2DMRegistrationId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateC2DMRegistrationIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateC2DMRegistrationId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateC2DMRegistrationIdResult{}
	var err2 error
	if err2 = p.handler.UpdateC2DMRegistrationId(args.RegistrationId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateC2DMRegistrationId: "+err2.Error())
			oprot.WriteMessageBegin("updateC2DMRegistrationId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateC2DMRegistrationId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateContactSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateContactSettingResult{}
	var err2 error
	if err2 = p.handler.UpdateContactSetting(args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: "+err2.Error())
			oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateContactSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateCustomModeSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateCustomModeSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateCustomModeSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateCustomModeSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateCustomModeSettingsResult{}
	var err2 error
	if err2 = p.handler.UpdateCustomModeSettings(args.CustomMode, args.ParamMap); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateCustomModeSettings: "+err2.Error())
			oprot.WriteMessageBegin("updateCustomModeSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateCustomModeSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateDeviceInfo struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateDeviceInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateDeviceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDeviceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateDeviceInfoResult{}
	var err2 error
	if err2 = p.handler.UpdateDeviceInfo(args.DeviceUid, args.DeviceInfo); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDeviceInfo: "+err2.Error())
			oprot.WriteMessageBegin("updateDeviceInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateDeviceInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateGroup struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateGroupResult{}
	var err2 error
	if err2 = p.handler.UpdateGroup(args.ReqSeq, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateNotificationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateNotificationTokenResult{}
	var err2 error
	if err2 = p.handler.UpdateNotificationToken(args.TypeA1, args.Token); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: "+err2.Error())
			oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateNotificationTokenWithBytes struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationTokenWithBytes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateNotificationTokenWithBytesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotificationTokenWithBytes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateNotificationTokenWithBytesResult{}
	var err2 error
	if err2 = p.handler.UpdateNotificationTokenWithBytes(args.TypeA1, args.Token); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationTokenWithBytes: "+err2.Error())
			oprot.WriteMessageBegin("updateNotificationTokenWithBytes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateNotificationTokenWithBytes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfile struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateProfileResult{}
	var err2 error
	if err2 = p.handler.UpdateProfile(args.ReqSeq, args.Profile); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: "+err2.Error())
			oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateProfileAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateProfileAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateProfileAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateProfileAttribute(args.ReqSeq, args.Attr, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateRegion struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateRegion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateRegionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateRegion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateRegionResult{}
	var err2 error
	if err2 = p.handler.UpdateRegion(args.Region); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRegion: "+err2.Error())
			oprot.WriteMessageBegin("updateRegion", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateRegion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettings struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateSettingsResult{}
	var err2 error
	if err2 = p.handler.UpdateSettings(args.ReqSeq, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettings: "+err2.Error())
			oprot.WriteMessageBegin("updateSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettings2 struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettings2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateSettings2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettings2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateSettings2Result{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSettings2(args.ReqSeq, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettings2: "+err2.Error())
			oprot.WriteMessageBegin("updateSettings2", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSettings2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettingsAttribute struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateSettingsAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateSettingsAttributeResult{}
	var err2 error
	if err2 = p.handler.UpdateSettingsAttribute(args.ReqSeq, args.Attr, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttribute: "+err2.Error())
			oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateSettingsAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorUpdateSettingsAttributes struct {
	handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateSettingsAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSettingsAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateSettingsAttributesResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSettingsAttributes(args.ReqSeq, args.AttrBitset, args.Settings); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes: "+err2.Error())
			oprot.WriteMessageBegin("updateSettingsAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyIdentityCredential struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredential) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyIdentityCredentialArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyIdentityCredential", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyIdentityCredentialResult{}
	var err2 error
	if err2 = p.handler.VerifyIdentityCredential(args.IdentityProvider, args.Identifier, args.Password); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredential: "+err2.Error())
			oprot.WriteMessageBegin("verifyIdentityCredential", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("verifyIdentityCredential", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyIdentityCredentialWithResult_ struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredentialWithResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyIdentityCredentialWithResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyIdentityCredentialWithResultResult{}
	var retval *UserAuthStatus
	var err2 error
	if retval, err2 = p.handler.VerifyIdentityCredentialWithResult_(args.IdentityCredential); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult: "+err2.Error())
			oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyPhone struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyPhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyPhoneArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyPhone", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyPhoneResult{}
	var retval VerificationResult_
	var err2 error
	if retval, err2 = p.handler.VerifyPhone(args.SessionId, args.PinCode, args.UdidHash); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhone: "+err2.Error())
			oprot.WriteMessageBegin("verifyPhone", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("verifyPhone", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talkServiceProcessorVerifyQrcode struct {
	handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VerifyQrcodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VerifyQrcodeResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.VerifyQrcode(args.Verifier, args.PinCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: "+err2.Error())
			oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("verifyQrcode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type AcceptGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewAcceptGroupInvitationArgs() *AcceptGroupInvitationArgs {
	return &AcceptGroupInvitationArgs{}
}

func (p *AcceptGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AcceptGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *AcceptGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcceptGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AcceptGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *AcceptGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcceptGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *AcceptGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *AcceptGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptGroupInvitationArgs(%+v)", *p)
}

type AcceptGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewAcceptGroupInvitationResult() *AcceptGroupInvitationResult {
	return &AcceptGroupInvitationResult{}
}

var AcceptGroupInvitationResult_E_DEFAULT *TalkException

func (p *AcceptGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AcceptGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *AcceptGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *AcceptGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcceptGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AcceptGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptGroupInvitation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcceptGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AcceptGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptGroupInvitationResult(%+v)", *p)
}

type AcceptProximityMatchesArgs struct {
	// unused field # 1
	SessionId string          `thrift:"sessionId,2" json:"sessionId"`
	Ids       map[string]bool `thrift:"ids,3" json:"ids"`
}

func NewAcceptProximityMatchesArgs() *AcceptProximityMatchesArgs {
	return &AcceptProximityMatchesArgs{}
}

func (p *AcceptProximityMatchesArgs) GetSessionId() string {
	return p.SessionId
}

func (p *AcceptProximityMatchesArgs) GetIds() map[string]bool {
	return p.Ids
}
func (p *AcceptProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcceptProximityMatchesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *AcceptProximityMatchesArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Ids = tSet
	for i := 0; i < size; i++ {
		var _elem569 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem569 = v
		}
		p.Ids[_elem569] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *AcceptProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptProximityMatches_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcceptProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *AcceptProximityMatchesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.SET, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ids: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Ids)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Ids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ids: %s", p, err)
	}
	return err
}

func (p *AcceptProximityMatchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptProximityMatchesArgs(%+v)", *p)
}

type AcceptProximityMatchesResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewAcceptProximityMatchesResult() *AcceptProximityMatchesResult {
	return &AcceptProximityMatchesResult{}
}

var AcceptProximityMatchesResult_E_DEFAULT *TalkException

func (p *AcceptProximityMatchesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AcceptProximityMatchesResult_E_DEFAULT
	}
	return p.E
}
func (p *AcceptProximityMatchesResult) IsSetE() bool {
	return p.E != nil
}

func (p *AcceptProximityMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcceptProximityMatchesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AcceptProximityMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acceptProximityMatches_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcceptProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AcceptProximityMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptProximityMatchesResult(%+v)", *p)
}

type AcquireCallRouteArgs struct {
	// unused field # 1
	To string `thrift:"to,2" json:"to"`
}

func NewAcquireCallRouteArgs() *AcquireCallRouteArgs {
	return &AcquireCallRouteArgs{}
}

func (p *AcquireCallRouteArgs) GetTo() string {
	return p.To
}
func (p *AcquireCallRouteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireCallRouteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *AcquireCallRouteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:to: %s", p, err)
	}
	return err
}

func (p *AcquireCallRouteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireCallRouteArgs(%+v)", *p)
}

type AcquireCallRouteResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewAcquireCallRouteResult() *AcquireCallRouteResult {
	return &AcquireCallRouteResult{}
}

var AcquireCallRouteResult_Success_DEFAULT []string

func (p *AcquireCallRouteResult) GetSuccess() []string {
	return p.Success
}

var AcquireCallRouteResult_E_DEFAULT *TalkException

func (p *AcquireCallRouteResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AcquireCallRouteResult_E_DEFAULT
	}
	return p.E
}
func (p *AcquireCallRouteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcquireCallRouteResult) IsSetE() bool {
	return p.E != nil
}

func (p *AcquireCallRouteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireCallRouteResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem570 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem570 = v
		}
		p.Success = append(p.Success, _elem570)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AcquireCallRouteResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AcquireCallRouteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallRoute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AcquireCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AcquireCallRouteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireCallRouteResult(%+v)", *p)
}

type AcquireCallTicketArgs struct {
	// unused field # 1
	To string `thrift:"to,2" json:"to"`
}

func NewAcquireCallTicketArgs() *AcquireCallTicketArgs {
	return &AcquireCallTicketArgs{}
}

func (p *AcquireCallTicketArgs) GetTo() string {
	return p.To
}
func (p *AcquireCallTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireCallTicketArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *AcquireCallTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireCallTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:to: %s", p, err)
	}
	return err
}

func (p *AcquireCallTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireCallTicketArgs(%+v)", *p)
}

type AcquireCallTicketResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewAcquireCallTicketResult() *AcquireCallTicketResult {
	return &AcquireCallTicketResult{}
}

var AcquireCallTicketResult_Success_DEFAULT string

func (p *AcquireCallTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AcquireCallTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var AcquireCallTicketResult_E_DEFAULT *TalkException

func (p *AcquireCallTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AcquireCallTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *AcquireCallTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcquireCallTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *AcquireCallTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireCallTicketResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AcquireCallTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AcquireCallTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireCallTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireCallTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AcquireCallTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AcquireCallTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireCallTicketResult(%+v)", *p)
}

type AcquireEncryptedAccessTokenArgs struct {
	// unused field # 1
	FeatureType FeatureType `thrift:"featureType,2" json:"featureType"`
}

func NewAcquireEncryptedAccessTokenArgs() *AcquireEncryptedAccessTokenArgs {
	return &AcquireEncryptedAccessTokenArgs{}
}

func (p *AcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
	return p.FeatureType
}
func (p *AcquireEncryptedAccessTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := FeatureType(v)
		p.FeatureType = temp
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("featureType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:featureType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
		return fmt.Errorf("%T.featureType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:featureType: %s", p, err)
	}
	return err
}

func (p *AcquireEncryptedAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireEncryptedAccessTokenArgs(%+v)", *p)
}

type AcquireEncryptedAccessTokenResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewAcquireEncryptedAccessTokenResult() *AcquireEncryptedAccessTokenResult {
	return &AcquireEncryptedAccessTokenResult{}
}

var AcquireEncryptedAccessTokenResult_Success_DEFAULT string

func (p *AcquireEncryptedAccessTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AcquireEncryptedAccessTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var AcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException

func (p *AcquireEncryptedAccessTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AcquireEncryptedAccessTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *AcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AcquireEncryptedAccessTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *AcquireEncryptedAccessTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AcquireEncryptedAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AcquireEncryptedAccessTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AcquireEncryptedAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcquireEncryptedAccessTokenResult(%+v)", *p)
}

type AddSnsIdArgs struct {
	// unused field # 1
	SnsIdType      SnsIdType `thrift:"snsIdType,2" json:"snsIdType"`
	SnsAccessToken string    `thrift:"snsAccessToken,3" json:"snsAccessToken"`
}

func NewAddSnsIdArgs() *AddSnsIdArgs {
	return &AddSnsIdArgs{}
}

func (p *AddSnsIdArgs) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}

func (p *AddSnsIdArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}
func (p *AddSnsIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddSnsIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *AddSnsIdArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *AddSnsIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnsId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddSnsIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *AddSnsIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsAccessToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return fmt.Errorf("%T.snsAccessToken (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsAccessToken: %s", p, err)
	}
	return err
}

func (p *AddSnsIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSnsIdArgs(%+v)", *p)
}

type AddSnsIdResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewAddSnsIdResult() *AddSnsIdResult {
	return &AddSnsIdResult{}
}

var AddSnsIdResult_Success_DEFAULT string

func (p *AddSnsIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AddSnsIdResult_Success_DEFAULT
	}
	return *p.Success
}

var AddSnsIdResult_E_DEFAULT *TalkException

func (p *AddSnsIdResult) GetE() *TalkException {
	if !p.IsSetE() {
		return AddSnsIdResult_E_DEFAULT
	}
	return p.E
}
func (p *AddSnsIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddSnsIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *AddSnsIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddSnsIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AddSnsIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AddSnsIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSnsId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddSnsIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddSnsIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AddSnsIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSnsIdResult(%+v)", *p)
}

type BlockContactArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Id     string `thrift:"id,2" json:"id"`
}

func NewBlockContactArgs() *BlockContactArgs {
	return &BlockContactArgs{}
}

func (p *BlockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *BlockContactArgs) GetId() string {
	return p.Id
}
func (p *BlockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BlockContactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *BlockContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *BlockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BlockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *BlockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *BlockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockContactArgs(%+v)", *p)
}

type BlockContactResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewBlockContactResult() *BlockContactResult {
	return &BlockContactResult{}
}

var BlockContactResult_E_DEFAULT *TalkException

func (p *BlockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return BlockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BlockContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *BlockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockContact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BlockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *BlockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockContactResult(%+v)", *p)
}

type BlockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Id     string `thrift:"id,2" json:"id"`
}

func NewBlockRecommendationArgs() *BlockRecommendationArgs {
	return &BlockRecommendationArgs{}
}

func (p *BlockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *BlockRecommendationArgs) GetId() string {
	return p.Id
}
func (p *BlockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BlockRecommendationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *BlockRecommendationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *BlockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BlockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *BlockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *BlockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockRecommendationArgs(%+v)", *p)
}

type BlockRecommendationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewBlockRecommendationResult() *BlockRecommendationResult {
	return &BlockRecommendationResult{}
}

var BlockRecommendationResult_E_DEFAULT *TalkException

func (p *BlockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return BlockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BlockRecommendationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *BlockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blockRecommendation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BlockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *BlockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockRecommendationResult(%+v)", *p)
}

type CancelGroupInvitationArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewCancelGroupInvitationArgs() *CancelGroupInvitationArgs {
	return &CancelGroupInvitationArgs{}
}

func (p *CancelGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CancelGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}

func (p *CancelGroupInvitationArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *CancelGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CancelGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *CancelGroupInvitationArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem571 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem571 = v
		}
		p.ContactIds = append(p.ContactIds, _elem571)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CancelGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *CancelGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *CancelGroupInvitationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contactIds: %s", p, err)
	}
	return err
}

func (p *CancelGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelGroupInvitationArgs(%+v)", *p)
}

type CancelGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewCancelGroupInvitationResult() *CancelGroupInvitationResult {
	return &CancelGroupInvitationResult{}
}

var CancelGroupInvitationResult_E_DEFAULT *TalkException

func (p *CancelGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CancelGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *CancelGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *CancelGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CancelGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelGroupInvitation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CancelGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelGroupInvitationResult(%+v)", *p)
}

type ChangeVerificationMethodArgs struct {
	// unused field # 1
	SessionId string             `thrift:"sessionId,2" json:"sessionId"`
	Method    VerificationMethod `thrift:"method,3" json:"method"`
}

func NewChangeVerificationMethodArgs() *ChangeVerificationMethodArgs {
	return &ChangeVerificationMethodArgs{}
}

func (p *ChangeVerificationMethodArgs) GetSessionId() string {
	return p.SessionId
}

func (p *ChangeVerificationMethodArgs) GetMethod() VerificationMethod {
	return p.Method
}
func (p *ChangeVerificationMethodArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeVerificationMethodArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ChangeVerificationMethodArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := VerificationMethod(v)
		p.Method = temp
	}
	return nil
}

func (p *ChangeVerificationMethodArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeVerificationMethod_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeVerificationMethodArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *ChangeVerificationMethodArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("method", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:method: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Method)); err != nil {
		return fmt.Errorf("%T.method (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:method: %s", p, err)
	}
	return err
}

func (p *ChangeVerificationMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeVerificationMethodArgs(%+v)", *p)
}

type ChangeVerificationMethodResult struct {
	Success *VerificationSessionData `thrift:"success,0" json:"success"`
	E       *TalkException           `thrift:"e,1" json:"e"`
}

func NewChangeVerificationMethodResult() *ChangeVerificationMethodResult {
	return &ChangeVerificationMethodResult{}
}

var ChangeVerificationMethodResult_Success_DEFAULT *VerificationSessionData

func (p *ChangeVerificationMethodResult) GetSuccess() *VerificationSessionData {
	if !p.IsSetSuccess() {
		return ChangeVerificationMethodResult_Success_DEFAULT
	}
	return p.Success
}

var ChangeVerificationMethodResult_E_DEFAULT *TalkException

func (p *ChangeVerificationMethodResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ChangeVerificationMethodResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeVerificationMethodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangeVerificationMethodResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeVerificationMethodResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeVerificationMethodResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VerificationSessionData{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ChangeVerificationMethodResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeVerificationMethodResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeVerificationMethod_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeVerificationMethodResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ChangeVerificationMethodResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeVerificationMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeVerificationMethodResult(%+v)", *p)
}

type ClearIdentityCredentialArgs struct {
}

func NewClearIdentityCredentialArgs() *ClearIdentityCredentialArgs {
	return &ClearIdentityCredentialArgs{}
}

func (p *ClearIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearIdentityCredentialArgs(%+v)", *p)
}

type ClearIdentityCredentialResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewClearIdentityCredentialResult() *ClearIdentityCredentialResult {
	return &ClearIdentityCredentialResult{}
}

var ClearIdentityCredentialResult_E_DEFAULT *TalkException

func (p *ClearIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ClearIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *ClearIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *ClearIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ClearIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ClearIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearIdentityCredentialResult(%+v)", *p)
}

type ClearMessageBoxArgs struct {
	// unused field # 1
	ChannelId    string `thrift:"channelId,2" json:"channelId"`
	MessageBoxId string `thrift:"messageBoxId,3" json:"messageBoxId"`
}

func NewClearMessageBoxArgs() *ClearMessageBoxArgs {
	return &ClearMessageBoxArgs{}
}

func (p *ClearMessageBoxArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *ClearMessageBoxArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}
func (p *ClearMessageBoxArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearMessageBoxArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *ClearMessageBoxArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *ClearMessageBoxArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearMessageBox_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearMessageBoxArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *ClearMessageBoxArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBoxId: %s", p, err)
	}
	return err
}

func (p *ClearMessageBoxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearMessageBoxArgs(%+v)", *p)
}

type ClearMessageBoxResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewClearMessageBoxResult() *ClearMessageBoxResult {
	return &ClearMessageBoxResult{}
}

var ClearMessageBoxResult_E_DEFAULT *TalkException

func (p *ClearMessageBoxResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ClearMessageBoxResult_E_DEFAULT
	}
	return p.E
}
func (p *ClearMessageBoxResult) IsSetE() bool {
	return p.E != nil
}

func (p *ClearMessageBoxResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClearMessageBoxResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ClearMessageBoxResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearMessageBox_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClearMessageBoxResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ClearMessageBoxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearMessageBoxResult(%+v)", *p)
}

type CloseProximityMatchArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewCloseProximityMatchArgs() *CloseProximityMatchArgs {
	return &CloseProximityMatchArgs{}
}

func (p *CloseProximityMatchArgs) GetSessionId() string {
	return p.SessionId
}
func (p *CloseProximityMatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CloseProximityMatchArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *CloseProximityMatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeProximityMatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CloseProximityMatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *CloseProximityMatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseProximityMatchArgs(%+v)", *p)
}

type CloseProximityMatchResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewCloseProximityMatchResult() *CloseProximityMatchResult {
	return &CloseProximityMatchResult{}
}

var CloseProximityMatchResult_E_DEFAULT *TalkException

func (p *CloseProximityMatchResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CloseProximityMatchResult_E_DEFAULT
	}
	return p.E
}
func (p *CloseProximityMatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *CloseProximityMatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CloseProximityMatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CloseProximityMatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeProximityMatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CloseProximityMatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CloseProximityMatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseProximityMatchResult(%+v)", *p)
}

type CommitSendMessageArgs struct {
	Seq          int32    `thrift:"seq,1" json:"seq"`
	MessageId    string   `thrift:"messageId,2" json:"messageId"`
	ReceiverMids []string `thrift:"receiverMids,3" json:"receiverMids"`
}

func NewCommitSendMessageArgs() *CommitSendMessageArgs {
	return &CommitSendMessageArgs{}
}

func (p *CommitSendMessageArgs) GetSeq() int32 {
	return p.Seq
}

func (p *CommitSendMessageArgs) GetMessageId() string {
	return p.MessageId
}

func (p *CommitSendMessageArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *CommitSendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitSendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *CommitSendMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *CommitSendMessageArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem572 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem572 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem572)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CommitSendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitSendMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *CommitSendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return fmt.Errorf("%T.messageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageId: %s", p, err)
	}
	return err
}

func (p *CommitSendMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:receiverMids: %s", p, err)
	}
	return err
}

func (p *CommitSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitSendMessageArgs(%+v)", *p)
}

type CommitSendMessageResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewCommitSendMessageResult() *CommitSendMessageResult {
	return &CommitSendMessageResult{}
}

var CommitSendMessageResult_Success_DEFAULT map[string]string

func (p *CommitSendMessageResult) GetSuccess() map[string]string {
	return p.Success
}

var CommitSendMessageResult_E_DEFAULT *TalkException

func (p *CommitSendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CommitSendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *CommitSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommitSendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *CommitSendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitSendMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key573 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key573 = v
		}
		var _val574 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val574 = v
		}
		p.Success[_key573] = _val574
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CommitSendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CommitSendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitSendMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CommitSendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CommitSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitSendMessageResult(%+v)", *p)
}

type CommitSendMessagesArgs struct {
	Seq          int32    `thrift:"seq,1" json:"seq"`
	MessageIds   []string `thrift:"messageIds,2" json:"messageIds"`
	ReceiverMids []string `thrift:"receiverMids,3" json:"receiverMids"`
}

func NewCommitSendMessagesArgs() *CommitSendMessagesArgs {
	return &CommitSendMessagesArgs{}
}

func (p *CommitSendMessagesArgs) GetSeq() int32 {
	return p.Seq
}

func (p *CommitSendMessagesArgs) GetMessageIds() []string {
	return p.MessageIds
}

func (p *CommitSendMessagesArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *CommitSendMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitSendMessagesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *CommitSendMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.MessageIds = tSlice
	for i := 0; i < size; i++ {
		var _elem575 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem575 = v
		}
		p.MessageIds = append(p.MessageIds, _elem575)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CommitSendMessagesArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem576 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem576 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem576)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CommitSendMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitSendMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitSendMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *CommitSendMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageIds", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MessageIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageIds: %s", p, err)
	}
	return err
}

func (p *CommitSendMessagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:receiverMids: %s", p, err)
	}
	return err
}

func (p *CommitSendMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitSendMessagesArgs(%+v)", *p)
}

type CommitSendMessagesResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewCommitSendMessagesResult() *CommitSendMessagesResult {
	return &CommitSendMessagesResult{}
}

var CommitSendMessagesResult_Success_DEFAULT map[string]string

func (p *CommitSendMessagesResult) GetSuccess() map[string]string {
	return p.Success
}

var CommitSendMessagesResult_E_DEFAULT *TalkException

func (p *CommitSendMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CommitSendMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *CommitSendMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommitSendMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *CommitSendMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitSendMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key577 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key577 = v
		}
		var _val578 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val578 = v
		}
		p.Success[_key577] = _val578
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CommitSendMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CommitSendMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitSendMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitSendMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CommitSendMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CommitSendMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitSendMessagesResult(%+v)", *p)
}

type CommitUpdateProfileArgs struct {
	Seq          int32              `thrift:"seq,1" json:"seq"`
	Attrs        []ProfileAttribute `thrift:"attrs,2" json:"attrs"`
	ReceiverMids []string           `thrift:"receiverMids,3" json:"receiverMids"`
}

func NewCommitUpdateProfileArgs() *CommitUpdateProfileArgs {
	return &CommitUpdateProfileArgs{}
}

func (p *CommitUpdateProfileArgs) GetSeq() int32 {
	return p.Seq
}

func (p *CommitUpdateProfileArgs) GetAttrs() []ProfileAttribute {
	return p.Attrs
}

func (p *CommitUpdateProfileArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *CommitUpdateProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitUpdateProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *CommitUpdateProfileArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]ProfileAttribute, 0, size)
	p.Attrs = tSlice
	for i := 0; i < size; i++ {
		var _elem579 ProfileAttribute
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := ProfileAttribute(v)
			_elem579 = temp
		}
		p.Attrs = append(p.Attrs, _elem579)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CommitUpdateProfileArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem580 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem580 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem580)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CommitUpdateProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitUpdateProfile_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitUpdateProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *CommitUpdateProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrs", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:attrs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Attrs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Attrs {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:attrs: %s", p, err)
	}
	return err
}

func (p *CommitUpdateProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:receiverMids: %s", p, err)
	}
	return err
}

func (p *CommitUpdateProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitUpdateProfileArgs(%+v)", *p)
}

type CommitUpdateProfileResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewCommitUpdateProfileResult() *CommitUpdateProfileResult {
	return &CommitUpdateProfileResult{}
}

var CommitUpdateProfileResult_Success_DEFAULT map[string]string

func (p *CommitUpdateProfileResult) GetSuccess() map[string]string {
	return p.Success
}

var CommitUpdateProfileResult_E_DEFAULT *TalkException

func (p *CommitUpdateProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CommitUpdateProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *CommitUpdateProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommitUpdateProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *CommitUpdateProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitUpdateProfileResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key581 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key581 = v
		}
		var _val582 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val582 = v
		}
		p.Success[_key581] = _val582
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CommitUpdateProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CommitUpdateProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitUpdateProfile_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitUpdateProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CommitUpdateProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CommitUpdateProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitUpdateProfileResult(%+v)", *p)
}

type ConfirmEmailArgs struct {
	// unused field # 1
	Verifier string `thrift:"verifier,2" json:"verifier"`
	PinCode  string `thrift:"pinCode,3" json:"pinCode"`
}

func NewConfirmEmailArgs() *ConfirmEmailArgs {
	return &ConfirmEmailArgs{}
}

func (p *ConfirmEmailArgs) GetVerifier() string {
	return p.Verifier
}

func (p *ConfirmEmailArgs) GetPinCode() string {
	return p.PinCode
}
func (p *ConfirmEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfirmEmailArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *ConfirmEmailArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *ConfirmEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("confirmEmail_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfirmEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:verifier: %s", p, err)
	}
	return err
}

func (p *ConfirmEmailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pinCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return fmt.Errorf("%T.pinCode (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pinCode: %s", p, err)
	}
	return err
}

func (p *ConfirmEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmEmailArgs(%+v)", *p)
}

type ConfirmEmailResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewConfirmEmailResult() *ConfirmEmailResult {
	return &ConfirmEmailResult{}
}

var ConfirmEmailResult_E_DEFAULT *TalkException

func (p *ConfirmEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ConfirmEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *ConfirmEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *ConfirmEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfirmEmailResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ConfirmEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("confirmEmail_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfirmEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ConfirmEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfirmEmailResult(%+v)", *p)
}

type CreateGroupArgs struct {
	Seq        int32    `thrift:"seq,1" json:"seq"`
	Name       string   `thrift:"name,2" json:"name"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewCreateGroupArgs() *CreateGroupArgs {
	return &CreateGroupArgs{}
}

func (p *CreateGroupArgs) GetSeq() int32 {
	return p.Seq
}

func (p *CreateGroupArgs) GetName() string {
	return p.Name
}

func (p *CreateGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *CreateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *CreateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem583 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem583 = v
		}
		p.ContactIds = append(p.ContactIds, _elem583)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CreateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contactIds: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupArgs(%+v)", *p)
}

type CreateGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewCreateGroupResult() *CreateGroupResult {
	return &CreateGroupResult{}
}

var CreateGroupResult_Success_DEFAULT *Group

func (p *CreateGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return CreateGroupResult_Success_DEFAULT
	}
	return p.Success
}

var CreateGroupResult_E_DEFAULT *TalkException

func (p *CreateGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CreateGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupResult(%+v)", *p)
}

type CreateQrcodeBase64ImageArgs struct {
	// unused field # 1
	Url          string `thrift:"url,2" json:"url"`
	CharacterSet string `thrift:"characterSet,3" json:"characterSet"`
	ImageSize    int32  `thrift:"imageSize,4" json:"imageSize"`
	X            int32  `thrift:"x,5" json:"x"`
	Y            int32  `thrift:"y,6" json:"y"`
	Width        int32  `thrift:"width,7" json:"width"`
	Height       int32  `thrift:"height,8" json:"height"`
}

func NewCreateQrcodeBase64ImageArgs() *CreateQrcodeBase64ImageArgs {
	return &CreateQrcodeBase64ImageArgs{}
}

func (p *CreateQrcodeBase64ImageArgs) GetUrl() string {
	return p.Url
}

func (p *CreateQrcodeBase64ImageArgs) GetCharacterSet() string {
	return p.CharacterSet
}

func (p *CreateQrcodeBase64ImageArgs) GetImageSize() int32 {
	return p.ImageSize
}

func (p *CreateQrcodeBase64ImageArgs) GetX() int32 {
	return p.X
}

func (p *CreateQrcodeBase64ImageArgs) GetY() int32 {
	return p.Y
}

func (p *CreateQrcodeBase64ImageArgs) GetWidth() int32 {
	return p.Width
}

func (p *CreateQrcodeBase64ImageArgs) GetHeight() int32 {
	return p.Height
}
func (p *CreateQrcodeBase64ImageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Url = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CharacterSet = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ImageSize = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.X = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Y = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Width = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Height = v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQrcodeBase64Image_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQrcodeBase64ImageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Url)); err != nil {
		return fmt.Errorf("%T.url (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:url: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("characterSet", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:characterSet: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CharacterSet)); err != nil {
		return fmt.Errorf("%T.characterSet (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:characterSet: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imageSize", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:imageSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ImageSize)); err != nil {
		return fmt.Errorf("%T.imageSize (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:imageSize: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("x", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:x: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.X)); err != nil {
		return fmt.Errorf("%T.x (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:x: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("y", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:y: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Y)); err != nil {
		return fmt.Errorf("%T.y (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:y: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:width: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Width)); err != nil {
		return fmt.Errorf("%T.width (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:width: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:height: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Height)); err != nil {
		return fmt.Errorf("%T.height (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:height: %s", p, err)
	}
	return err
}

func (p *CreateQrcodeBase64ImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQrcodeBase64ImageArgs(%+v)", *p)
}

type CreateQrcodeBase64ImageResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewCreateQrcodeBase64ImageResult() *CreateQrcodeBase64ImageResult {
	return &CreateQrcodeBase64ImageResult{}
}

var CreateQrcodeBase64ImageResult_Success_DEFAULT string

func (p *CreateQrcodeBase64ImageResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return CreateQrcodeBase64ImageResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateQrcodeBase64ImageResult_E_DEFAULT *TalkException

func (p *CreateQrcodeBase64ImageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CreateQrcodeBase64ImageResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateQrcodeBase64ImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateQrcodeBase64ImageResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateQrcodeBase64ImageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateQrcodeBase64ImageResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateQrcodeBase64ImageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateQrcodeBase64ImageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createQrcodeBase64Image_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateQrcodeBase64ImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateQrcodeBase64ImageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateQrcodeBase64ImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQrcodeBase64ImageResult(%+v)", *p)
}

type CreateRoomArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	ContactIds []string `thrift:"contactIds,2" json:"contactIds"`
}

func NewCreateRoomArgs() *CreateRoomArgs {
	return &CreateRoomArgs{}
}

func (p *CreateRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CreateRoomArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *CreateRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CreateRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem584 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem584 = v
		}
		p.ContactIds = append(p.ContactIds, _elem584)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CreateRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoom_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *CreateRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:contactIds: %s", p, err)
	}
	return err
}

func (p *CreateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoomArgs(%+v)", *p)
}

type CreateRoomResult struct {
	Success *Room          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewCreateRoomResult() *CreateRoomResult {
	return &CreateRoomResult{}
}

var CreateRoomResult_Success_DEFAULT *Room

func (p *CreateRoomResult) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return CreateRoomResult_Success_DEFAULT
	}
	return p.Success
}

var CreateRoomResult_E_DEFAULT *TalkException

func (p *CreateRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CreateRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoomResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createRoom_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoomResult(%+v)", *p)
}

type CreateSessionArgs struct {
}

func NewCreateSessionArgs() *CreateSessionArgs {
	return &CreateSessionArgs{}
}

func (p *CreateSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionArgs(%+v)", *p)
}

type CreateSessionResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewCreateSessionResult() *CreateSessionResult {
	return &CreateSessionResult{}
}

var CreateSessionResult_Success_DEFAULT string

func (p *CreateSessionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return CreateSessionResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateSessionResult_E_DEFAULT *TalkException

func (p *CreateSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CreateSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSessionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSessionResult(%+v)", *p)
}

type FetchAnnouncementsArgs struct {
	// unused field # 1
	LastFetchedIndex int32 `thrift:"lastFetchedIndex,2" json:"lastFetchedIndex"`
}

func NewFetchAnnouncementsArgs() *FetchAnnouncementsArgs {
	return &FetchAnnouncementsArgs{}
}

func (p *FetchAnnouncementsArgs) GetLastFetchedIndex() int32 {
	return p.LastFetchedIndex
}
func (p *FetchAnnouncementsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAnnouncementsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LastFetchedIndex = v
	}
	return nil
}

func (p *FetchAnnouncementsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchAnnouncements_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAnnouncementsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastFetchedIndex", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lastFetchedIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastFetchedIndex)); err != nil {
		return fmt.Errorf("%T.lastFetchedIndex (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lastFetchedIndex: %s", p, err)
	}
	return err
}

func (p *FetchAnnouncementsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAnnouncementsArgs(%+v)", *p)
}

type FetchAnnouncementsResult struct {
	Success []*Announcement `thrift:"success,0" json:"success"`
	E       *TalkException  `thrift:"e,1" json:"e"`
}

func NewFetchAnnouncementsResult() *FetchAnnouncementsResult {
	return &FetchAnnouncementsResult{}
}

var FetchAnnouncementsResult_Success_DEFAULT []*Announcement

func (p *FetchAnnouncementsResult) GetSuccess() []*Announcement {
	return p.Success
}

var FetchAnnouncementsResult_E_DEFAULT *TalkException

func (p *FetchAnnouncementsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FetchAnnouncementsResult_E_DEFAULT
	}
	return p.E
}
func (p *FetchAnnouncementsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchAnnouncementsResult) IsSetE() bool {
	return p.E != nil
}

func (p *FetchAnnouncementsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAnnouncementsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Announcement, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem585 := &Announcement{}
		if err := _elem585.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem585, err)
		}
		p.Success = append(p.Success, _elem585)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchAnnouncementsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FetchAnnouncementsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchAnnouncements_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAnnouncementsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchAnnouncementsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FetchAnnouncementsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAnnouncementsResult(%+v)", *p)
}

type FetchMessagesArgs struct {
	// unused field # 1
	LocalTs int64 `thrift:"localTs,2" json:"localTs"`
	Count   int32 `thrift:"count,3" json:"count"`
}

func NewFetchMessagesArgs() *FetchMessagesArgs {
	return &FetchMessagesArgs{}
}

func (p *FetchMessagesArgs) GetLocalTs() int64 {
	return p.LocalTs
}

func (p *FetchMessagesArgs) GetCount() int32 {
	return p.Count
}
func (p *FetchMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LocalTs = v
	}
	return nil
}

func (p *FetchMessagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *FetchMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localTs", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:localTs: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LocalTs)); err != nil {
		return fmt.Errorf("%T.localTs (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:localTs: %s", p, err)
	}
	return err
}

func (p *FetchMessagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:count: %s", p, err)
	}
	return err
}

func (p *FetchMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchMessagesArgs(%+v)", *p)
}

type FetchMessagesResult struct {
	Success []*Message     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewFetchMessagesResult() *FetchMessagesResult {
	return &FetchMessagesResult{}
}

var FetchMessagesResult_Success_DEFAULT []*Message

func (p *FetchMessagesResult) GetSuccess() []*Message {
	return p.Success
}

var FetchMessagesResult_E_DEFAULT *TalkException

func (p *FetchMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FetchMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *FetchMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *FetchMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem586 := &Message{}
		if err := _elem586.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem586, err)
		}
		p.Success = append(p.Success, _elem586)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FetchMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FetchMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchMessagesResult(%+v)", *p)
}

type FetchOperationsArgs struct {
	// unused field # 1
	LocalRev int64 `thrift:"localRev,2" json:"localRev"`
	Count    int32 `thrift:"count,3" json:"count"`
}

func NewFetchOperationsArgs() *FetchOperationsArgs {
	return &FetchOperationsArgs{}
}

func (p *FetchOperationsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *FetchOperationsArgs) GetCount() int32 {
	return p.Count
}
func (p *FetchOperationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOperationsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *FetchOperationsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *FetchOperationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOperationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:localRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return fmt.Errorf("%T.localRev (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:localRev: %s", p, err)
	}
	return err
}

func (p *FetchOperationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:count: %s", p, err)
	}
	return err
}

func (p *FetchOperationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOperationsArgs(%+v)", *p)
}

type FetchOperationsResult struct {
	Success []*Operation   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewFetchOperationsResult() *FetchOperationsResult {
	return &FetchOperationsResult{}
}

var FetchOperationsResult_Success_DEFAULT []*Operation

func (p *FetchOperationsResult) GetSuccess() []*Operation {
	return p.Success
}

var FetchOperationsResult_E_DEFAULT *TalkException

func (p *FetchOperationsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FetchOperationsResult_E_DEFAULT
	}
	return p.E
}
func (p *FetchOperationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchOperationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *FetchOperationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOperationsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem587 := &Operation{}
		if err := _elem587.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem587, err)
		}
		p.Success = append(p.Success, _elem587)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchOperationsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FetchOperationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOperations_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOperationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchOperationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FetchOperationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOperationsResult(%+v)", *p)
}

type FetchOpsArgs struct {
	// unused field # 1
	LocalRev      int64 `thrift:"localRev,2" json:"localRev"`
	Count         int32 `thrift:"count,3" json:"count"`
	GlobalRev     int64 `thrift:"globalRev,4" json:"globalRev"`
	IndividualRev int64 `thrift:"individualRev,5" json:"individualRev"`
}

func NewFetchOpsArgs() *FetchOpsArgs {
	return &FetchOpsArgs{}
}

func (p *FetchOpsArgs) GetLocalRev() int64 {
	return p.LocalRev
}

func (p *FetchOpsArgs) GetCount() int32 {
	return p.Count
}

func (p *FetchOpsArgs) GetGlobalRev() int64 {
	return p.GlobalRev
}

func (p *FetchOpsArgs) GetIndividualRev() int64 {
	return p.IndividualRev
}
func (p *FetchOpsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOpsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LocalRev = v
	}
	return nil
}

func (p *FetchOpsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *FetchOpsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.GlobalRev = v
	}
	return nil
}

func (p *FetchOpsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IndividualRev = v
	}
	return nil
}

func (p *FetchOpsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOpsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:localRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
		return fmt.Errorf("%T.localRev (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:localRev: %s", p, err)
	}
	return err
}

func (p *FetchOpsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:count: %s", p, err)
	}
	return err
}

func (p *FetchOpsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("globalRev", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:globalRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GlobalRev)); err != nil {
		return fmt.Errorf("%T.globalRev (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:globalRev: %s", p, err)
	}
	return err
}

func (p *FetchOpsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("individualRev", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:individualRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.IndividualRev)); err != nil {
		return fmt.Errorf("%T.individualRev (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:individualRev: %s", p, err)
	}
	return err
}

func (p *FetchOpsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOpsArgs(%+v)", *p)
}

type FetchOpsResult struct {
	Success []*Operation   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewFetchOpsResult() *FetchOpsResult {
	return &FetchOpsResult{}
}

var FetchOpsResult_Success_DEFAULT []*Operation

func (p *FetchOpsResult) GetSuccess() []*Operation {
	return p.Success
}

var FetchOpsResult_E_DEFAULT *TalkException

func (p *FetchOpsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FetchOpsResult_E_DEFAULT
	}
	return p.E
}
func (p *FetchOpsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchOpsResult) IsSetE() bool {
	return p.E != nil
}

func (p *FetchOpsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOpsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem588 := &Operation{}
		if err := _elem588.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem588, err)
		}
		p.Success = append(p.Success, _elem588)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchOpsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FetchOpsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FetchOpsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOpsResult(%+v)", *p)
}

type FindAndAddContactsByEmailArgs struct {
	ReqSeq int32           `thrift:"reqSeq,1" json:"reqSeq"`
	Emails map[string]bool `thrift:"emails,2" json:"emails"`
}

func NewFindAndAddContactsByEmailArgs() *FindAndAddContactsByEmailArgs {
	return &FindAndAddContactsByEmailArgs{}
}

func (p *FindAndAddContactsByEmailArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *FindAndAddContactsByEmailArgs) GetEmails() map[string]bool {
	return p.Emails
}
func (p *FindAndAddContactsByEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *FindAndAddContactsByEmailArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Emails = tSet
	for i := 0; i < size; i++ {
		var _elem589 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem589 = v
		}
		p.Emails[_elem589] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByEmail_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:emails: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Emails)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:emails: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByEmailArgs(%+v)", *p)
}

type FindAndAddContactsByEmailResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindAndAddContactsByEmailResult() *FindAndAddContactsByEmailResult {
	return &FindAndAddContactsByEmailResult{}
}

var FindAndAddContactsByEmailResult_Success_DEFAULT map[string]*Contact

func (p *FindAndAddContactsByEmailResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindAndAddContactsByEmailResult_E_DEFAULT *TalkException

func (p *FindAndAddContactsByEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindAndAddContactsByEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *FindAndAddContactsByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAndAddContactsByEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindAndAddContactsByEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key590 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key590 = v
		}
		_val591 := &Contact{}
		if err := _val591.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val591, err)
		}
		p.Success[_key590] = _val591
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByEmail_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByEmailResult(%+v)", *p)
}

type FindAndAddContactsByMidArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Mid    string `thrift:"mid,2" json:"mid"`
}

func NewFindAndAddContactsByMidArgs() *FindAndAddContactsByMidArgs {
	return &FindAndAddContactsByMidArgs{}
}

func (p *FindAndAddContactsByMidArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *FindAndAddContactsByMidArgs) GetMid() string {
	return p.Mid
}
func (p *FindAndAddContactsByMidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByMidArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *FindAndAddContactsByMidArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *FindAndAddContactsByMidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByMidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByMidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByMidArgs(%+v)", *p)
}

type FindAndAddContactsByMidResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindAndAddContactsByMidResult() *FindAndAddContactsByMidResult {
	return &FindAndAddContactsByMidResult{}
}

var FindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *FindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindAndAddContactsByMidResult_E_DEFAULT *TalkException

func (p *FindAndAddContactsByMidResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindAndAddContactsByMidResult_E_DEFAULT
	}
	return p.E
}
func (p *FindAndAddContactsByMidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAndAddContactsByMidResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindAndAddContactsByMidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByMidResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key592 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key592 = v
		}
		_val593 := &Contact{}
		if err := _val593.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val593, err)
		}
		p.Success[_key592] = _val593
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByMidResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindAndAddContactsByMidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByMid_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByMidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByMidResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByMidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByMidResult(%+v)", *p)
}

type FindAndAddContactsByPhoneArgs struct {
	ReqSeq int32           `thrift:"reqSeq,1" json:"reqSeq"`
	Phones map[string]bool `thrift:"phones,2" json:"phones"`
}

func NewFindAndAddContactsByPhoneArgs() *FindAndAddContactsByPhoneArgs {
	return &FindAndAddContactsByPhoneArgs{}
}

func (p *FindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *FindAndAddContactsByPhoneArgs) GetPhones() map[string]bool {
	return p.Phones
}
func (p *FindAndAddContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *FindAndAddContactsByPhoneArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem594 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem594 = v
		}
		p.Phones[_elem594] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:phones: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:phones: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByPhoneArgs(%+v)", *p)
}

type FindAndAddContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindAndAddContactsByPhoneResult() *FindAndAddContactsByPhoneResult {
	return &FindAndAddContactsByPhoneResult{}
}

var FindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *FindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindAndAddContactsByPhoneResult_E_DEFAULT *TalkException

func (p *FindAndAddContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindAndAddContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *FindAndAddContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAndAddContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindAndAddContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key595 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key595 = v
		}
		_val596 := &Contact{}
		if err := _val596.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val596, err)
		}
		p.Success[_key595] = _val596
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByPhone_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByPhoneResult(%+v)", *p)
}

type FindAndAddContactsByUseridArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewFindAndAddContactsByUseridArgs() *FindAndAddContactsByUseridArgs {
	return &FindAndAddContactsByUseridArgs{}
}

func (p *FindAndAddContactsByUseridArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *FindAndAddContactsByUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *FindAndAddContactsByUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *FindAndAddContactsByUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *FindAndAddContactsByUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
	}
	return err
}

func (p *FindAndAddContactsByUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByUseridArgs(%+v)", *p)
}

type FindAndAddContactsByUseridResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindAndAddContactsByUseridResult() *FindAndAddContactsByUseridResult {
	return &FindAndAddContactsByUseridResult{}
}

var FindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *FindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindAndAddContactsByUseridResult_E_DEFAULT *TalkException

func (p *FindAndAddContactsByUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindAndAddContactsByUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *FindAndAddContactsByUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindAndAddContactsByUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindAndAddContactsByUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key597 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key597 = v
		}
		_val598 := &Contact{}
		if err := _val598.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val598, err)
		}
		p.Success[_key597] = _val598
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findAndAddContactsByUserid_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindAndAddContactsByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindAndAddContactsByUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindAndAddContactsByUseridResult(%+v)", *p)
}

type FindContactByUseridArgs struct {
	// unused field # 1
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewFindContactByUseridArgs() *FindContactByUseridArgs {
	return &FindContactByUseridArgs{}
}

func (p *FindContactByUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *FindContactByUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactByUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *FindContactByUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserid_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
	}
	return err
}

func (p *FindContactByUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactByUseridArgs(%+v)", *p)
}

type FindContactByUseridResult struct {
	Success *Contact       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewFindContactByUseridResult() *FindContactByUseridResult {
	return &FindContactByUseridResult{}
}

var FindContactByUseridResult_Success_DEFAULT *Contact

func (p *FindContactByUseridResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return FindContactByUseridResult_Success_DEFAULT
	}
	return p.Success
}

var FindContactByUseridResult_E_DEFAULT *TalkException

func (p *FindContactByUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindContactByUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *FindContactByUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindContactByUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindContactByUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactByUseridResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindContactByUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindContactByUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserid_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindContactByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindContactByUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactByUseridResult(%+v)", *p)
}

type FindContactByUserTicketArgs struct {
	// unused field # 1
	TicketId string `thrift:"ticketId,2" json:"ticketId"`
}

func NewFindContactByUserTicketArgs() *FindContactByUserTicketArgs {
	return &FindContactByUserTicketArgs{}
}

func (p *FindContactByUserTicketArgs) GetTicketId() string {
	return p.TicketId
}
func (p *FindContactByUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactByUserTicketArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *FindContactByUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactByUserTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ticketId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TicketId)); err != nil {
		return fmt.Errorf("%T.ticketId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ticketId: %s", p, err)
	}
	return err
}

func (p *FindContactByUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactByUserTicketArgs(%+v)", *p)
}

type FindContactByUserTicketResult struct {
	Success *Contact       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewFindContactByUserTicketResult() *FindContactByUserTicketResult {
	return &FindContactByUserTicketResult{}
}

var FindContactByUserTicketResult_Success_DEFAULT *Contact

func (p *FindContactByUserTicketResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return FindContactByUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var FindContactByUserTicketResult_E_DEFAULT *TalkException

func (p *FindContactByUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindContactByUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *FindContactByUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindContactByUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindContactByUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactByUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindContactByUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindContactByUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactByUserTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactByUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindContactByUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindContactByUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactByUserTicketResult(%+v)", *p)
}

type FindContactsByEmailArgs struct {
	// unused field # 1
	Emails map[string]bool `thrift:"emails,2" json:"emails"`
}

func NewFindContactsByEmailArgs() *FindContactsByEmailArgs {
	return &FindContactsByEmailArgs{}
}

func (p *FindContactsByEmailArgs) GetEmails() map[string]bool {
	return p.Emails
}
func (p *FindContactsByEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactsByEmailArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Emails = tSet
	for i := 0; i < size; i++ {
		var _elem599 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem599 = v
		}
		p.Emails[_elem599] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FindContactsByEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByEmail_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactsByEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emails", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:emails: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Emails)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Emails {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:emails: %s", p, err)
	}
	return err
}

func (p *FindContactsByEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactsByEmailArgs(%+v)", *p)
}

type FindContactsByEmailResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindContactsByEmailResult() *FindContactsByEmailResult {
	return &FindContactsByEmailResult{}
}

var FindContactsByEmailResult_Success_DEFAULT map[string]*Contact

func (p *FindContactsByEmailResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindContactsByEmailResult_E_DEFAULT *TalkException

func (p *FindContactsByEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindContactsByEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *FindContactsByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindContactsByEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindContactsByEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactsByEmailResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key600 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key600 = v
		}
		_val601 := &Contact{}
		if err := _val601.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val601, err)
		}
		p.Success[_key600] = _val601
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindContactsByEmailResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindContactsByEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByEmail_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactsByEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindContactsByEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindContactsByEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactsByEmailResult(%+v)", *p)
}

type FindContactsByPhoneArgs struct {
	// unused field # 1
	Phones map[string]bool `thrift:"phones,2" json:"phones"`
}

func NewFindContactsByPhoneArgs() *FindContactsByPhoneArgs {
	return &FindContactsByPhoneArgs{}
}

func (p *FindContactsByPhoneArgs) GetPhones() map[string]bool {
	return p.Phones
}
func (p *FindContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactsByPhoneArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Phones = tSet
	for i := 0; i < size; i++ {
		var _elem602 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem602 = v
		}
		p.Phones[_elem602] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FindContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:phones: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.Phones {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:phones: %s", p, err)
	}
	return err
}

func (p *FindContactsByPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactsByPhoneArgs(%+v)", *p)
}

type FindContactsByPhoneResult struct {
	Success map[string]*Contact `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewFindContactsByPhoneResult() *FindContactsByPhoneResult {
	return &FindContactsByPhoneResult{}
}

var FindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *FindContactsByPhoneResult) GetSuccess() map[string]*Contact {
	return p.Success
}

var FindContactsByPhoneResult_E_DEFAULT *TalkException

func (p *FindContactsByPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindContactsByPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *FindContactsByPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindContactsByPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindContactsByPhoneResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Contact, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key603 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key603 = v
		}
		_val604 := &Contact{}
		if err := _val604.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val604, err)
		}
		p.Success[_key603] = _val604
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FindContactsByPhoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findContactsByPhone_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindContactsByPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindContactsByPhoneResult(%+v)", *p)
}

type FindSnsIdUserStatusArgs struct {
	// unused field # 1
	SnsIdType      SnsIdType `thrift:"snsIdType,2" json:"snsIdType"`
	SnsAccessToken string    `thrift:"snsAccessToken,3" json:"snsAccessToken"`
	UdidHash       string    `thrift:"udidHash,4" json:"udidHash"`
}

func NewFindSnsIdUserStatusArgs() *FindSnsIdUserStatusArgs {
	return &FindSnsIdUserStatusArgs{}
}

func (p *FindSnsIdUserStatusArgs) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}

func (p *FindSnsIdUserStatusArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}

func (p *FindSnsIdUserStatusArgs) GetUdidHash() string {
	return p.UdidHash
}
func (p *FindSnsIdUserStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindSnsIdUserStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *FindSnsIdUserStatusArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *FindSnsIdUserStatusArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *FindSnsIdUserStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findSnsIdUserStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindSnsIdUserStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *FindSnsIdUserStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsAccessToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return fmt.Errorf("%T.snsAccessToken (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsAccessToken: %s", p, err)
	}
	return err
}

func (p *FindSnsIdUserStatusArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:udidHash: %s", p, err)
	}
	return err
}

func (p *FindSnsIdUserStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindSnsIdUserStatusArgs(%+v)", *p)
}

type FindSnsIdUserStatusResult struct {
	Success *SnsIdUserStatus `thrift:"success,0" json:"success"`
	E       *TalkException   `thrift:"e,1" json:"e"`
}

func NewFindSnsIdUserStatusResult() *FindSnsIdUserStatusResult {
	return &FindSnsIdUserStatusResult{}
}

var FindSnsIdUserStatusResult_Success_DEFAULT *SnsIdUserStatus

func (p *FindSnsIdUserStatusResult) GetSuccess() *SnsIdUserStatus {
	if !p.IsSetSuccess() {
		return FindSnsIdUserStatusResult_Success_DEFAULT
	}
	return p.Success
}

var FindSnsIdUserStatusResult_E_DEFAULT *TalkException

func (p *FindSnsIdUserStatusResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FindSnsIdUserStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *FindSnsIdUserStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindSnsIdUserStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *FindSnsIdUserStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindSnsIdUserStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SnsIdUserStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FindSnsIdUserStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FindSnsIdUserStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findSnsIdUserStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FindSnsIdUserStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindSnsIdUserStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FindSnsIdUserStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindSnsIdUserStatusResult(%+v)", *p)
}

type FinishUpdateVerificationArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewFinishUpdateVerificationArgs() *FinishUpdateVerificationArgs {
	return &FinishUpdateVerificationArgs{}
}

func (p *FinishUpdateVerificationArgs) GetSessionId() string {
	return p.SessionId
}
func (p *FinishUpdateVerificationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FinishUpdateVerificationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *FinishUpdateVerificationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("finishUpdateVerification_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FinishUpdateVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *FinishUpdateVerificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinishUpdateVerificationArgs(%+v)", *p)
}

type FinishUpdateVerificationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewFinishUpdateVerificationResult() *FinishUpdateVerificationResult {
	return &FinishUpdateVerificationResult{}
}

var FinishUpdateVerificationResult_E_DEFAULT *TalkException

func (p *FinishUpdateVerificationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FinishUpdateVerificationResult_E_DEFAULT
	}
	return p.E
}
func (p *FinishUpdateVerificationResult) IsSetE() bool {
	return p.E != nil
}

func (p *FinishUpdateVerificationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FinishUpdateVerificationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FinishUpdateVerificationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("finishUpdateVerification_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FinishUpdateVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FinishUpdateVerificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinishUpdateVerificationResult(%+v)", *p)
}

type GenerateUserTicketArgs struct {
	// unused fields # 1 to 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	MaxUseCount    int32 `thrift:"maxUseCount,4" json:"maxUseCount"`
}

func NewGenerateUserTicketArgs() *GenerateUserTicketArgs {
	return &GenerateUserTicketArgs{}
}

func (p *GenerateUserTicketArgs) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *GenerateUserTicketArgs) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *GenerateUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GenerateUserTicketArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *GenerateUserTicketArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *GenerateUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GenerateUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:expirationTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return fmt.Errorf("%T.expirationTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:expirationTime: %s", p, err)
	}
	return err
}

func (p *GenerateUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxUseCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return fmt.Errorf("%T.maxUseCount (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxUseCount: %s", p, err)
	}
	return err
}

func (p *GenerateUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateUserTicketArgs(%+v)", *p)
}

type GenerateUserTicketResult struct {
	Success *Ticket        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGenerateUserTicketResult() *GenerateUserTicketResult {
	return &GenerateUserTicketResult{}
}

var GenerateUserTicketResult_Success_DEFAULT *Ticket

func (p *GenerateUserTicketResult) GetSuccess() *Ticket {
	if !p.IsSetSuccess() {
		return GenerateUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var GenerateUserTicketResult_E_DEFAULT *TalkException

func (p *GenerateUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GenerateUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *GenerateUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenerateUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *GenerateUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GenerateUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Ticket{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GenerateUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GenerateUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("generateUserTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GenerateUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GenerateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GenerateUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateUserTicketResult(%+v)", *p)
}

type GetAcceptedProximityMatchesArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewGetAcceptedProximityMatchesArgs() *GetAcceptedProximityMatchesArgs {
	return &GetAcceptedProximityMatchesArgs{}
}

func (p *GetAcceptedProximityMatchesArgs) GetSessionId() string {
	return p.SessionId
}
func (p *GetAcceptedProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetAcceptedProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *GetAcceptedProximityMatchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAcceptedProximityMatchesArgs(%+v)", *p)
}

type GetAcceptedProximityMatchesResult struct {
	Success map[string]bool `thrift:"success,0" json:"success"`
	E       *TalkException  `thrift:"e,1" json:"e"`
}

func NewGetAcceptedProximityMatchesResult() *GetAcceptedProximityMatchesResult {
	return &GetAcceptedProximityMatchesResult{}
}

var GetAcceptedProximityMatchesResult_Success_DEFAULT map[string]bool

func (p *GetAcceptedProximityMatchesResult) GetSuccess() map[string]bool {
	return p.Success
}

var GetAcceptedProximityMatchesResult_E_DEFAULT *TalkException

func (p *GetAcceptedProximityMatchesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetAcceptedProximityMatchesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetAcceptedProximityMatchesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAcceptedProximityMatchesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetAcceptedProximityMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem605 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem605 = v
		}
		p.Success[_elem605] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAcceptedProximityMatches_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAcceptedProximityMatchesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAcceptedProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetAcceptedProximityMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAcceptedProximityMatchesResult(%+v)", *p)
}

type GetActiveBuddySubscriberIdsArgs struct {
}

func NewGetActiveBuddySubscriberIdsArgs() *GetActiveBuddySubscriberIdsArgs {
	return &GetActiveBuddySubscriberIdsArgs{}
}

func (p *GetActiveBuddySubscriberIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveBuddySubscriberIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActiveBuddySubscriberIdsArgs(%+v)", *p)
}

type GetActiveBuddySubscriberIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetActiveBuddySubscriberIdsResult() *GetActiveBuddySubscriberIdsResult {
	return &GetActiveBuddySubscriberIdsResult{}
}

var GetActiveBuddySubscriberIdsResult_Success_DEFAULT []string

func (p *GetActiveBuddySubscriberIdsResult) GetSuccess() []string {
	return p.Success
}

var GetActiveBuddySubscriberIdsResult_E_DEFAULT *TalkException

func (p *GetActiveBuddySubscriberIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetActiveBuddySubscriberIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetActiveBuddySubscriberIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActiveBuddySubscriberIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetActiveBuddySubscriberIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem606 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem606 = v
		}
		p.Success = append(p.Success, _elem606)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveBuddySubscriberIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActiveBuddySubscriberIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetActiveBuddySubscriberIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetActiveBuddySubscriberIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActiveBuddySubscriberIdsResult(%+v)", *p)
}

type GetAllContactIdsArgs struct {
}

func NewGetAllContactIdsArgs() *GetAllContactIdsArgs {
	return &GetAllContactIdsArgs{}
}

func (p *GetAllContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllContactIdsArgs(%+v)", *p)
}

type GetAllContactIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetAllContactIdsResult() *GetAllContactIdsResult {
	return &GetAllContactIdsResult{}
}

var GetAllContactIdsResult_Success_DEFAULT []string

func (p *GetAllContactIdsResult) GetSuccess() []string {
	return p.Success
}

var GetAllContactIdsResult_E_DEFAULT *TalkException

func (p *GetAllContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetAllContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetAllContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetAllContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllContactIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem607 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem607 = v
		}
		p.Success = append(p.Success, _elem607)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllContactIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetAllContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllContactIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetAllContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllContactIdsResult(%+v)", *p)
}

type GetAuthQrcodeArgs struct {
	// unused field # 1
	KeepLoggedIn bool   `thrift:"keepLoggedIn,2" json:"keepLoggedIn"`
	SystemName   string `thrift:"systemName,3" json:"systemName"`
}

func NewGetAuthQrcodeArgs() *GetAuthQrcodeArgs {
	return &GetAuthQrcodeArgs{}
}

func (p *GetAuthQrcodeArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *GetAuthQrcodeArgs) GetSystemName() string {
	return p.SystemName
}
func (p *GetAuthQrcodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAuthQrcodeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *GetAuthQrcodeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *GetAuthQrcodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAuthQrcode_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAuthQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:keepLoggedIn: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return fmt.Errorf("%T.keepLoggedIn (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:keepLoggedIn: %s", p, err)
	}
	return err
}

func (p *GetAuthQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:systemName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return fmt.Errorf("%T.systemName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:systemName: %s", p, err)
	}
	return err
}

func (p *GetAuthQrcodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAuthQrcodeArgs(%+v)", *p)
}

type GetAuthQrcodeResult struct {
	Success *AuthQrcode    `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetAuthQrcodeResult() *GetAuthQrcodeResult {
	return &GetAuthQrcodeResult{}
}

var GetAuthQrcodeResult_Success_DEFAULT *AuthQrcode

func (p *GetAuthQrcodeResult) GetSuccess() *AuthQrcode {
	if !p.IsSetSuccess() {
		return GetAuthQrcodeResult_Success_DEFAULT
	}
	return p.Success
}

var GetAuthQrcodeResult_E_DEFAULT *TalkException

func (p *GetAuthQrcodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetAuthQrcodeResult_E_DEFAULT
	}
	return p.E
}
func (p *GetAuthQrcodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAuthQrcodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetAuthQrcodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAuthQrcodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AuthQrcode{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetAuthQrcodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetAuthQrcodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAuthQrcode_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAuthQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAuthQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetAuthQrcodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAuthQrcodeResult(%+v)", *p)
}

type GetBlockedContactIdsArgs struct {
}

func NewGetBlockedContactIdsArgs() *GetBlockedContactIdsArgs {
	return &GetBlockedContactIdsArgs{}
}

func (p *GetBlockedContactIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedContactIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedContactIdsArgs(%+v)", *p)
}

type GetBlockedContactIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetBlockedContactIdsResult() *GetBlockedContactIdsResult {
	return &GetBlockedContactIdsResult{}
}

var GetBlockedContactIdsResult_Success_DEFAULT []string

func (p *GetBlockedContactIdsResult) GetSuccess() []string {
	return p.Success
}

var GetBlockedContactIdsResult_E_DEFAULT *TalkException

func (p *GetBlockedContactIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetBlockedContactIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBlockedContactIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBlockedContactIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBlockedContactIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedContactIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem608 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem608 = v
		}
		p.Success = append(p.Success, _elem608)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBlockedContactIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedContactIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedContactIdsResult(%+v)", *p)
}

type GetBlockedContactIdsByRangeArgs struct {
	// unused field # 1
	Start int32 `thrift:"start,2" json:"start"`
	Count int32 `thrift:"count,3" json:"count"`
}

func NewGetBlockedContactIdsByRangeArgs() *GetBlockedContactIdsByRangeArgs {
	return &GetBlockedContactIdsByRangeArgs{}
}

func (p *GetBlockedContactIdsByRangeArgs) GetStart() int32 {
	return p.Start
}

func (p *GetBlockedContactIdsByRangeArgs) GetCount() int32 {
	return p.Count
}
func (p *GetBlockedContactIdsByRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIdsByRange_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetBlockedContactIdsByRangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:count: %s", p, err)
	}
	return err
}

func (p *GetBlockedContactIdsByRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedContactIdsByRangeArgs(%+v)", *p)
}

type GetBlockedContactIdsByRangeResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetBlockedContactIdsByRangeResult() *GetBlockedContactIdsByRangeResult {
	return &GetBlockedContactIdsByRangeResult{}
}

var GetBlockedContactIdsByRangeResult_Success_DEFAULT []string

func (p *GetBlockedContactIdsByRangeResult) GetSuccess() []string {
	return p.Success
}

var GetBlockedContactIdsByRangeResult_E_DEFAULT *TalkException

func (p *GetBlockedContactIdsByRangeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetBlockedContactIdsByRangeResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBlockedContactIdsByRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBlockedContactIdsByRangeResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBlockedContactIdsByRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem609 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem609 = v
		}
		p.Success = append(p.Success, _elem609)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedContactIdsByRange_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedContactIdsByRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedContactIdsByRangeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedContactIdsByRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedContactIdsByRangeResult(%+v)", *p)
}

type GetBlockedRecommendationIdsArgs struct {
}

func NewGetBlockedRecommendationIdsArgs() *GetBlockedRecommendationIdsArgs {
	return &GetBlockedRecommendationIdsArgs{}
}

func (p *GetBlockedRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedRecommendationIdsArgs(%+v)", *p)
}

type GetBlockedRecommendationIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetBlockedRecommendationIdsResult() *GetBlockedRecommendationIdsResult {
	return &GetBlockedRecommendationIdsResult{}
}

var GetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *GetBlockedRecommendationIdsResult) GetSuccess() []string {
	return p.Success
}

var GetBlockedRecommendationIdsResult_E_DEFAULT *TalkException

func (p *GetBlockedRecommendationIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetBlockedRecommendationIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBlockedRecommendationIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBlockedRecommendationIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBlockedRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem610 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem610 = v
		}
		p.Success = append(p.Success, _elem610)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockedRecommendationIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBlockedRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBlockedRecommendationIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBlockedRecommendationIdsResult(%+v)", *p)
}

type GetBuddyBlockerIdsArgs struct {
}

func NewGetBuddyBlockerIdsArgs() *GetBuddyBlockerIdsArgs {
	return &GetBuddyBlockerIdsArgs{}
}

func (p *GetBuddyBlockerIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyBlockerIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBuddyBlockerIdsArgs(%+v)", *p)
}

type GetBuddyBlockerIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetBuddyBlockerIdsResult() *GetBuddyBlockerIdsResult {
	return &GetBuddyBlockerIdsResult{}
}

var GetBuddyBlockerIdsResult_Success_DEFAULT []string

func (p *GetBuddyBlockerIdsResult) GetSuccess() []string {
	return p.Success
}

var GetBuddyBlockerIdsResult_E_DEFAULT *TalkException

func (p *GetBuddyBlockerIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetBuddyBlockerIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBuddyBlockerIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBuddyBlockerIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBuddyBlockerIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem611 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem611 = v
		}
		p.Success = append(p.Success, _elem611)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyBlockerIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBuddyBlockerIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBuddyBlockerIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBuddyBlockerIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBuddyBlockerIdsResult(%+v)", *p)
}

type GetBuddyLocationArgs struct {
	// unused field # 1
	Mid   string `thrift:"mid,2" json:"mid"`
	Index int32  `thrift:"index,3" json:"index"`
}

func NewGetBuddyLocationArgs() *GetBuddyLocationArgs {
	return &GetBuddyLocationArgs{}
}

func (p *GetBuddyLocationArgs) GetMid() string {
	return p.Mid
}

func (p *GetBuddyLocationArgs) GetIndex() int32 {
	return p.Index
}
func (p *GetBuddyLocationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBuddyLocationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *GetBuddyLocationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *GetBuddyLocationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyLocation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBuddyLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *GetBuddyLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return fmt.Errorf("%T.index (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index: %s", p, err)
	}
	return err
}

func (p *GetBuddyLocationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBuddyLocationArgs(%+v)", *p)
}

type GetBuddyLocationResult struct {
	Success *Geolocation   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetBuddyLocationResult() *GetBuddyLocationResult {
	return &GetBuddyLocationResult{}
}

var GetBuddyLocationResult_Success_DEFAULT *Geolocation

func (p *GetBuddyLocationResult) GetSuccess() *Geolocation {
	if !p.IsSetSuccess() {
		return GetBuddyLocationResult_Success_DEFAULT
	}
	return p.Success
}

var GetBuddyLocationResult_E_DEFAULT *TalkException

func (p *GetBuddyLocationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetBuddyLocationResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBuddyLocationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBuddyLocationResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBuddyLocationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBuddyLocationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Geolocation{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetBuddyLocationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBuddyLocationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBuddyLocation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBuddyLocationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBuddyLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBuddyLocationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBuddyLocationResult(%+v)", *p)
}

type GetCompactContactsModifiedSinceArgs struct {
	// unused field # 1
	Timestamp int64 `thrift:"timestamp,2" json:"timestamp"`
}

func NewGetCompactContactsModifiedSinceArgs() *GetCompactContactsModifiedSinceArgs {
	return &GetCompactContactsModifiedSinceArgs{}
}

func (p *GetCompactContactsModifiedSinceArgs) GetTimestamp() int64 {
	return p.Timestamp
}
func (p *GetCompactContactsModifiedSinceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactContactsModifiedSince_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:timestamp: %s", p, err)
	}
	return err
}

func (p *GetCompactContactsModifiedSinceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactContactsModifiedSinceArgs(%+v)", *p)
}

type GetCompactContactsModifiedSinceResult struct {
	Success []*CompactContact `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewGetCompactContactsModifiedSinceResult() *GetCompactContactsModifiedSinceResult {
	return &GetCompactContactsModifiedSinceResult{}
}

var GetCompactContactsModifiedSinceResult_Success_DEFAULT []*CompactContact

func (p *GetCompactContactsModifiedSinceResult) GetSuccess() []*CompactContact {
	return p.Success
}

var GetCompactContactsModifiedSinceResult_E_DEFAULT *TalkException

func (p *GetCompactContactsModifiedSinceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCompactContactsModifiedSinceResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCompactContactsModifiedSinceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCompactContactsModifiedSinceResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCompactContactsModifiedSinceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*CompactContact, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem612 := &CompactContact{}
		if err := _elem612.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem612, err)
		}
		p.Success = append(p.Success, _elem612)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactContactsModifiedSince_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactContactsModifiedSinceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactContactsModifiedSinceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactContactsModifiedSinceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactContactsModifiedSinceResult(%+v)", *p)
}

type GetCompactGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewGetCompactGroupArgs() *GetCompactGroupArgs {
	return &GetCompactGroupArgs{}
}

func (p *GetCompactGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *GetCompactGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GetCompactGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *GetCompactGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactGroupArgs(%+v)", *p)
}

type GetCompactGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetCompactGroupResult() *GetCompactGroupResult {
	return &GetCompactGroupResult{}
}

var GetCompactGroupResult_Success_DEFAULT *Group

func (p *GetCompactGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return GetCompactGroupResult_Success_DEFAULT
	}
	return p.Success
}

var GetCompactGroupResult_E_DEFAULT *TalkException

func (p *GetCompactGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCompactGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCompactGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCompactGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCompactGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetCompactGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCompactGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactGroupResult(%+v)", *p)
}

type GetCompactRoomArgs struct {
	// unused field # 1
	RoomId string `thrift:"roomId,2" json:"roomId"`
}

func NewGetCompactRoomArgs() *GetCompactRoomArgs {
	return &GetCompactRoomArgs{}
}

func (p *GetCompactRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *GetCompactRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *GetCompactRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactRoom_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roomId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return fmt.Errorf("%T.roomId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roomId: %s", p, err)
	}
	return err
}

func (p *GetCompactRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactRoomArgs(%+v)", *p)
}

type GetCompactRoomResult struct {
	Success *Room          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetCompactRoomResult() *GetCompactRoomResult {
	return &GetCompactRoomResult{}
}

var GetCompactRoomResult_Success_DEFAULT *Room

func (p *GetCompactRoomResult) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return GetCompactRoomResult_Success_DEFAULT
	}
	return p.Success
}

var GetCompactRoomResult_E_DEFAULT *TalkException

func (p *GetCompactRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCompactRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCompactRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCompactRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCompactRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCompactRoomResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetCompactRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCompactRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCompactRoom_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCompactRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCompactRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCompactRoomResult(%+v)", *p)
}

type GetContactArgs struct {
	// unused field # 1
	Id string `thrift:"id,2" json:"id"`
}

func NewGetContactArgs() *GetContactArgs {
	return &GetContactArgs{}
}

func (p *GetContactArgs) GetId() string {
	return p.Id
}
func (p *GetContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *GetContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactArgs(%+v)", *p)
}

type GetContactResult struct {
	Success *Contact       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetContactResult() *GetContactResult {
	return &GetContactResult{}
}

var GetContactResult_Success_DEFAULT *Contact

func (p *GetContactResult) GetSuccess() *Contact {
	if !p.IsSetSuccess() {
		return GetContactResult_Success_DEFAULT
	}
	return p.Success
}

var GetContactResult_E_DEFAULT *TalkException

func (p *GetContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetContactResult_E_DEFAULT
	}
	return p.E
}
func (p *GetContactResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetContactResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Contact{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetContactResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactResult(%+v)", *p)
}

type GetContactsArgs struct {
	// unused field # 1
	Ids []string `thrift:"ids,2" json:"ids"`
}

func NewGetContactsArgs() *GetContactsArgs {
	return &GetContactsArgs{}
}

func (p *GetContactsArgs) GetIds() []string {
	return p.Ids
}
func (p *GetContactsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetContactsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem613 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem613 = v
		}
		p.Ids = append(p.Ids, _elem613)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetContactsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ids: %s", p, err)
	}
	return err
}

func (p *GetContactsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactsArgs(%+v)", *p)
}

type GetContactsResult struct {
	Success []*Contact     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetContactsResult() *GetContactsResult {
	return &GetContactsResult{}
}

var GetContactsResult_Success_DEFAULT []*Contact

func (p *GetContactsResult) GetSuccess() []*Contact {
	return p.Success
}

var GetContactsResult_E_DEFAULT *TalkException

func (p *GetContactsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetContactsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetContactsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetContactsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetContactsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetContactsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Contact, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem614 := &Contact{}
		if err := _elem614.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem614, err)
		}
		p.Success = append(p.Success, _elem614)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetContactsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetContactsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getContacts_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetContactsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactsResult(%+v)", *p)
}

type GetCountryWithRequestIpArgs struct {
}

func NewGetCountryWithRequestIpArgs() *GetCountryWithRequestIpArgs {
	return &GetCountryWithRequestIpArgs{}
}

func (p *GetCountryWithRequestIpArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCountryWithRequestIpArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCountryWithRequestIpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCountryWithRequestIpArgs(%+v)", *p)
}

type GetCountryWithRequestIpResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetCountryWithRequestIpResult() *GetCountryWithRequestIpResult {
	return &GetCountryWithRequestIpResult{}
}

var GetCountryWithRequestIpResult_Success_DEFAULT string

func (p *GetCountryWithRequestIpResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetCountryWithRequestIpResult_Success_DEFAULT
	}
	return *p.Success
}

var GetCountryWithRequestIpResult_E_DEFAULT *TalkException

func (p *GetCountryWithRequestIpResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCountryWithRequestIpResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCountryWithRequestIpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCountryWithRequestIpResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCountryWithRequestIpResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCountryWithRequestIpResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetCountryWithRequestIpResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCountryWithRequestIpResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountryWithRequestIp_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCountryWithRequestIpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCountryWithRequestIpResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCountryWithRequestIpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCountryWithRequestIpResult(%+v)", *p)
}

type GetFavoriteMidsArgs struct {
}

func NewGetFavoriteMidsArgs() *GetFavoriteMidsArgs {
	return &GetFavoriteMidsArgs{}
}

func (p *GetFavoriteMidsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFavoriteMidsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFavoriteMids_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFavoriteMidsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteMidsArgs(%+v)", *p)
}

type GetFavoriteMidsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetFavoriteMidsResult() *GetFavoriteMidsResult {
	return &GetFavoriteMidsResult{}
}

var GetFavoriteMidsResult_Success_DEFAULT []string

func (p *GetFavoriteMidsResult) GetSuccess() []string {
	return p.Success
}

var GetFavoriteMidsResult_E_DEFAULT *TalkException

func (p *GetFavoriteMidsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetFavoriteMidsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetFavoriteMidsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFavoriteMidsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetFavoriteMidsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFavoriteMidsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem615 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem615 = v
		}
		p.Success = append(p.Success, _elem615)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetFavoriteMidsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetFavoriteMidsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFavoriteMids_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFavoriteMidsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFavoriteMidsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetFavoriteMidsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFavoriteMidsResult(%+v)", *p)
}

type GetGroupArgs struct {
	// unused field # 1
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewGetGroupArgs() *GetGroupArgs {
	return &GetGroupArgs{}
}

func (p *GetGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *GetGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GetGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *GetGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupArgs(%+v)", *p)
}

type GetGroupResult struct {
	Success *Group         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetGroupResult() *GetGroupResult {
	return &GetGroupResult{}
}

var GetGroupResult_Success_DEFAULT *Group

func (p *GetGroupResult) GetSuccess() *Group {
	if !p.IsSetSuccess() {
		return GetGroupResult_Success_DEFAULT
	}
	return p.Success
}

var GetGroupResult_E_DEFAULT *TalkException

func (p *GetGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *GetGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Group{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupResult(%+v)", *p)
}

type GetGroupIdsInvitedArgs struct {
}

func NewGetGroupIdsInvitedArgs() *GetGroupIdsInvitedArgs {
	return &GetGroupIdsInvitedArgs{}
}

func (p *GetGroupIdsInvitedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupIdsInvitedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupIdsInvitedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupIdsInvitedArgs(%+v)", *p)
}

type GetGroupIdsInvitedResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetGroupIdsInvitedResult() *GetGroupIdsInvitedResult {
	return &GetGroupIdsInvitedResult{}
}

var GetGroupIdsInvitedResult_Success_DEFAULT []string

func (p *GetGroupIdsInvitedResult) GetSuccess() []string {
	return p.Success
}

var GetGroupIdsInvitedResult_E_DEFAULT *TalkException

func (p *GetGroupIdsInvitedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetGroupIdsInvitedResult_E_DEFAULT
	}
	return p.E
}
func (p *GetGroupIdsInvitedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGroupIdsInvitedResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetGroupIdsInvitedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupIdsInvitedResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem616 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem616 = v
		}
		p.Success = append(p.Success, _elem616)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetGroupIdsInvitedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetGroupIdsInvitedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsInvited_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupIdsInvitedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupIdsInvitedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupIdsInvitedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupIdsInvitedResult(%+v)", *p)
}

type GetGroupIdsJoinedArgs struct {
}

func NewGetGroupIdsJoinedArgs() *GetGroupIdsJoinedArgs {
	return &GetGroupIdsJoinedArgs{}
}

func (p *GetGroupIdsJoinedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupIdsJoinedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupIdsJoinedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupIdsJoinedArgs(%+v)", *p)
}

type GetGroupIdsJoinedResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetGroupIdsJoinedResult() *GetGroupIdsJoinedResult {
	return &GetGroupIdsJoinedResult{}
}

var GetGroupIdsJoinedResult_Success_DEFAULT []string

func (p *GetGroupIdsJoinedResult) GetSuccess() []string {
	return p.Success
}

var GetGroupIdsJoinedResult_E_DEFAULT *TalkException

func (p *GetGroupIdsJoinedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetGroupIdsJoinedResult_E_DEFAULT
	}
	return p.E
}
func (p *GetGroupIdsJoinedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGroupIdsJoinedResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetGroupIdsJoinedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupIdsJoinedResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem617 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem617 = v
		}
		p.Success = append(p.Success, _elem617)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetGroupIdsJoinedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetGroupIdsJoinedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroupIdsJoined_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupIdsJoinedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupIdsJoinedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupIdsJoinedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupIdsJoinedResult(%+v)", *p)
}

type GetGroupsArgs struct {
	// unused field # 1
	GroupIds []string `thrift:"groupIds,2" json:"groupIds"`
}

func NewGetGroupsArgs() *GetGroupsArgs {
	return &GetGroupsArgs{}
}

func (p *GetGroupsArgs) GetGroupIds() []string {
	return p.GroupIds
}
func (p *GetGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupIds = tSlice
	for i := 0; i < size; i++ {
		var _elem618 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem618 = v
		}
		p.GroupIds = append(p.GroupIds, _elem618)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupIds", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupIds: %s", p, err)
	}
	return err
}

func (p *GetGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupsArgs(%+v)", *p)
}

type GetGroupsResult struct {
	Success []*Group       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetGroupsResult() *GetGroupsResult {
	return &GetGroupsResult{}
}

var GetGroupsResult_Success_DEFAULT []*Group

func (p *GetGroupsResult) GetSuccess() []*Group {
	return p.Success
}

var GetGroupsResult_E_DEFAULT *TalkException

func (p *GetGroupsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetGroupsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGroupsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetGroupsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem619 := &Group{}
		if err := _elem619.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem619, err)
		}
		p.Success = append(p.Success, _elem619)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetGroupsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGroups_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGroupsResult(%+v)", *p)
}

type GetHiddenContactMidsArgs struct {
}

func NewGetHiddenContactMidsArgs() *GetHiddenContactMidsArgs {
	return &GetHiddenContactMidsArgs{}
}

func (p *GetHiddenContactMidsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetHiddenContactMidsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHiddenContactMids_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetHiddenContactMidsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHiddenContactMidsArgs(%+v)", *p)
}

type GetHiddenContactMidsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetHiddenContactMidsResult() *GetHiddenContactMidsResult {
	return &GetHiddenContactMidsResult{}
}

var GetHiddenContactMidsResult_Success_DEFAULT []string

func (p *GetHiddenContactMidsResult) GetSuccess() []string {
	return p.Success
}

var GetHiddenContactMidsResult_E_DEFAULT *TalkException

func (p *GetHiddenContactMidsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetHiddenContactMidsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetHiddenContactMidsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetHiddenContactMidsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetHiddenContactMidsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetHiddenContactMidsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem620 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem620 = v
		}
		p.Success = append(p.Success, _elem620)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetHiddenContactMidsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetHiddenContactMidsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHiddenContactMids_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetHiddenContactMidsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetHiddenContactMidsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetHiddenContactMidsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHiddenContactMidsResult(%+v)", *p)
}

type GetIdentityIdentifierArgs struct {
}

func NewGetIdentityIdentifierArgs() *GetIdentityIdentifierArgs {
	return &GetIdentityIdentifierArgs{}
}

func (p *GetIdentityIdentifierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIdentityIdentifierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIdentityIdentifier_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIdentityIdentifierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIdentityIdentifierArgs(%+v)", *p)
}

type GetIdentityIdentifierResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetIdentityIdentifierResult() *GetIdentityIdentifierResult {
	return &GetIdentityIdentifierResult{}
}

var GetIdentityIdentifierResult_Success_DEFAULT string

func (p *GetIdentityIdentifierResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetIdentityIdentifierResult_Success_DEFAULT
	}
	return *p.Success
}

var GetIdentityIdentifierResult_E_DEFAULT *TalkException

func (p *GetIdentityIdentifierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetIdentityIdentifierResult_E_DEFAULT
	}
	return p.E
}
func (p *GetIdentityIdentifierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIdentityIdentifierResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetIdentityIdentifierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIdentityIdentifierResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetIdentityIdentifierResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetIdentityIdentifierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIdentityIdentifier_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIdentityIdentifierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIdentityIdentifierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetIdentityIdentifierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIdentityIdentifierResult(%+v)", *p)
}

type GetLastAnnouncementIndexArgs struct {
}

func NewGetLastAnnouncementIndexArgs() *GetLastAnnouncementIndexArgs {
	return &GetLastAnnouncementIndexArgs{}
}

func (p *GetLastAnnouncementIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastAnnouncementIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastAnnouncementIndex_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastAnnouncementIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastAnnouncementIndexArgs(%+v)", *p)
}

type GetLastAnnouncementIndexResult struct {
	Success *int32         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetLastAnnouncementIndexResult() *GetLastAnnouncementIndexResult {
	return &GetLastAnnouncementIndexResult{}
}

var GetLastAnnouncementIndexResult_Success_DEFAULT int32

func (p *GetLastAnnouncementIndexResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return GetLastAnnouncementIndexResult_Success_DEFAULT
	}
	return *p.Success
}

var GetLastAnnouncementIndexResult_E_DEFAULT *TalkException

func (p *GetLastAnnouncementIndexResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetLastAnnouncementIndexResult_E_DEFAULT
	}
	return p.E
}
func (p *GetLastAnnouncementIndexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLastAnnouncementIndexResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetLastAnnouncementIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastAnnouncementIndexResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetLastAnnouncementIndexResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetLastAnnouncementIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastAnnouncementIndex_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastAnnouncementIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetLastAnnouncementIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetLastAnnouncementIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastAnnouncementIndexResult(%+v)", *p)
}

type GetLastOpRevisionArgs struct {
}

func NewGetLastOpRevisionArgs() *GetLastOpRevisionArgs {
	return &GetLastOpRevisionArgs{}
}

func (p *GetLastOpRevisionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastOpRevisionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastOpRevisionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastOpRevisionArgs(%+v)", *p)
}

type GetLastOpRevisionResult struct {
	Success *int64         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetLastOpRevisionResult() *GetLastOpRevisionResult {
	return &GetLastOpRevisionResult{}
}

var GetLastOpRevisionResult_Success_DEFAULT int64

func (p *GetLastOpRevisionResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return GetLastOpRevisionResult_Success_DEFAULT
	}
	return *p.Success
}

var GetLastOpRevisionResult_E_DEFAULT *TalkException

func (p *GetLastOpRevisionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetLastOpRevisionResult_E_DEFAULT
	}
	return p.E
}
func (p *GetLastOpRevisionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLastOpRevisionResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetLastOpRevisionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastOpRevisionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetLastOpRevisionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetLastOpRevisionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastOpRevision_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastOpRevisionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetLastOpRevisionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetLastOpRevisionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastOpRevisionResult(%+v)", *p)
}

type GetMessageBoxArgs struct {
	// unused field # 1
	ChannelId         string `thrift:"channelId,2" json:"channelId"`
	MessageBoxId      string `thrift:"messageBoxId,3" json:"messageBoxId"`
	LastMessagesCount int32  `thrift:"lastMessagesCount,4" json:"lastMessagesCount"`
}

func NewGetMessageBoxArgs() *GetMessageBoxArgs {
	return &GetMessageBoxArgs{}
}

func (p *GetMessageBoxArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *GetMessageBoxArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}

func (p *GetMessageBoxArgs) GetLastMessagesCount() int32 {
	return p.LastMessagesCount
}
func (p *GetMessageBoxArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *GetMessageBoxArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *GetMessageBoxArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.LastMessagesCount = v
	}
	return nil
}

func (p *GetMessageBoxArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBox_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBoxId: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessagesCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:lastMessagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastMessagesCount)); err != nil {
		return fmt.Errorf("%T.lastMessagesCount (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:lastMessagesCount: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxArgs(%+v)", *p)
}

type GetMessageBoxResult struct {
	Success *TMessageBox   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxResult() *GetMessageBoxResult {
	return &GetMessageBoxResult{}
}

var GetMessageBoxResult_Success_DEFAULT *TMessageBox

func (p *GetMessageBoxResult) GetSuccess() *TMessageBox {
	if !p.IsSetSuccess() {
		return GetMessageBoxResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageBoxResult_E_DEFAULT *TalkException

func (p *GetMessageBoxResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TMessageBox{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageBoxResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBox_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxResult(%+v)", *p)
}

type GetMessageBoxCompactWrapUpArgs struct {
	// unused field # 1
	Mid string `thrift:"mid,2" json:"mid"`
}

func NewGetMessageBoxCompactWrapUpArgs() *GetMessageBoxCompactWrapUpArgs {
	return &GetMessageBoxCompactWrapUpArgs{}
}

func (p *GetMessageBoxCompactWrapUpArgs) GetMid() string {
	return p.Mid
}
func (p *GetMessageBoxCompactWrapUpArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxCompactWrapUp_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxCompactWrapUpArgs(%+v)", *p)
}

type GetMessageBoxCompactWrapUpResult struct {
	Success *TMessageBoxWrapUp `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxCompactWrapUpResult() *GetMessageBoxCompactWrapUpResult {
	return &GetMessageBoxCompactWrapUpResult{}
}

var GetMessageBoxCompactWrapUpResult_Success_DEFAULT *TMessageBoxWrapUp

func (p *GetMessageBoxCompactWrapUpResult) GetSuccess() *TMessageBoxWrapUp {
	if !p.IsSetSuccess() {
		return GetMessageBoxCompactWrapUpResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageBoxCompactWrapUpResult_E_DEFAULT *TalkException

func (p *GetMessageBoxCompactWrapUpResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxCompactWrapUpResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxCompactWrapUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxCompactWrapUpResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxCompactWrapUpResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TMessageBoxWrapUp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxCompactWrapUp_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxCompactWrapUpResult(%+v)", *p)
}

type GetMessageBoxCompactWrapUpListArgs struct {
	// unused field # 1
	Start           int32 `thrift:"start,2" json:"start"`
	MessageBoxCount int32 `thrift:"messageBoxCount,3" json:"messageBoxCount"`
}

func NewGetMessageBoxCompactWrapUpListArgs() *GetMessageBoxCompactWrapUpListArgs {
	return &GetMessageBoxCompactWrapUpListArgs{}
}

func (p *GetMessageBoxCompactWrapUpListArgs) GetStart() int32 {
	return p.Start
}

func (p *GetMessageBoxCompactWrapUpListArgs) GetMessageBoxCount() int32 {
	return p.MessageBoxCount
}
func (p *GetMessageBoxCompactWrapUpListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBoxCount = v
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxCompactWrapUpList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBoxCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageBoxCount)); err != nil {
		return fmt.Errorf("%T.messageBoxCount (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBoxCount: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxCompactWrapUpListArgs(%+v)", *p)
}

type GetMessageBoxCompactWrapUpListResult struct {
	Success *TMessageBoxWrapUpResponse `thrift:"success,0" json:"success"`
	E       *TalkException             `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxCompactWrapUpListResult() *GetMessageBoxCompactWrapUpListResult {
	return &GetMessageBoxCompactWrapUpListResult{}
}

var GetMessageBoxCompactWrapUpListResult_Success_DEFAULT *TMessageBoxWrapUpResponse

func (p *GetMessageBoxCompactWrapUpListResult) GetSuccess() *TMessageBoxWrapUpResponse {
	if !p.IsSetSuccess() {
		return GetMessageBoxCompactWrapUpListResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageBoxCompactWrapUpListResult_E_DEFAULT *TalkException

func (p *GetMessageBoxCompactWrapUpListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxCompactWrapUpListResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxCompactWrapUpListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxCompactWrapUpListResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxCompactWrapUpListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TMessageBoxWrapUpResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxCompactWrapUpList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxCompactWrapUpListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxCompactWrapUpListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxCompactWrapUpListResult(%+v)", *p)
}

type GetMessageBoxListArgs struct {
	// unused field # 1
	ChannelId         string `thrift:"channelId,2" json:"channelId"`
	LastMessagesCount int32  `thrift:"lastMessagesCount,3" json:"lastMessagesCount"`
}

func NewGetMessageBoxListArgs() *GetMessageBoxListArgs {
	return &GetMessageBoxListArgs{}
}

func (p *GetMessageBoxListArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *GetMessageBoxListArgs) GetLastMessagesCount() int32 {
	return p.LastMessagesCount
}
func (p *GetMessageBoxListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *GetMessageBoxListArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastMessagesCount = v
	}
	return nil
}

func (p *GetMessageBoxListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessagesCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastMessagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastMessagesCount)); err != nil {
		return fmt.Errorf("%T.lastMessagesCount (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastMessagesCount: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxListArgs(%+v)", *p)
}

type GetMessageBoxListResult struct {
	Success []*TMessageBox `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxListResult() *GetMessageBoxListResult {
	return &GetMessageBoxListResult{}
}

var GetMessageBoxListResult_Success_DEFAULT []*TMessageBox

func (p *GetMessageBoxListResult) GetSuccess() []*TMessageBox {
	return p.Success
}

var GetMessageBoxListResult_E_DEFAULT *TalkException

func (p *GetMessageBoxListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxListResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxListResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMessageBox, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem621 := &TMessageBox{}
		if err := _elem621.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem621, err)
		}
		p.Success = append(p.Success, _elem621)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxListResult(%+v)", *p)
}

type GetMessageBoxListByStatusArgs struct {
	// unused field # 1
	ChannelId         string `thrift:"channelId,2" json:"channelId"`
	LastMessagesCount int32  `thrift:"lastMessagesCount,3" json:"lastMessagesCount"`
	Status            int32  `thrift:"status,4" json:"status"`
}

func NewGetMessageBoxListByStatusArgs() *GetMessageBoxListByStatusArgs {
	return &GetMessageBoxListByStatusArgs{}
}

func (p *GetMessageBoxListByStatusArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *GetMessageBoxListByStatusArgs) GetLastMessagesCount() int32 {
	return p.LastMessagesCount
}

func (p *GetMessageBoxListByStatusArgs) GetStatus() int32 {
	return p.Status
}
func (p *GetMessageBoxListByStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *GetMessageBoxListByStatusArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastMessagesCount = v
	}
	return nil
}

func (p *GetMessageBoxListByStatusArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetMessageBoxListByStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxListByStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxListByStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessagesCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastMessagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastMessagesCount)); err != nil {
		return fmt.Errorf("%T.lastMessagesCount (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastMessagesCount: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxListByStatusArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:status: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxListByStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxListByStatusArgs(%+v)", *p)
}

type GetMessageBoxListByStatusResult struct {
	Success []*TMessageBox `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxListByStatusResult() *GetMessageBoxListByStatusResult {
	return &GetMessageBoxListByStatusResult{}
}

var GetMessageBoxListByStatusResult_Success_DEFAULT []*TMessageBox

func (p *GetMessageBoxListByStatusResult) GetSuccess() []*TMessageBox {
	return p.Success
}

var GetMessageBoxListByStatusResult_E_DEFAULT *TalkException

func (p *GetMessageBoxListByStatusResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxListByStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxListByStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxListByStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxListByStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMessageBox, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem622 := &TMessageBox{}
		if err := _elem622.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem622, err)
		}
		p.Success = append(p.Success, _elem622)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxListByStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxListByStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxListByStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxListByStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxListByStatusResult(%+v)", *p)
}

type GetMessageBoxWrapUpArgs struct {
	// unused field # 1
	Mid string `thrift:"mid,2" json:"mid"`
}

func NewGetMessageBoxWrapUpArgs() *GetMessageBoxWrapUpArgs {
	return &GetMessageBoxWrapUpArgs{}
}

func (p *GetMessageBoxWrapUpArgs) GetMid() string {
	return p.Mid
}
func (p *GetMessageBoxWrapUpArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *GetMessageBoxWrapUpArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxWrapUp_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxWrapUpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxWrapUpArgs(%+v)", *p)
}

type GetMessageBoxWrapUpResult struct {
	Success *TMessageBoxWrapUp `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxWrapUpResult() *GetMessageBoxWrapUpResult {
	return &GetMessageBoxWrapUpResult{}
}

var GetMessageBoxWrapUpResult_Success_DEFAULT *TMessageBoxWrapUp

func (p *GetMessageBoxWrapUpResult) GetSuccess() *TMessageBoxWrapUp {
	if !p.IsSetSuccess() {
		return GetMessageBoxWrapUpResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageBoxWrapUpResult_E_DEFAULT *TalkException

func (p *GetMessageBoxWrapUpResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxWrapUpResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxWrapUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxWrapUpResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxWrapUpResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TMessageBoxWrapUp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxWrapUp_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxWrapUpResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxWrapUpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxWrapUpResult(%+v)", *p)
}

type GetMessageBoxWrapUpListArgs struct {
	// unused field # 1
	Start           int32 `thrift:"start,2" json:"start"`
	MessageBoxCount int32 `thrift:"messageBoxCount,3" json:"messageBoxCount"`
}

func NewGetMessageBoxWrapUpListArgs() *GetMessageBoxWrapUpListArgs {
	return &GetMessageBoxWrapUpListArgs{}
}

func (p *GetMessageBoxWrapUpListArgs) GetStart() int32 {
	return p.Start
}

func (p *GetMessageBoxWrapUpListArgs) GetMessageBoxCount() int32 {
	return p.MessageBoxCount
}
func (p *GetMessageBoxWrapUpListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetMessageBoxWrapUpListArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBoxCount = v
	}
	return nil
}

func (p *GetMessageBoxWrapUpListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxWrapUpList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxWrapUpListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBoxCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageBoxCount)); err != nil {
		return fmt.Errorf("%T.messageBoxCount (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBoxCount: %s", p, err)
	}
	return err
}

func (p *GetMessageBoxWrapUpListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxWrapUpListArgs(%+v)", *p)
}

type GetMessageBoxWrapUpListResult struct {
	Success *TMessageBoxWrapUpResponse `thrift:"success,0" json:"success"`
	E       *TalkException             `thrift:"e,1" json:"e"`
}

func NewGetMessageBoxWrapUpListResult() *GetMessageBoxWrapUpListResult {
	return &GetMessageBoxWrapUpListResult{}
}

var GetMessageBoxWrapUpListResult_Success_DEFAULT *TMessageBoxWrapUpResponse

func (p *GetMessageBoxWrapUpListResult) GetSuccess() *TMessageBoxWrapUpResponse {
	if !p.IsSetSuccess() {
		return GetMessageBoxWrapUpListResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageBoxWrapUpListResult_E_DEFAULT *TalkException

func (p *GetMessageBoxWrapUpListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessageBoxWrapUpListResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageBoxWrapUpListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageBoxWrapUpListResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageBoxWrapUpListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TMessageBoxWrapUpResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessageBoxWrapUpList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageBoxWrapUpListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxWrapUpListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageBoxWrapUpListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageBoxWrapUpListResult(%+v)", *p)
}

type GetMessagesBySequenceNumberArgs struct {
	// unused field # 1
	ChannelId    string `thrift:"channelId,2" json:"channelId"`
	MessageBoxId string `thrift:"messageBoxId,3" json:"messageBoxId"`
	StartSeq     int64  `thrift:"startSeq,4" json:"startSeq"`
	EndSeq       int64  `thrift:"endSeq,5" json:"endSeq"`
}

func NewGetMessagesBySequenceNumberArgs() *GetMessagesBySequenceNumberArgs {
	return &GetMessagesBySequenceNumberArgs{}
}

func (p *GetMessagesBySequenceNumberArgs) GetChannelId() string {
	return p.ChannelId
}

func (p *GetMessagesBySequenceNumberArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}

func (p *GetMessagesBySequenceNumberArgs) GetStartSeq() int64 {
	return p.StartSeq
}

func (p *GetMessagesBySequenceNumberArgs) GetEndSeq() int64 {
	return p.EndSeq
}
func (p *GetMessagesBySequenceNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.StartSeq = v
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.EndSeq = v
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessagesBySequenceNumber_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channelId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channelId: %s", p, err)
	}
	return err
}

func (p *GetMessagesBySequenceNumberArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageBoxId: %s", p, err)
	}
	return err
}

func (p *GetMessagesBySequenceNumberArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startSeq", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:startSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartSeq)); err != nil {
		return fmt.Errorf("%T.startSeq (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:startSeq: %s", p, err)
	}
	return err
}

func (p *GetMessagesBySequenceNumberArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endSeq", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:endSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndSeq)); err != nil {
		return fmt.Errorf("%T.endSeq (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:endSeq: %s", p, err)
	}
	return err
}

func (p *GetMessagesBySequenceNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessagesBySequenceNumberArgs(%+v)", *p)
}

type GetMessagesBySequenceNumberResult struct {
	Success []*Message     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetMessagesBySequenceNumberResult() *GetMessagesBySequenceNumberResult {
	return &GetMessagesBySequenceNumberResult{}
}

var GetMessagesBySequenceNumberResult_Success_DEFAULT []*Message

func (p *GetMessagesBySequenceNumberResult) GetSuccess() []*Message {
	return p.Success
}

var GetMessagesBySequenceNumberResult_E_DEFAULT *TalkException

func (p *GetMessagesBySequenceNumberResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetMessagesBySequenceNumberResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessagesBySequenceNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessagesBySequenceNumberResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessagesBySequenceNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem623 := &Message{}
		if err := _elem623.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem623, err)
		}
		p.Success = append(p.Success, _elem623)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessagesBySequenceNumber_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessagesBySequenceNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessagesBySequenceNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessagesBySequenceNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessagesBySequenceNumberResult(%+v)", *p)
}

type GetNextMessagesArgs struct {
	// unused field # 1
	MessageBoxId  string `thrift:"messageBoxId,2" json:"messageBoxId"`
	StartSeq      int64  `thrift:"startSeq,3" json:"startSeq"`
	MessagesCount int32  `thrift:"messagesCount,4" json:"messagesCount"`
}

func NewGetNextMessagesArgs() *GetNextMessagesArgs {
	return &GetNextMessagesArgs{}
}

func (p *GetNextMessagesArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}

func (p *GetNextMessagesArgs) GetStartSeq() int64 {
	return p.StartSeq
}

func (p *GetNextMessagesArgs) GetMessagesCount() int32 {
	return p.MessagesCount
}
func (p *GetNextMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNextMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *GetNextMessagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartSeq = v
	}
	return nil
}

func (p *GetNextMessagesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessagesCount = v
	}
	return nil
}

func (p *GetNextMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNextMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNextMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBoxId: %s", p, err)
	}
	return err
}

func (p *GetNextMessagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startSeq", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:startSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartSeq)); err != nil {
		return fmt.Errorf("%T.startSeq (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:startSeq: %s", p, err)
	}
	return err
}

func (p *GetNextMessagesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messagesCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessagesCount)); err != nil {
		return fmt.Errorf("%T.messagesCount (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messagesCount: %s", p, err)
	}
	return err
}

func (p *GetNextMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNextMessagesArgs(%+v)", *p)
}

type GetNextMessagesResult struct {
	Success []*Message     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetNextMessagesResult() *GetNextMessagesResult {
	return &GetNextMessagesResult{}
}

var GetNextMessagesResult_Success_DEFAULT []*Message

func (p *GetNextMessagesResult) GetSuccess() []*Message {
	return p.Success
}

var GetNextMessagesResult_E_DEFAULT *TalkException

func (p *GetNextMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetNextMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetNextMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNextMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetNextMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNextMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem624 := &Message{}
		if err := _elem624.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem624, err)
		}
		p.Success = append(p.Success, _elem624)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetNextMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetNextMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNextMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNextMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNextMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetNextMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNextMessagesResult(%+v)", *p)
}

type GetNotificationPolicyArgs struct {
	// unused field # 1
	Carrier CarrierCode `thrift:"carrier,2" json:"carrier"`
}

func NewGetNotificationPolicyArgs() *GetNotificationPolicyArgs {
	return &GetNotificationPolicyArgs{}
}

func (p *GetNotificationPolicyArgs) GetCarrier() CarrierCode {
	return p.Carrier
}
func (p *GetNotificationPolicyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNotificationPolicyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := CarrierCode(v)
		p.Carrier = temp
	}
	return nil
}

func (p *GetNotificationPolicyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotificationPolicy_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNotificationPolicyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrier", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:carrier: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Carrier)); err != nil {
		return fmt.Errorf("%T.carrier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:carrier: %s", p, err)
	}
	return err
}

func (p *GetNotificationPolicyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationPolicyArgs(%+v)", *p)
}

type GetNotificationPolicyResult struct {
	Success []NotificationType `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetNotificationPolicyResult() *GetNotificationPolicyResult {
	return &GetNotificationPolicyResult{}
}

var GetNotificationPolicyResult_Success_DEFAULT []NotificationType

func (p *GetNotificationPolicyResult) GetSuccess() []NotificationType {
	return p.Success
}

var GetNotificationPolicyResult_E_DEFAULT *TalkException

func (p *GetNotificationPolicyResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetNotificationPolicyResult_E_DEFAULT
	}
	return p.E
}
func (p *GetNotificationPolicyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNotificationPolicyResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetNotificationPolicyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNotificationPolicyResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]NotificationType, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem625 NotificationType
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := NotificationType(v)
			_elem625 = temp
		}
		p.Success = append(p.Success, _elem625)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetNotificationPolicyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetNotificationPolicyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotificationPolicy_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNotificationPolicyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNotificationPolicyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetNotificationPolicyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationPolicyResult(%+v)", *p)
}

type GetPreviousMessagesArgs struct {
	// unused field # 1
	MessageBoxId  string `thrift:"messageBoxId,2" json:"messageBoxId"`
	EndSeq        int64  `thrift:"endSeq,3" json:"endSeq"`
	MessagesCount int32  `thrift:"messagesCount,4" json:"messagesCount"`
}

func NewGetPreviousMessagesArgs() *GetPreviousMessagesArgs {
	return &GetPreviousMessagesArgs{}
}

func (p *GetPreviousMessagesArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}

func (p *GetPreviousMessagesArgs) GetEndSeq() int64 {
	return p.EndSeq
}

func (p *GetPreviousMessagesArgs) GetMessagesCount() int32 {
	return p.MessagesCount
}
func (p *GetPreviousMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPreviousMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *GetPreviousMessagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndSeq = v
	}
	return nil
}

func (p *GetPreviousMessagesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessagesCount = v
	}
	return nil
}

func (p *GetPreviousMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPreviousMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPreviousMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBoxId: %s", p, err)
	}
	return err
}

func (p *GetPreviousMessagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endSeq", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:endSeq: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndSeq)); err != nil {
		return fmt.Errorf("%T.endSeq (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:endSeq: %s", p, err)
	}
	return err
}

func (p *GetPreviousMessagesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messagesCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessagesCount)); err != nil {
		return fmt.Errorf("%T.messagesCount (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messagesCount: %s", p, err)
	}
	return err
}

func (p *GetPreviousMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPreviousMessagesArgs(%+v)", *p)
}

type GetPreviousMessagesResult struct {
	Success []*Message     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetPreviousMessagesResult() *GetPreviousMessagesResult {
	return &GetPreviousMessagesResult{}
}

var GetPreviousMessagesResult_Success_DEFAULT []*Message

func (p *GetPreviousMessagesResult) GetSuccess() []*Message {
	return p.Success
}

var GetPreviousMessagesResult_E_DEFAULT *TalkException

func (p *GetPreviousMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetPreviousMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPreviousMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPreviousMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPreviousMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPreviousMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem626 := &Message{}
		if err := _elem626.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem626, err)
		}
		p.Success = append(p.Success, _elem626)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPreviousMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPreviousMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPreviousMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPreviousMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPreviousMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPreviousMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPreviousMessagesResult(%+v)", *p)
}

type GetProfileArgs struct {
}

func NewGetProfileArgs() *GetProfileArgs {
	return &GetProfileArgs{}
}

func (p *GetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfileArgs(%+v)", *p)
}

type GetProfileResult struct {
	Success *Profile       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetProfileResult() *GetProfileResult {
	return &GetProfileResult{}
}

var GetProfileResult_Success_DEFAULT *Profile

func (p *GetProfileResult) GetSuccess() *Profile {
	if !p.IsSetSuccess() {
		return GetProfileResult_Success_DEFAULT
	}
	return p.Success
}

var GetProfileResult_E_DEFAULT *TalkException

func (p *GetProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProfileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Profile{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProfileResult(%+v)", *p)
}

type GetProximityMatchCandidateListArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewGetProximityMatchCandidateListArgs() *GetProximityMatchCandidateListArgs {
	return &GetProximityMatchCandidateListArgs{}
}

func (p *GetProximityMatchCandidateListArgs) GetSessionId() string {
	return p.SessionId
}
func (p *GetProximityMatchCandidateListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetProximityMatchCandidateListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidateList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *GetProximityMatchCandidateListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProximityMatchCandidateListArgs(%+v)", *p)
}

type GetProximityMatchCandidateListResult struct {
	Success *ProximityMatchCandidateResult_ `thrift:"success,0" json:"success"`
	E       *TalkException                  `thrift:"e,1" json:"e"`
}

func NewGetProximityMatchCandidateListResult() *GetProximityMatchCandidateListResult {
	return &GetProximityMatchCandidateListResult{}
}

var GetProximityMatchCandidateListResult_Success_DEFAULT *ProximityMatchCandidateResult_

func (p *GetProximityMatchCandidateListResult) GetSuccess() *ProximityMatchCandidateResult_ {
	if !p.IsSetSuccess() {
		return GetProximityMatchCandidateListResult_Success_DEFAULT
	}
	return p.Success
}

var GetProximityMatchCandidateListResult_E_DEFAULT *TalkException

func (p *GetProximityMatchCandidateListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProximityMatchCandidateListResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProximityMatchCandidateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProximityMatchCandidateListResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProximityMatchCandidateListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProximityMatchCandidateResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidateList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProximityMatchCandidateListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProximityMatchCandidateListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProximityMatchCandidateListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProximityMatchCandidateListResult(%+v)", *p)
}

type GetProximityMatchCandidatesArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewGetProximityMatchCandidatesArgs() *GetProximityMatchCandidatesArgs {
	return &GetProximityMatchCandidatesArgs{}
}

func (p *GetProximityMatchCandidatesArgs) GetSessionId() string {
	return p.SessionId
}
func (p *GetProximityMatchCandidatesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetProximityMatchCandidatesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidates_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *GetProximityMatchCandidatesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProximityMatchCandidatesArgs(%+v)", *p)
}

type GetProximityMatchCandidatesResult struct {
	Success map[*Contact]bool `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewGetProximityMatchCandidatesResult() *GetProximityMatchCandidatesResult {
	return &GetProximityMatchCandidatesResult{}
}

var GetProximityMatchCandidatesResult_Success_DEFAULT map[*Contact]bool

func (p *GetProximityMatchCandidatesResult) GetSuccess() map[*Contact]bool {
	return p.Success
}

var GetProximityMatchCandidatesResult_E_DEFAULT *TalkException

func (p *GetProximityMatchCandidatesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProximityMatchCandidatesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProximityMatchCandidatesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProximityMatchCandidatesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProximityMatchCandidatesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[*Contact]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		_elem627 := &Contact{}
		if err := _elem627.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem627, err)
		}
		p.Success[_elem627] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProximityMatchCandidates_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProximityMatchCandidatesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProximityMatchCandidatesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProximityMatchCandidatesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProximityMatchCandidatesResult(%+v)", *p)
}

type GetRecentMessagesArgs struct {
	// unused field # 1
	MessageBoxId  string `thrift:"messageBoxId,2" json:"messageBoxId"`
	MessagesCount int32  `thrift:"messagesCount,3" json:"messagesCount"`
}

func NewGetRecentMessagesArgs() *GetRecentMessagesArgs {
	return &GetRecentMessagesArgs{}
}

func (p *GetRecentMessagesArgs) GetMessageBoxId() string {
	return p.MessageBoxId
}

func (p *GetRecentMessagesArgs) GetMessagesCount() int32 {
	return p.MessagesCount
}
func (p *GetRecentMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecentMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageBoxId = v
	}
	return nil
}

func (p *GetRecentMessagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessagesCount = v
	}
	return nil
}

func (p *GetRecentMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecentMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBoxId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBoxId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageBoxId)); err != nil {
		return fmt.Errorf("%T.messageBoxId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBoxId: %s", p, err)
	}
	return err
}

func (p *GetRecentMessagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messagesCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messagesCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessagesCount)); err != nil {
		return fmt.Errorf("%T.messagesCount (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messagesCount: %s", p, err)
	}
	return err
}

func (p *GetRecentMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecentMessagesArgs(%+v)", *p)
}

type GetRecentMessagesResult struct {
	Success []*Message     `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetRecentMessagesResult() *GetRecentMessagesResult {
	return &GetRecentMessagesResult{}
}

var GetRecentMessagesResult_Success_DEFAULT []*Message

func (p *GetRecentMessagesResult) GetSuccess() []*Message {
	return p.Success
}

var GetRecentMessagesResult_E_DEFAULT *TalkException

func (p *GetRecentMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetRecentMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetRecentMessagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRecentMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetRecentMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecentMessagesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Message, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem628 := &Message{}
		if err := _elem628.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem628, err)
		}
		p.Success = append(p.Success, _elem628)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRecentMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetRecentMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecentMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecentMessagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRecentMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetRecentMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecentMessagesResult(%+v)", *p)
}

type GetRecommendationIdsArgs struct {
}

func NewGetRecommendationIdsArgs() *GetRecommendationIdsArgs {
	return &GetRecommendationIdsArgs{}
}

func (p *GetRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommendationIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecommendationIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecommendationIdsArgs(%+v)", *p)
}

type GetRecommendationIdsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetRecommendationIdsResult() *GetRecommendationIdsResult {
	return &GetRecommendationIdsResult{}
}

var GetRecommendationIdsResult_Success_DEFAULT []string

func (p *GetRecommendationIdsResult) GetSuccess() []string {
	return p.Success
}

var GetRecommendationIdsResult_E_DEFAULT *TalkException

func (p *GetRecommendationIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetRecommendationIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetRecommendationIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRecommendationIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRecommendationIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem629 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem629 = v
		}
		p.Success = append(p.Success, _elem629)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRecommendationIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRecommendationIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetRecommendationIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRecommendationIdsResult(%+v)", *p)
}

type GetRoomArgs struct {
	// unused field # 1
	RoomId string `thrift:"roomId,2" json:"roomId"`
}

func NewGetRoomArgs() *GetRoomArgs {
	return &GetRoomArgs{}
}

func (p *GetRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *GetRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *GetRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoom_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roomId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return fmt.Errorf("%T.roomId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roomId: %s", p, err)
	}
	return err
}

func (p *GetRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomArgs(%+v)", *p)
}

type GetRoomResult struct {
	Success *Room          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetRoomResult() *GetRoomResult {
	return &GetRoomResult{}
}

var GetRoomResult_Success_DEFAULT *Room

func (p *GetRoomResult) GetSuccess() *Room {
	if !p.IsSetSuccess() {
		return GetRoomResult_Success_DEFAULT
	}
	return p.Success
}

var GetRoomResult_E_DEFAULT *TalkException

func (p *GetRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *GetRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoomResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Room{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRoom_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomResult(%+v)", *p)
}

type GetRSAKeyInfoArgs struct {
	// unused field # 1
	Provider IdentityProvider `thrift:"provider,2" json:"provider"`
}

func NewGetRSAKeyInfoArgs() *GetRSAKeyInfoArgs {
	return &GetRSAKeyInfoArgs{}
}

func (p *GetRSAKeyInfoArgs) GetProvider() IdentityProvider {
	return p.Provider
}
func (p *GetRSAKeyInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRSAKeyInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *GetRSAKeyInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRSAKeyInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRSAKeyInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:provider: %s", p, err)
	}
	return err
}

func (p *GetRSAKeyInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRSAKeyInfoArgs(%+v)", *p)
}

type GetRSAKeyInfoResult struct {
	Success *RSAKey        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetRSAKeyInfoResult() *GetRSAKeyInfoResult {
	return &GetRSAKeyInfoResult{}
}

var GetRSAKeyInfoResult_Success_DEFAULT *RSAKey

func (p *GetRSAKeyInfoResult) GetSuccess() *RSAKey {
	if !p.IsSetSuccess() {
		return GetRSAKeyInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetRSAKeyInfoResult_E_DEFAULT *TalkException

func (p *GetRSAKeyInfoResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetRSAKeyInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetRSAKeyInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRSAKeyInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetRSAKeyInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRSAKeyInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RSAKey{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetRSAKeyInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetRSAKeyInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRSAKeyInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRSAKeyInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRSAKeyInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetRSAKeyInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRSAKeyInfoResult(%+v)", *p)
}

type GetServerTimeArgs struct {
}

func NewGetServerTimeArgs() *GetServerTimeArgs {
	return &GetServerTimeArgs{}
}

func (p *GetServerTimeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServerTimeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServerTimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServerTimeArgs(%+v)", *p)
}

type GetServerTimeResult struct {
	Success *int64         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetServerTimeResult() *GetServerTimeResult {
	return &GetServerTimeResult{}
}

var GetServerTimeResult_Success_DEFAULT int64

func (p *GetServerTimeResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return GetServerTimeResult_Success_DEFAULT
	}
	return *p.Success
}

var GetServerTimeResult_E_DEFAULT *TalkException

func (p *GetServerTimeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetServerTimeResult_E_DEFAULT
	}
	return p.E
}
func (p *GetServerTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetServerTimeResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetServerTimeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServerTimeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetServerTimeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetServerTimeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServerTime_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServerTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetServerTimeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetServerTimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServerTimeResult(%+v)", *p)
}

type GetSessionsArgs struct {
}

func NewGetSessionsArgs() *GetSessionsArgs {
	return &GetSessionsArgs{}
}

func (p *GetSessionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSessionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSessions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSessionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSessionsArgs(%+v)", *p)
}

type GetSessionsResult struct {
	Success []*LoginSession `thrift:"success,0" json:"success"`
	E       *TalkException  `thrift:"e,1" json:"e"`
}

func NewGetSessionsResult() *GetSessionsResult {
	return &GetSessionsResult{}
}

var GetSessionsResult_Success_DEFAULT []*LoginSession

func (p *GetSessionsResult) GetSuccess() []*LoginSession {
	return p.Success
}

var GetSessionsResult_E_DEFAULT *TalkException

func (p *GetSessionsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetSessionsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetSessionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSessionsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetSessionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSessionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*LoginSession, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem630 := &LoginSession{}
		if err := _elem630.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem630, err)
		}
		p.Success = append(p.Success, _elem630)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetSessionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetSessionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSessions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSessionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetSessionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSessionsResult(%+v)", *p)
}

type GetSettingsArgs struct {
}

func NewGetSettingsArgs() *GetSettingsArgs {
	return &GetSettingsArgs{}
}

func (p *GetSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingsArgs(%+v)", *p)
}

type GetSettingsResult struct {
	Success *Settings      `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetSettingsResult() *GetSettingsResult {
	return &GetSettingsResult{}
}

var GetSettingsResult_Success_DEFAULT *Settings

func (p *GetSettingsResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return GetSettingsResult_Success_DEFAULT
	}
	return p.Success
}

var GetSettingsResult_E_DEFAULT *TalkException

func (p *GetSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSettingsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSettingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingsResult(%+v)", *p)
}

type GetSettingsAttributesArgs struct {
	// unused field # 1
	AttrBitset int32 `thrift:"attrBitset,2" json:"attrBitset"`
}

func NewGetSettingsAttributesArgs() *GetSettingsAttributesArgs {
	return &GetSettingsAttributesArgs{}
}

func (p *GetSettingsAttributesArgs) GetAttrBitset() int32 {
	return p.AttrBitset
}
func (p *GetSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSettingsAttributesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *GetSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:attrBitset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return fmt.Errorf("%T.attrBitset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:attrBitset: %s", p, err)
	}
	return err
}

func (p *GetSettingsAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingsAttributesArgs(%+v)", *p)
}

type GetSettingsAttributesResult struct {
	Success *Settings      `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetSettingsAttributesResult() *GetSettingsAttributesResult {
	return &GetSettingsAttributesResult{}
}

var GetSettingsAttributesResult_Success_DEFAULT *Settings

func (p *GetSettingsAttributesResult) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return GetSettingsAttributesResult_Success_DEFAULT
	}
	return p.Success
}

var GetSettingsAttributesResult_E_DEFAULT *TalkException

func (p *GetSettingsAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetSettingsAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetSettingsAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSettingsAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSettingsAttributesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSettingsAttributesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSettingsAttributes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetSettingsAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSettingsAttributesResult(%+v)", *p)
}

type GetSystemConfigurationArgs struct {
}

func NewGetSystemConfigurationArgs() *GetSystemConfigurationArgs {
	return &GetSystemConfigurationArgs{}
}

func (p *GetSystemConfigurationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSystemConfigurationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSystemConfiguration_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSystemConfigurationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSystemConfigurationArgs(%+v)", *p)
}

type GetSystemConfigurationResult struct {
	Success *SystemConfiguration `thrift:"success,0" json:"success"`
	E       *TalkException       `thrift:"e,1" json:"e"`
}

func NewGetSystemConfigurationResult() *GetSystemConfigurationResult {
	return &GetSystemConfigurationResult{}
}

var GetSystemConfigurationResult_Success_DEFAULT *SystemConfiguration

func (p *GetSystemConfigurationResult) GetSuccess() *SystemConfiguration {
	if !p.IsSetSuccess() {
		return GetSystemConfigurationResult_Success_DEFAULT
	}
	return p.Success
}

var GetSystemConfigurationResult_E_DEFAULT *TalkException

func (p *GetSystemConfigurationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetSystemConfigurationResult_E_DEFAULT
	}
	return p.E
}
func (p *GetSystemConfigurationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSystemConfigurationResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetSystemConfigurationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSystemConfigurationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SystemConfiguration{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetSystemConfigurationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetSystemConfigurationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSystemConfiguration_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSystemConfigurationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSystemConfigurationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetSystemConfigurationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSystemConfigurationResult(%+v)", *p)
}

type GetUserTicketArgs struct {
}

func NewGetUserTicketArgs() *GetUserTicketArgs {
	return &GetUserTicketArgs{}
}

func (p *GetUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserTicketArgs(%+v)", *p)
}

type GetUserTicketResult struct {
	Success *Ticket        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetUserTicketResult() *GetUserTicketResult {
	return &GetUserTicketResult{}
}

var GetUserTicketResult_Success_DEFAULT *Ticket

func (p *GetUserTicketResult) GetSuccess() *Ticket {
	if !p.IsSetSuccess() {
		return GetUserTicketResult_Success_DEFAULT
	}
	return p.Success
}

var GetUserTicketResult_E_DEFAULT *TalkException

func (p *GetUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *GetUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Ticket{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserTicketResult(%+v)", *p)
}

type GetWapInvitationArgs struct {
	// unused field # 1
	InvitationHash string `thrift:"invitationHash,2" json:"invitationHash"`
}

func NewGetWapInvitationArgs() *GetWapInvitationArgs {
	return &GetWapInvitationArgs{}
}

func (p *GetWapInvitationArgs) GetInvitationHash() string {
	return p.InvitationHash
}
func (p *GetWapInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWapInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.InvitationHash = v
	}
	return nil
}

func (p *GetWapInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWapInvitation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWapInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitationHash", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:invitationHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InvitationHash)); err != nil {
		return fmt.Errorf("%T.invitationHash (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:invitationHash: %s", p, err)
	}
	return err
}

func (p *GetWapInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWapInvitationArgs(%+v)", *p)
}

type GetWapInvitationResult struct {
	Success *WapInvitation `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetWapInvitationResult() *GetWapInvitationResult {
	return &GetWapInvitationResult{}
}

var GetWapInvitationResult_Success_DEFAULT *WapInvitation

func (p *GetWapInvitationResult) GetSuccess() *WapInvitation {
	if !p.IsSetSuccess() {
		return GetWapInvitationResult_Success_DEFAULT
	}
	return p.Success
}

var GetWapInvitationResult_E_DEFAULT *TalkException

func (p *GetWapInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetWapInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *GetWapInvitationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWapInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetWapInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWapInvitationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &WapInvitation{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetWapInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetWapInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWapInvitation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWapInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetWapInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetWapInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWapInvitationResult(%+v)", *p)
}

type InvalidateUserTicketArgs struct {
}

func NewInvalidateUserTicketArgs() *InvalidateUserTicketArgs {
	return &InvalidateUserTicketArgs{}
}

func (p *InvalidateUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidateUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invalidateUserTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidateUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidateUserTicketArgs(%+v)", *p)
}

type InvalidateUserTicketResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewInvalidateUserTicketResult() *InvalidateUserTicketResult {
	return &InvalidateUserTicketResult{}
}

var InvalidateUserTicketResult_E_DEFAULT *TalkException

func (p *InvalidateUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return InvalidateUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *InvalidateUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *InvalidateUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidateUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *InvalidateUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invalidateUserTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *InvalidateUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidateUserTicketResult(%+v)", *p)
}

type InviteFriendsBySmsArgs struct {
	// unused field # 1
	PhoneNumberList []string `thrift:"phoneNumberList,2" json:"phoneNumberList"`
}

func NewInviteFriendsBySmsArgs() *InviteFriendsBySmsArgs {
	return &InviteFriendsBySmsArgs{}
}

func (p *InviteFriendsBySmsArgs) GetPhoneNumberList() []string {
	return p.PhoneNumberList
}
func (p *InviteFriendsBySmsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteFriendsBySmsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PhoneNumberList = tSlice
	for i := 0; i < size; i++ {
		var _elem631 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem631 = v
		}
		p.PhoneNumberList = append(p.PhoneNumberList, _elem631)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *InviteFriendsBySmsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteFriendsBySms_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteFriendsBySmsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phoneNumberList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:phoneNumberList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNumberList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PhoneNumberList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:phoneNumberList: %s", p, err)
	}
	return err
}

func (p *InviteFriendsBySmsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteFriendsBySmsArgs(%+v)", *p)
}

type InviteFriendsBySmsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewInviteFriendsBySmsResult() *InviteFriendsBySmsResult {
	return &InviteFriendsBySmsResult{}
}

var InviteFriendsBySmsResult_E_DEFAULT *TalkException

func (p *InviteFriendsBySmsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return InviteFriendsBySmsResult_E_DEFAULT
	}
	return p.E
}
func (p *InviteFriendsBySmsResult) IsSetE() bool {
	return p.E != nil
}

func (p *InviteFriendsBySmsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteFriendsBySmsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *InviteFriendsBySmsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteFriendsBySms_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteFriendsBySmsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *InviteFriendsBySmsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteFriendsBySmsResult(%+v)", *p)
}

type InviteIntoGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewInviteIntoGroupArgs() *InviteIntoGroupArgs {
	return &InviteIntoGroupArgs{}
}

func (p *InviteIntoGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *InviteIntoGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *InviteIntoGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *InviteIntoGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteIntoGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *InviteIntoGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *InviteIntoGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem632 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem632 = v
		}
		p.ContactIds = append(p.ContactIds, _elem632)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *InviteIntoGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteIntoGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *InviteIntoGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *InviteIntoGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contactIds: %s", p, err)
	}
	return err
}

func (p *InviteIntoGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoGroupArgs(%+v)", *p)
}

type InviteIntoGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewInviteIntoGroupResult() *InviteIntoGroupResult {
	return &InviteIntoGroupResult{}
}

var InviteIntoGroupResult_E_DEFAULT *TalkException

func (p *InviteIntoGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return InviteIntoGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *InviteIntoGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *InviteIntoGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteIntoGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *InviteIntoGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteIntoGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *InviteIntoGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoGroupResult(%+v)", *p)
}

type InviteIntoRoomArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	RoomId     string   `thrift:"roomId,2" json:"roomId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewInviteIntoRoomArgs() *InviteIntoRoomArgs {
	return &InviteIntoRoomArgs{}
}

func (p *InviteIntoRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *InviteIntoRoomArgs) GetRoomId() string {
	return p.RoomId
}

func (p *InviteIntoRoomArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *InviteIntoRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteIntoRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *InviteIntoRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *InviteIntoRoomArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem633 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem633 = v
		}
		p.ContactIds = append(p.ContactIds, _elem633)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *InviteIntoRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteIntoRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *InviteIntoRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roomId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return fmt.Errorf("%T.roomId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roomId: %s", p, err)
	}
	return err
}

func (p *InviteIntoRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contactIds: %s", p, err)
	}
	return err
}

func (p *InviteIntoRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoRoomArgs(%+v)", *p)
}

type InviteIntoRoomResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewInviteIntoRoomResult() *InviteIntoRoomResult {
	return &InviteIntoRoomResult{}
}

var InviteIntoRoomResult_E_DEFAULT *TalkException

func (p *InviteIntoRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return InviteIntoRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *InviteIntoRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *InviteIntoRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteIntoRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *InviteIntoRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteIntoRoom_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteIntoRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *InviteIntoRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoRoomResult(%+v)", *p)
}

type InviteViaEmailArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Email  string `thrift:"email,2" json:"email"`
	Name   string `thrift:"name,3" json:"name"`
}

func NewInviteViaEmailArgs() *InviteViaEmailArgs {
	return &InviteViaEmailArgs{}
}

func (p *InviteViaEmailArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *InviteViaEmailArgs) GetEmail() string {
	return p.Email
}

func (p *InviteViaEmailArgs) GetName() string {
	return p.Name
}
func (p *InviteViaEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteViaEmailArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *InviteViaEmailArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *InviteViaEmailArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *InviteViaEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteViaEmail_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteViaEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *InviteViaEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:email: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return fmt.Errorf("%T.email (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:email: %s", p, err)
	}
	return err
}

func (p *InviteViaEmailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *InviteViaEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteViaEmailArgs(%+v)", *p)
}

type InviteViaEmailResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewInviteViaEmailResult() *InviteViaEmailResult {
	return &InviteViaEmailResult{}
}

var InviteViaEmailResult_E_DEFAULT *TalkException

func (p *InviteViaEmailResult) GetE() *TalkException {
	if !p.IsSetE() {
		return InviteViaEmailResult_E_DEFAULT
	}
	return p.E
}
func (p *InviteViaEmailResult) IsSetE() bool {
	return p.E != nil
}

func (p *InviteViaEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InviteViaEmailResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *InviteViaEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("inviteViaEmail_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InviteViaEmailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *InviteViaEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteViaEmailResult(%+v)", *p)
}

type IsIdentityIdentifierAvailableArgs struct {
	// unused field # 1
	Identifier string           `thrift:"identifier,2" json:"identifier"`
	Provider   IdentityProvider `thrift:"provider,3" json:"provider"`
}

func NewIsIdentityIdentifierAvailableArgs() *IsIdentityIdentifierAvailableArgs {
	return &IsIdentityIdentifierAvailableArgs{}
}

func (p *IsIdentityIdentifierAvailableArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *IsIdentityIdentifierAvailableArgs) GetIdentifier() string {
	return p.Identifier
}
func (p *IsIdentityIdentifierAvailableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isIdentityIdentifierAvailable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identifier: %s", p, err)
	}
	return err
}

func (p *IsIdentityIdentifierAvailableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:provider: %s", p, err)
	}
	return err
}

func (p *IsIdentityIdentifierAvailableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsIdentityIdentifierAvailableArgs(%+v)", *p)
}

type IsIdentityIdentifierAvailableResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewIsIdentityIdentifierAvailableResult() *IsIdentityIdentifierAvailableResult {
	return &IsIdentityIdentifierAvailableResult{}
}

var IsIdentityIdentifierAvailableResult_Success_DEFAULT bool

func (p *IsIdentityIdentifierAvailableResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return IsIdentityIdentifierAvailableResult_Success_DEFAULT
	}
	return *p.Success
}

var IsIdentityIdentifierAvailableResult_E_DEFAULT *TalkException

func (p *IsIdentityIdentifierAvailableResult) GetE() *TalkException {
	if !p.IsSetE() {
		return IsIdentityIdentifierAvailableResult_E_DEFAULT
	}
	return p.E
}
func (p *IsIdentityIdentifierAvailableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsIdentityIdentifierAvailableResult) IsSetE() bool {
	return p.E != nil
}

func (p *IsIdentityIdentifierAvailableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isIdentityIdentifierAvailable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsIdentityIdentifierAvailableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *IsIdentityIdentifierAvailableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *IsIdentityIdentifierAvailableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsIdentityIdentifierAvailableResult(%+v)", *p)
}

type IsUseridAvailableArgs struct {
	// unused field # 1
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewIsUseridAvailableArgs() *IsUseridAvailableArgs {
	return &IsUseridAvailableArgs{}
}

func (p *IsUseridAvailableArgs) GetUserid() string {
	return p.Userid
}
func (p *IsUseridAvailableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsUseridAvailableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *IsUseridAvailableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUseridAvailable_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsUseridAvailableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
	}
	return err
}

func (p *IsUseridAvailableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsUseridAvailableArgs(%+v)", *p)
}

type IsUseridAvailableResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewIsUseridAvailableResult() *IsUseridAvailableResult {
	return &IsUseridAvailableResult{}
}

var IsUseridAvailableResult_Success_DEFAULT bool

func (p *IsUseridAvailableResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return IsUseridAvailableResult_Success_DEFAULT
	}
	return *p.Success
}

var IsUseridAvailableResult_E_DEFAULT *TalkException

func (p *IsUseridAvailableResult) GetE() *TalkException {
	if !p.IsSetE() {
		return IsUseridAvailableResult_E_DEFAULT
	}
	return p.E
}
func (p *IsUseridAvailableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsUseridAvailableResult) IsSetE() bool {
	return p.E != nil
}

func (p *IsUseridAvailableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsUseridAvailableResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IsUseridAvailableResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *IsUseridAvailableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isUseridAvailable_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsUseridAvailableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *IsUseridAvailableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *IsUseridAvailableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsUseridAvailableResult(%+v)", *p)
}

type KickoutFromGroupArgs struct {
	ReqSeq     int32    `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId    string   `thrift:"groupId,2" json:"groupId"`
	ContactIds []string `thrift:"contactIds,3" json:"contactIds"`
}

func NewKickoutFromGroupArgs() *KickoutFromGroupArgs {
	return &KickoutFromGroupArgs{}
}

func (p *KickoutFromGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *KickoutFromGroupArgs) GetGroupId() string {
	return p.GroupId
}

func (p *KickoutFromGroupArgs) GetContactIds() []string {
	return p.ContactIds
}
func (p *KickoutFromGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KickoutFromGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *KickoutFromGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *KickoutFromGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ContactIds = tSlice
	for i := 0; i < size; i++ {
		var _elem634 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem634 = v
		}
		p.ContactIds = append(p.ContactIds, _elem634)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *KickoutFromGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KickoutFromGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *KickoutFromGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *KickoutFromGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:contactIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:contactIds: %s", p, err)
	}
	return err
}

func (p *KickoutFromGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KickoutFromGroupArgs(%+v)", *p)
}

type KickoutFromGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewKickoutFromGroupResult() *KickoutFromGroupResult {
	return &KickoutFromGroupResult{}
}

var KickoutFromGroupResult_E_DEFAULT *TalkException

func (p *KickoutFromGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return KickoutFromGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *KickoutFromGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *KickoutFromGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KickoutFromGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *KickoutFromGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("kickoutFromGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KickoutFromGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *KickoutFromGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KickoutFromGroupResult(%+v)", *p)
}

type LeaveGroupArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewLeaveGroupArgs() *LeaveGroupArgs {
	return &LeaveGroupArgs{}
}

func (p *LeaveGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *LeaveGroupArgs) GetGroupId() string {
	return p.GroupId
}
func (p *LeaveGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LeaveGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *LeaveGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *LeaveGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LeaveGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *LeaveGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *LeaveGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveGroupArgs(%+v)", *p)
}

type LeaveGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewLeaveGroupResult() *LeaveGroupResult {
	return &LeaveGroupResult{}
}

var LeaveGroupResult_E_DEFAULT *TalkException

func (p *LeaveGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LeaveGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *LeaveGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *LeaveGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LeaveGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LeaveGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LeaveGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LeaveGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveGroupResult(%+v)", *p)
}

type LeaveRoomArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	RoomId string `thrift:"roomId,2" json:"roomId"`
}

func NewLeaveRoomArgs() *LeaveRoomArgs {
	return &LeaveRoomArgs{}
}

func (p *LeaveRoomArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *LeaveRoomArgs) GetRoomId() string {
	return p.RoomId
}
func (p *LeaveRoomArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LeaveRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *LeaveRoomArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *LeaveRoomArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LeaveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *LeaveRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roomId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoomId)); err != nil {
		return fmt.Errorf("%T.roomId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roomId: %s", p, err)
	}
	return err
}

func (p *LeaveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveRoomArgs(%+v)", *p)
}

type LeaveRoomResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewLeaveRoomResult() *LeaveRoomResult {
	return &LeaveRoomResult{}
}

var LeaveRoomResult_E_DEFAULT *TalkException

func (p *LeaveRoomResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LeaveRoomResult_E_DEFAULT
	}
	return p.E
}
func (p *LeaveRoomResult) IsSetE() bool {
	return p.E != nil
}

func (p *LeaveRoomResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LeaveRoomResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LeaveRoomResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("leaveRoom_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LeaveRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LeaveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveRoomResult(%+v)", *p)
}

type LoginWithIdentityCredentialArgs struct {
	// unused fields # 1 to 2
	Identifier       string           `thrift:"identifier,3" json:"identifier"`
	Password         string           `thrift:"password,4" json:"password"`
	KeepLoggedIn     bool             `thrift:"keepLoggedIn,5" json:"keepLoggedIn"`
	AccessLocation   string           `thrift:"accessLocation,6" json:"accessLocation"`
	SystemName       string           `thrift:"systemName,7" json:"systemName"`
	IdentityProvider IdentityProvider `thrift:"identityProvider,8" json:"identityProvider"`
	Certificate      string           `thrift:"certificate,9" json:"certificate"`
}

func NewLoginWithIdentityCredentialArgs() *LoginWithIdentityCredentialArgs {
	return &LoginWithIdentityCredentialArgs{}
}

func (p *LoginWithIdentityCredentialArgs) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *LoginWithIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *LoginWithIdentityCredentialArgs) GetPassword() string {
	return p.Password
}

func (p *LoginWithIdentityCredentialArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *LoginWithIdentityCredentialArgs) GetAccessLocation() string {
	return p.AccessLocation
}

func (p *LoginWithIdentityCredentialArgs) GetSystemName() string {
	return p.SystemName
}

func (p *LoginWithIdentityCredentialArgs) GetCertificate() string {
	return p.Certificate
}
func (p *LoginWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identifier: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:password: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:keepLoggedIn: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return fmt.Errorf("%T.keepLoggedIn (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:keepLoggedIn: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:accessLocation: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return fmt.Errorf("%T.accessLocation (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:accessLocation: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:systemName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return fmt.Errorf("%T.systemName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:systemName: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:identityProvider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return fmt.Errorf("%T.identityProvider (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:identityProvider: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:certificate: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return fmt.Errorf("%T.certificate (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:certificate: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithIdentityCredentialArgs(%+v)", *p)
}

type LoginWithIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewLoginWithIdentityCredentialResult() *LoginWithIdentityCredentialResult {
	return &LoginWithIdentityCredentialResult{}
}

var LoginWithIdentityCredentialResult_Success_DEFAULT string

func (p *LoginWithIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return LoginWithIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var LoginWithIdentityCredentialResult_E_DEFAULT *TalkException

func (p *LoginWithIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LoginWithIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *LoginWithIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *LoginWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *LoginWithIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithIdentityCredentialResult(%+v)", *p)
}

type LoginWithIdentityCredentialForCertificateArgs struct {
	// unused fields # 1 to 2
	Identifier       string           `thrift:"identifier,3" json:"identifier"`
	Password         string           `thrift:"password,4" json:"password"`
	KeepLoggedIn     bool             `thrift:"keepLoggedIn,5" json:"keepLoggedIn"`
	AccessLocation   string           `thrift:"accessLocation,6" json:"accessLocation"`
	SystemName       string           `thrift:"systemName,7" json:"systemName"`
	IdentityProvider IdentityProvider `thrift:"identityProvider,8" json:"identityProvider"`
	Certificate      string           `thrift:"certificate,9" json:"certificate"`
}

func NewLoginWithIdentityCredentialForCertificateArgs() *LoginWithIdentityCredentialForCertificateArgs {
	return &LoginWithIdentityCredentialForCertificateArgs{}
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetPassword() string {
	return p.Password
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetKeepLoggedIn() bool {
	return p.KeepLoggedIn
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetAccessLocation() string {
	return p.AccessLocation
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetSystemName() string {
	return p.SystemName
}

func (p *LoginWithIdentityCredentialForCertificateArgs) GetCertificate() string {
	return p.Certificate
}
func (p *LoginWithIdentityCredentialForCertificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.KeepLoggedIn = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AccessLocation = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SystemName = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Certificate = v
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredentialForCertificate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identifier: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:password: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:keepLoggedIn: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
		return fmt.Errorf("%T.keepLoggedIn (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:keepLoggedIn: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:accessLocation: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
		return fmt.Errorf("%T.accessLocation (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:accessLocation: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:systemName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SystemName)); err != nil {
		return fmt.Errorf("%T.systemName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:systemName: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:identityProvider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return fmt.Errorf("%T.identityProvider (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:identityProvider: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:certificate: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Certificate)); err != nil {
		return fmt.Errorf("%T.certificate (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:certificate: %s", p, err)
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithIdentityCredentialForCertificateArgs(%+v)", *p)
}

type LoginWithIdentityCredentialForCertificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewLoginWithIdentityCredentialForCertificateResult() *LoginWithIdentityCredentialForCertificateResult {
	return &LoginWithIdentityCredentialForCertificateResult{}
}

var LoginWithIdentityCredentialForCertificateResult_Success_DEFAULT *LoginResult_

func (p *LoginWithIdentityCredentialForCertificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return LoginWithIdentityCredentialForCertificateResult_Success_DEFAULT
	}
	return p.Success
}

var LoginWithIdentityCredentialForCertificateResult_E_DEFAULT *TalkException

func (p *LoginWithIdentityCredentialForCertificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LoginWithIdentityCredentialForCertificateResult_E_DEFAULT
	}
	return p.E
}
func (p *LoginWithIdentityCredentialForCertificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithIdentityCredentialForCertificate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithIdentityCredentialForCertificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithIdentityCredentialForCertificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithIdentityCredentialForCertificateResult(%+v)", *p)
}

type LoginWithVerifierArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewLoginWithVerifierArgs() *LoginWithVerifierArgs {
	return &LoginWithVerifierArgs{}
}

func (p *LoginWithVerifierArgs) GetVerifier() string {
	return p.Verifier
}
func (p *LoginWithVerifierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginWithVerifierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifier_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *LoginWithVerifierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierArgs(%+v)", *p)
}

type LoginWithVerifierResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewLoginWithVerifierResult() *LoginWithVerifierResult {
	return &LoginWithVerifierResult{}
}

var LoginWithVerifierResult_Success_DEFAULT string

func (p *LoginWithVerifierResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return LoginWithVerifierResult_Success_DEFAULT
	}
	return *p.Success
}

var LoginWithVerifierResult_E_DEFAULT *TalkException

func (p *LoginWithVerifierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LoginWithVerifierResult_E_DEFAULT
	}
	return p.E
}
func (p *LoginWithVerifierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithVerifierResult) IsSetE() bool {
	return p.E != nil
}

func (p *LoginWithVerifierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *LoginWithVerifierResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LoginWithVerifierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifier_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierResult(%+v)", *p)
}

type LoginWithVerifierForCerificateArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewLoginWithVerifierForCerificateArgs() *LoginWithVerifierForCerificateArgs {
	return &LoginWithVerifierForCerificateArgs{}
}

func (p *LoginWithVerifierForCerificateArgs) GetVerifier() string {
	return p.Verifier
}
func (p *LoginWithVerifierForCerificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginWithVerifierForCerificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCerificate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *LoginWithVerifierForCerificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierForCerificateArgs(%+v)", *p)
}

type LoginWithVerifierForCerificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewLoginWithVerifierForCerificateResult() *LoginWithVerifierForCerificateResult {
	return &LoginWithVerifierForCerificateResult{}
}

var LoginWithVerifierForCerificateResult_Success_DEFAULT *LoginResult_

func (p *LoginWithVerifierForCerificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return LoginWithVerifierForCerificateResult_Success_DEFAULT
	}
	return p.Success
}

var LoginWithVerifierForCerificateResult_E_DEFAULT *TalkException

func (p *LoginWithVerifierForCerificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LoginWithVerifierForCerificateResult_E_DEFAULT
	}
	return p.E
}
func (p *LoginWithVerifierForCerificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithVerifierForCerificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *LoginWithVerifierForCerificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCerificate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierForCerificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierForCerificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierForCerificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierForCerificateResult(%+v)", *p)
}

type LoginWithVerifierForCertificateArgs struct {
	// unused fields # 1 to 2
	Verifier string `thrift:"verifier,3" json:"verifier"`
}

func NewLoginWithVerifierForCertificateArgs() *LoginWithVerifierForCertificateArgs {
	return &LoginWithVerifierForCertificateArgs{}
}

func (p *LoginWithVerifierForCertificateArgs) GetVerifier() string {
	return p.Verifier
}
func (p *LoginWithVerifierForCertificateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *LoginWithVerifierForCertificateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCertificate_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *LoginWithVerifierForCertificateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierForCertificateArgs(%+v)", *p)
}

type LoginWithVerifierForCertificateResult struct {
	Success *LoginResult_  `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewLoginWithVerifierForCertificateResult() *LoginWithVerifierForCertificateResult {
	return &LoginWithVerifierForCertificateResult{}
}

var LoginWithVerifierForCertificateResult_Success_DEFAULT *LoginResult_

func (p *LoginWithVerifierForCertificateResult) GetSuccess() *LoginResult_ {
	if !p.IsSetSuccess() {
		return LoginWithVerifierForCertificateResult_Success_DEFAULT
	}
	return p.Success
}

var LoginWithVerifierForCertificateResult_E_DEFAULT *TalkException

func (p *LoginWithVerifierForCertificateResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LoginWithVerifierForCertificateResult_E_DEFAULT
	}
	return p.E
}
func (p *LoginWithVerifierForCertificateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithVerifierForCertificateResult) IsSetE() bool {
	return p.E != nil
}

func (p *LoginWithVerifierForCertificateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LoginResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loginWithVerifierForCertificate_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LoginWithVerifierForCertificateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierForCertificateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LoginWithVerifierForCertificateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginWithVerifierForCertificateResult(%+v)", *p)
}

type LogoutArgs struct {
}

func NewLogoutArgs() *LogoutArgs {
	return &LogoutArgs{}
}

func (p *LogoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogoutArgs(%+v)", *p)
}

type LogoutResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewLogoutResult() *LogoutResult {
	return &LogoutResult{}
}

var LogoutResult_E_DEFAULT *TalkException

func (p *LogoutResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LogoutResult_E_DEFAULT
	}
	return p.E
}
func (p *LogoutResult) IsSetE() bool {
	return p.E != nil
}

func (p *LogoutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogoutResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LogoutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logout_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogoutResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LogoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogoutResult(%+v)", *p)
}

type LogoutSessionArgs struct {
	// unused field # 1
	TokenKey string `thrift:"tokenKey,2" json:"tokenKey"`
}

func NewLogoutSessionArgs() *LogoutSessionArgs {
	return &LogoutSessionArgs{}
}

func (p *LogoutSessionArgs) GetTokenKey() string {
	return p.TokenKey
}
func (p *LogoutSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogoutSessionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TokenKey = v
	}
	return nil
}

func (p *LogoutSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logoutSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogoutSessionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenKey", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tokenKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenKey)); err != nil {
		return fmt.Errorf("%T.tokenKey (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tokenKey: %s", p, err)
	}
	return err
}

func (p *LogoutSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogoutSessionArgs(%+v)", *p)
}

type LogoutSessionResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewLogoutSessionResult() *LogoutSessionResult {
	return &LogoutSessionResult{}
}

var LogoutSessionResult_E_DEFAULT *TalkException

func (p *LogoutSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return LogoutSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *LogoutSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *LogoutSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogoutSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LogoutSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("logoutSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogoutSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LogoutSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogoutSessionResult(%+v)", *p)
}

type NoopArgs struct {
}

func NewNoopArgs() *NoopArgs {
	return &NoopArgs{}
}

func (p *NoopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoopArgs(%+v)", *p)
}

type NoopResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewNoopResult() *NoopResult {
	return &NoopResult{}
}

var NoopResult_E_DEFAULT *TalkException

func (p *NoopResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NoopResult_E_DEFAULT
	}
	return p.E
}
func (p *NoopResult) IsSetE() bool {
	return p.E != nil
}

func (p *NoopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoopResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NoopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("noop_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoopResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NoopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoopResult(%+v)", *p)
}

type NotifiedRedirectArgs struct {
	// unused field # 1
	ParamMap map[string]string `thrift:"paramMap,2" json:"paramMap"`
}

func NewNotifiedRedirectArgs() *NotifiedRedirectArgs {
	return &NotifiedRedirectArgs{}
}

func (p *NotifiedRedirectArgs) GetParamMap() map[string]string {
	return p.ParamMap
}
func (p *NotifiedRedirectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifiedRedirectArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMap = tMap
	for i := 0; i < size; i++ {
		var _key635 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key635 = v
		}
		var _val636 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val636 = v
		}
		p.ParamMap[_key635] = _val636
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *NotifiedRedirectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifiedRedirect_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifiedRedirectArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:paramMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:paramMap: %s", p, err)
	}
	return err
}

func (p *NotifiedRedirectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifiedRedirectArgs(%+v)", *p)
}

type NotifiedRedirectResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewNotifiedRedirectResult() *NotifiedRedirectResult {
	return &NotifiedRedirectResult{}
}

var NotifiedRedirectResult_E_DEFAULT *TalkException

func (p *NotifiedRedirectResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifiedRedirectResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifiedRedirectResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifiedRedirectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifiedRedirectResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifiedRedirectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifiedRedirect_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifiedRedirectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifiedRedirectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifiedRedirectResult(%+v)", *p)
}

type NotifyBuddyOnAirArgs struct {
	Seq          int32    `thrift:"seq,1" json:"seq"`
	ReceiverMids []string `thrift:"receiverMids,2" json:"receiverMids"`
}

func NewNotifyBuddyOnAirArgs() *NotifyBuddyOnAirArgs {
	return &NotifyBuddyOnAirArgs{}
}

func (p *NotifyBuddyOnAirArgs) GetSeq() int32 {
	return p.Seq
}

func (p *NotifyBuddyOnAirArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *NotifyBuddyOnAirArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyBuddyOnAirArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *NotifyBuddyOnAirArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem637 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem637 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem637)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *NotifyBuddyOnAirArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyBuddyOnAir_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyBuddyOnAirArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *NotifyBuddyOnAirArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiverMids: %s", p, err)
	}
	return err
}

func (p *NotifyBuddyOnAirArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyBuddyOnAirArgs(%+v)", *p)
}

type NotifyBuddyOnAirResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewNotifyBuddyOnAirResult() *NotifyBuddyOnAirResult {
	return &NotifyBuddyOnAirResult{}
}

var NotifyBuddyOnAirResult_Success_DEFAULT map[string]string

func (p *NotifyBuddyOnAirResult) GetSuccess() map[string]string {
	return p.Success
}

var NotifyBuddyOnAirResult_E_DEFAULT *TalkException

func (p *NotifyBuddyOnAirResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifyBuddyOnAirResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifyBuddyOnAirResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NotifyBuddyOnAirResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifyBuddyOnAirResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyBuddyOnAirResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key638 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key638 = v
		}
		var _val639 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val639 = v
		}
		p.Success[_key638] = _val639
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *NotifyBuddyOnAirResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifyBuddyOnAirResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyBuddyOnAir_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyBuddyOnAirResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *NotifyBuddyOnAirResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifyBuddyOnAirResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyBuddyOnAirResult(%+v)", *p)
}

type NotifyIndividualEventArgs struct {
	// unused field # 1
	NotificationStatus NotificationStatus `thrift:"notificationStatus,2" json:"notificationStatus"`
	ReceiverMids       []string           `thrift:"receiverMids,3" json:"receiverMids"`
}

func NewNotifyIndividualEventArgs() *NotifyIndividualEventArgs {
	return &NotifyIndividualEventArgs{}
}

func (p *NotifyIndividualEventArgs) GetNotificationStatus() NotificationStatus {
	return p.NotificationStatus
}

func (p *NotifyIndividualEventArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *NotifyIndividualEventArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyIndividualEventArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := NotificationStatus(v)
		p.NotificationStatus = temp
	}
	return nil
}

func (p *NotifyIndividualEventArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem640 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem640 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem640)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *NotifyIndividualEventArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyIndividualEvent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyIndividualEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notificationStatus", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:notificationStatus: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NotificationStatus)); err != nil {
		return fmt.Errorf("%T.notificationStatus (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:notificationStatus: %s", p, err)
	}
	return err
}

func (p *NotifyIndividualEventArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:receiverMids: %s", p, err)
	}
	return err
}

func (p *NotifyIndividualEventArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyIndividualEventArgs(%+v)", *p)
}

type NotifyIndividualEventResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewNotifyIndividualEventResult() *NotifyIndividualEventResult {
	return &NotifyIndividualEventResult{}
}

var NotifyIndividualEventResult_E_DEFAULT *TalkException

func (p *NotifyIndividualEventResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifyIndividualEventResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifyIndividualEventResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifyIndividualEventResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyIndividualEventResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifyIndividualEventResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyIndividualEvent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyIndividualEventResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifyIndividualEventResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyIndividualEventResult(%+v)", *p)
}

type NotifyInstalledArgs struct {
	// unused field # 1
	UdidHash                      string `thrift:"udidHash,2" json:"udidHash"`
	ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" json:"applicationTypeWithExtensions"`
}

func NewNotifyInstalledArgs() *NotifyInstalledArgs {
	return &NotifyInstalledArgs{}
}

func (p *NotifyInstalledArgs) GetUdidHash() string {
	return p.UdidHash
}

func (p *NotifyInstalledArgs) GetApplicationTypeWithExtensions() string {
	return p.ApplicationTypeWithExtensions
}
func (p *NotifyInstalledArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyInstalledArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *NotifyInstalledArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ApplicationTypeWithExtensions = v
	}
	return nil
}

func (p *NotifyInstalledArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyInstalled_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyInstalledArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:udidHash: %s", p, err)
	}
	return err
}

func (p *NotifyInstalledArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:applicationTypeWithExtensions: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ApplicationTypeWithExtensions)); err != nil {
		return fmt.Errorf("%T.applicationTypeWithExtensions (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:applicationTypeWithExtensions: %s", p, err)
	}
	return err
}

func (p *NotifyInstalledArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyInstalledArgs(%+v)", *p)
}

type NotifyInstalledResult struct {
}

func NewNotifyInstalledResult() *NotifyInstalledResult {
	return &NotifyInstalledResult{}
}

func (p *NotifyInstalledResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyInstalledResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyInstalled_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyInstalledResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyInstalledResult(%+v)", *p)
}

type NotifyRegistrationCompleteArgs struct {
	// unused field # 1
	UdidHash                      string `thrift:"udidHash,2" json:"udidHash"`
	ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" json:"applicationTypeWithExtensions"`
}

func NewNotifyRegistrationCompleteArgs() *NotifyRegistrationCompleteArgs {
	return &NotifyRegistrationCompleteArgs{}
}

func (p *NotifyRegistrationCompleteArgs) GetUdidHash() string {
	return p.UdidHash
}

func (p *NotifyRegistrationCompleteArgs) GetApplicationTypeWithExtensions() string {
	return p.ApplicationTypeWithExtensions
}
func (p *NotifyRegistrationCompleteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyRegistrationCompleteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *NotifyRegistrationCompleteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ApplicationTypeWithExtensions = v
	}
	return nil
}

func (p *NotifyRegistrationCompleteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyRegistrationComplete_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyRegistrationCompleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:udidHash: %s", p, err)
	}
	return err
}

func (p *NotifyRegistrationCompleteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:applicationTypeWithExtensions: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ApplicationTypeWithExtensions)); err != nil {
		return fmt.Errorf("%T.applicationTypeWithExtensions (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:applicationTypeWithExtensions: %s", p, err)
	}
	return err
}

func (p *NotifyRegistrationCompleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyRegistrationCompleteArgs(%+v)", *p)
}

type NotifyRegistrationCompleteResult struct {
}

func NewNotifyRegistrationCompleteResult() *NotifyRegistrationCompleteResult {
	return &NotifyRegistrationCompleteResult{}
}

func (p *NotifyRegistrationCompleteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyRegistrationCompleteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyRegistrationComplete_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyRegistrationCompleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyRegistrationCompleteResult(%+v)", *p)
}

type NotifySleepArgs struct {
	// unused field # 1
	LastRev int64 `thrift:"lastRev,2" json:"lastRev"`
	Badge   int32 `thrift:"badge,3" json:"badge"`
}

func NewNotifySleepArgs() *NotifySleepArgs {
	return &NotifySleepArgs{}
}

func (p *NotifySleepArgs) GetLastRev() int64 {
	return p.LastRev
}

func (p *NotifySleepArgs) GetBadge() int32 {
	return p.Badge
}
func (p *NotifySleepArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifySleepArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LastRev = v
	}
	return nil
}

func (p *NotifySleepArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Badge = v
	}
	return nil
}

func (p *NotifySleepArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifySleep_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifySleepArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lastRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
		return fmt.Errorf("%T.lastRev (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lastRev: %s", p, err)
	}
	return err
}

func (p *NotifySleepArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("badge", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:badge: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Badge)); err != nil {
		return fmt.Errorf("%T.badge (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:badge: %s", p, err)
	}
	return err
}

func (p *NotifySleepArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifySleepArgs(%+v)", *p)
}

type NotifySleepResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewNotifySleepResult() *NotifySleepResult {
	return &NotifySleepResult{}
}

var NotifySleepResult_E_DEFAULT *TalkException

func (p *NotifySleepResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifySleepResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifySleepResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifySleepResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifySleepResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifySleepResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifySleep_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifySleepResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifySleepResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifySleepResult(%+v)", *p)
}

type NotifyUpdatedArgs struct {
	// unused field # 1
	LastRev    int64       `thrift:"lastRev,2" json:"lastRev"`
	DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" json:"deviceInfo"`
}

func NewNotifyUpdatedArgs() *NotifyUpdatedArgs {
	return &NotifyUpdatedArgs{}
}

func (p *NotifyUpdatedArgs) GetLastRev() int64 {
	return p.LastRev
}

var NotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *NotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return NotifyUpdatedArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *NotifyUpdatedArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *NotifyUpdatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyUpdatedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LastRev = v
	}
	return nil
}

func (p *NotifyUpdatedArgs) ReadField3(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *NotifyUpdatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyUpdated_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyUpdatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lastRev: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
		return fmt.Errorf("%T.lastRev (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lastRev: %s", p, err)
	}
	return err
}

func (p *NotifyUpdatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deviceInfo: %s", p, err)
	}
	return err
}

func (p *NotifyUpdatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyUpdatedArgs(%+v)", *p)
}

type NotifyUpdatedResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewNotifyUpdatedResult() *NotifyUpdatedResult {
	return &NotifyUpdatedResult{}
}

var NotifyUpdatedResult_E_DEFAULT *TalkException

func (p *NotifyUpdatedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifyUpdatedResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifyUpdatedResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifyUpdatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyUpdatedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifyUpdatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyUpdated_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyUpdatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifyUpdatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyUpdatedResult(%+v)", *p)
}

type OpenProximityMatchArgs struct {
	// unused field # 1
	Location *Location `thrift:"location,2" json:"location"`
}

func NewOpenProximityMatchArgs() *OpenProximityMatchArgs {
	return &OpenProximityMatchArgs{}
}

var OpenProximityMatchArgs_Location_DEFAULT *Location

func (p *OpenProximityMatchArgs) GetLocation() *Location {
	if !p.IsSetLocation() {
		return OpenProximityMatchArgs_Location_DEFAULT
	}
	return p.Location
}
func (p *OpenProximityMatchArgs) IsSetLocation() bool {
	return p.Location != nil
}

func (p *OpenProximityMatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenProximityMatchArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Location = &Location{}
	if err := p.Location.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Location, err)
	}
	return nil
}

func (p *OpenProximityMatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openProximityMatch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenProximityMatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:location: %s", p, err)
	}
	if err := p.Location.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Location, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:location: %s", p, err)
	}
	return err
}

func (p *OpenProximityMatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenProximityMatchArgs(%+v)", *p)
}

type OpenProximityMatchResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewOpenProximityMatchResult() *OpenProximityMatchResult {
	return &OpenProximityMatchResult{}
}

var OpenProximityMatchResult_Success_DEFAULT string

func (p *OpenProximityMatchResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return OpenProximityMatchResult_Success_DEFAULT
	}
	return *p.Success
}

var OpenProximityMatchResult_E_DEFAULT *TalkException

func (p *OpenProximityMatchResult) GetE() *TalkException {
	if !p.IsSetE() {
		return OpenProximityMatchResult_E_DEFAULT
	}
	return p.E
}
func (p *OpenProximityMatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OpenProximityMatchResult) IsSetE() bool {
	return p.E != nil
}

func (p *OpenProximityMatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OpenProximityMatchResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *OpenProximityMatchResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *OpenProximityMatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openProximityMatch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OpenProximityMatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *OpenProximityMatchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *OpenProximityMatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenProximityMatchResult(%+v)", *p)
}

type RegisterBuddyUserArgs struct {
	// unused field # 1
	BuddyId           string `thrift:"buddyId,2" json:"buddyId"`
	RegistrarPassword string `thrift:"registrarPassword,3" json:"registrarPassword"`
}

func NewRegisterBuddyUserArgs() *RegisterBuddyUserArgs {
	return &RegisterBuddyUserArgs{}
}

func (p *RegisterBuddyUserArgs) GetBuddyId() string {
	return p.BuddyId
}

func (p *RegisterBuddyUserArgs) GetRegistrarPassword() string {
	return p.RegistrarPassword
}
func (p *RegisterBuddyUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterBuddyUserArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BuddyId = v
	}
	return nil
}

func (p *RegisterBuddyUserArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RegistrarPassword = v
	}
	return nil
}

func (p *RegisterBuddyUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerBuddyUser_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterBuddyUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddyId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:buddyId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BuddyId)); err != nil {
		return fmt.Errorf("%T.buddyId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:buddyId: %s", p, err)
	}
	return err
}

func (p *RegisterBuddyUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registrarPassword", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:registrarPassword: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RegistrarPassword)); err != nil {
		return fmt.Errorf("%T.registrarPassword (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:registrarPassword: %s", p, err)
	}
	return err
}

func (p *RegisterBuddyUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterBuddyUserArgs(%+v)", *p)
}

type RegisterBuddyUserResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterBuddyUserResult() *RegisterBuddyUserResult {
	return &RegisterBuddyUserResult{}
}

var RegisterBuddyUserResult_Success_DEFAULT string

func (p *RegisterBuddyUserResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterBuddyUserResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterBuddyUserResult_E_DEFAULT *TalkException

func (p *RegisterBuddyUserResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterBuddyUserResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterBuddyUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterBuddyUserResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterBuddyUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterBuddyUserResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterBuddyUserResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterBuddyUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerBuddyUser_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterBuddyUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterBuddyUserResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterBuddyUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterBuddyUserResult(%+v)", *p)
}

type RegisterBuddyUseridArgs struct {
	// unused field # 1
	Seq    int32  `thrift:"seq,2" json:"seq"`
	Userid string `thrift:"userid,3" json:"userid"`
}

func NewRegisterBuddyUseridArgs() *RegisterBuddyUseridArgs {
	return &RegisterBuddyUseridArgs{}
}

func (p *RegisterBuddyUseridArgs) GetSeq() int32 {
	return p.Seq
}

func (p *RegisterBuddyUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *RegisterBuddyUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterBuddyUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *RegisterBuddyUseridArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *RegisterBuddyUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerBuddyUserid_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterBuddyUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *RegisterBuddyUseridArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:userid: %s", p, err)
	}
	return err
}

func (p *RegisterBuddyUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterBuddyUseridArgs(%+v)", *p)
}

type RegisterBuddyUseridResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterBuddyUseridResult() *RegisterBuddyUseridResult {
	return &RegisterBuddyUseridResult{}
}

var RegisterBuddyUseridResult_E_DEFAULT *TalkException

func (p *RegisterBuddyUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterBuddyUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterBuddyUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterBuddyUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterBuddyUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterBuddyUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerBuddyUserid_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterBuddyUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterBuddyUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterBuddyUseridResult(%+v)", *p)
}

type RegisterDeviceArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewRegisterDeviceArgs() *RegisterDeviceArgs {
	return &RegisterDeviceArgs{}
}

func (p *RegisterDeviceArgs) GetSessionId() string {
	return p.SessionId
}
func (p *RegisterDeviceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *RegisterDeviceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDevice_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceArgs(%+v)", *p)
}

type RegisterDeviceResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterDeviceResult() *RegisterDeviceResult {
	return &RegisterDeviceResult{}
}

var RegisterDeviceResult_Success_DEFAULT string

func (p *RegisterDeviceResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterDeviceResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterDeviceResult_E_DEFAULT *TalkException

func (p *RegisterDeviceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterDeviceResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterDeviceResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterDeviceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterDeviceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterDeviceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDevice_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceResult(%+v)", *p)
}

type RegisterDeviceWithIdentityCredentialArgs struct {
	// unused field # 1
	SessionId  string           `thrift:"sessionId,2" json:"sessionId"`
	Identifier string           `thrift:"identifier,3" json:"identifier"`
	Verifier   string           `thrift:"verifier,4" json:"verifier"`
	Provider   IdentityProvider `thrift:"provider,5" json:"provider"`
}

func NewRegisterDeviceWithIdentityCredentialArgs() *RegisterDeviceWithIdentityCredentialArgs {
	return &RegisterDeviceWithIdentityCredentialArgs{}
}

func (p *RegisterDeviceWithIdentityCredentialArgs) GetSessionId() string {
	return p.SessionId
}

func (p *RegisterDeviceWithIdentityCredentialArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *RegisterDeviceWithIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *RegisterDeviceWithIdentityCredentialArgs) GetVerifier() string {
	return p.Verifier
}
func (p *RegisterDeviceWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identifier: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:verifier: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:provider: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithIdentityCredentialArgs(%+v)", *p)
}

type RegisterDeviceWithIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterDeviceWithIdentityCredentialResult() *RegisterDeviceWithIdentityCredentialResult {
	return &RegisterDeviceWithIdentityCredentialResult{}
}

var RegisterDeviceWithIdentityCredentialResult_Success_DEFAULT string

func (p *RegisterDeviceWithIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterDeviceWithIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterDeviceWithIdentityCredentialResult_E_DEFAULT *TalkException

func (p *RegisterDeviceWithIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterDeviceWithIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterDeviceWithIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithIdentityCredentialResult(%+v)", *p)
}

type RegisterDeviceWithoutPhoneNumberArgs struct {
	// unused field # 1
	Region     string      `thrift:"region,2" json:"region"`
	UdidHash   string      `thrift:"udidHash,3" json:"udidHash"`
	DeviceInfo *DeviceInfo `thrift:"deviceInfo,4" json:"deviceInfo"`
}

func NewRegisterDeviceWithoutPhoneNumberArgs() *RegisterDeviceWithoutPhoneNumberArgs {
	return &RegisterDeviceWithoutPhoneNumberArgs{}
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) GetRegion() string {
	return p.Region
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) GetUdidHash() string {
	return p.UdidHash
}

var RegisterDeviceWithoutPhoneNumberArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterDeviceWithoutPhoneNumberArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterDeviceWithoutPhoneNumberArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *RegisterDeviceWithoutPhoneNumberArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) ReadField4(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithoutPhoneNumber_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:region: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:udidHash: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithoutPhoneNumberArgs(%+v)", *p)
}

type RegisterDeviceWithoutPhoneNumberResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterDeviceWithoutPhoneNumberResult() *RegisterDeviceWithoutPhoneNumberResult {
	return &RegisterDeviceWithoutPhoneNumberResult{}
}

var RegisterDeviceWithoutPhoneNumberResult_Success_DEFAULT string

func (p *RegisterDeviceWithoutPhoneNumberResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterDeviceWithoutPhoneNumberResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterDeviceWithoutPhoneNumberResult_E_DEFAULT *TalkException

func (p *RegisterDeviceWithoutPhoneNumberResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterDeviceWithoutPhoneNumberResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterDeviceWithoutPhoneNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithoutPhoneNumber_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithoutPhoneNumberResult(%+v)", *p)
}

type RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs struct {
	// unused field # 1
	Region     string           `thrift:"region,2" json:"region"`
	UdidHash   string           `thrift:"udidHash,3" json:"udidHash"`
	DeviceInfo *DeviceInfo      `thrift:"deviceInfo,4" json:"deviceInfo"`
	Provider   IdentityProvider `thrift:"provider,5" json:"provider"`
	Identifier string           `thrift:"identifier,6" json:"identifier"`
	Verifier   string           `thrift:"verifier,7" json:"verifier"`
	Mid        string           `thrift:"mid,8" json:"mid"`
}

func NewRegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs() *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs {
	return &RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs{}
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetRegion() string {
	return p.Region
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetUdidHash() string {
	return p.UdidHash
}

var RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetVerifier() string {
	return p.Verifier
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) GetMid() string {
	return p.Mid
}
func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:region: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:udidHash: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:provider: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:identifier: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:verifier: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:mid: %s", p, err)
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithoutPhoneNumberWithIdentityCredentialArgs(%+v)", *p)
}

type RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult() *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult {
	return &RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult{}
}

var RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult_Success_DEFAULT string

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult_E_DEFAULT *TalkException

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterDeviceWithoutPhoneNumberWithIdentityCredentialResult(%+v)", *p)
}

type RegisterUseridArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Userid string `thrift:"userid,2" json:"userid"`
}

func NewRegisterUseridArgs() *RegisterUseridArgs {
	return &RegisterUseridArgs{}
}

func (p *RegisterUseridArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *RegisterUseridArgs) GetUserid() string {
	return p.Userid
}
func (p *RegisterUseridArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterUseridArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *RegisterUseridArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *RegisterUseridArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerUserid_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *RegisterUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
	}
	return err
}

func (p *RegisterUseridArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterUseridArgs(%+v)", *p)
}

type RegisterUseridResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterUseridResult() *RegisterUseridResult {
	return &RegisterUseridResult{}
}

var RegisterUseridResult_Success_DEFAULT bool

func (p *RegisterUseridResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RegisterUseridResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterUseridResult_E_DEFAULT *TalkException

func (p *RegisterUseridResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterUseridResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterUseridResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterUseridResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterUseridResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterUseridResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterUseridResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterUseridResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerUserid_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterUseridResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterUseridResult(%+v)", *p)
}

type RegisterWapDeviceArgs struct {
	// unused field # 1
	InvitationHash string      `thrift:"invitationHash,2" json:"invitationHash"`
	GuidHash       string      `thrift:"guidHash,3" json:"guidHash"`
	Email          string      `thrift:"email,4" json:"email"`
	DeviceInfo     *DeviceInfo `thrift:"deviceInfo,5" json:"deviceInfo"`
}

func NewRegisterWapDeviceArgs() *RegisterWapDeviceArgs {
	return &RegisterWapDeviceArgs{}
}

func (p *RegisterWapDeviceArgs) GetInvitationHash() string {
	return p.InvitationHash
}

func (p *RegisterWapDeviceArgs) GetGuidHash() string {
	return p.GuidHash
}

func (p *RegisterWapDeviceArgs) GetEmail() string {
	return p.Email
}

var RegisterWapDeviceArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterWapDeviceArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterWapDeviceArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *RegisterWapDeviceArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterWapDeviceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWapDeviceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.InvitationHash = v
	}
	return nil
}

func (p *RegisterWapDeviceArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GuidHash = v
	}
	return nil
}

func (p *RegisterWapDeviceArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *RegisterWapDeviceArgs) ReadField5(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterWapDeviceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWapDevice_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWapDeviceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invitationHash", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:invitationHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InvitationHash)); err != nil {
		return fmt.Errorf("%T.invitationHash (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:invitationHash: %s", p, err)
	}
	return err
}

func (p *RegisterWapDeviceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guidHash", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:guidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GuidHash)); err != nil {
		return fmt.Errorf("%T.guidHash (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:guidHash: %s", p, err)
	}
	return err
}

func (p *RegisterWapDeviceArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:email: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return fmt.Errorf("%T.email (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:email: %s", p, err)
	}
	return err
}

func (p *RegisterWapDeviceArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterWapDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWapDeviceArgs(%+v)", *p)
}

type RegisterWapDeviceResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterWapDeviceResult() *RegisterWapDeviceResult {
	return &RegisterWapDeviceResult{}
}

var RegisterWapDeviceResult_Success_DEFAULT string

func (p *RegisterWapDeviceResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterWapDeviceResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterWapDeviceResult_E_DEFAULT *TalkException

func (p *RegisterWapDeviceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterWapDeviceResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterWapDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterWapDeviceResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterWapDeviceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWapDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterWapDeviceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterWapDeviceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWapDevice_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWapDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWapDeviceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWapDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWapDeviceResult(%+v)", *p)
}

type RegisterWithExistingSnsIdAndIdentityCredentialArgs struct {
	// unused field # 1
	IdentityCredential *IdentityCredential `thrift:"identityCredential,2" json:"identityCredential"`
	Region             string              `thrift:"region,3" json:"region"`
	UdidHash           string              `thrift:"udidHash,4" json:"udidHash"`
	DeviceInfo         *DeviceInfo         `thrift:"deviceInfo,5" json:"deviceInfo"`
}

func NewRegisterWithExistingSnsIdAndIdentityCredentialArgs() *RegisterWithExistingSnsIdAndIdentityCredentialArgs {
	return &RegisterWithExistingSnsIdAndIdentityCredentialArgs{}
}

var RegisterWithExistingSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
	if !p.IsSetIdentityCredential() {
		return RegisterWithExistingSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
	}
	return p.IdentityCredential
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) GetRegion() string {
	return p.Region
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
	return p.UdidHash
}

var RegisterWithExistingSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterWithExistingSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
	return p.IdentityCredential != nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	p.IdentityCredential = &IdentityCredential{}
	if err := p.IdentityCredential.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IdentityCredential, err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithExistingSnsIdAndIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identityCredential: %s", p, err)
	}
	if err := p.IdentityCredential.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.IdentityCredential, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identityCredential: %s", p, err)
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:region: %s", p, err)
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:udidHash: %s", p, err)
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithExistingSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

type RegisterWithExistingSnsIdAndIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterWithExistingSnsIdAndIdentityCredentialResult() *RegisterWithExistingSnsIdAndIdentityCredentialResult {
	return &RegisterWithExistingSnsIdAndIdentityCredentialResult{}
}

var RegisterWithExistingSnsIdAndIdentityCredentialResult_Success_DEFAULT string

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterWithExistingSnsIdAndIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterWithExistingSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterWithExistingSnsIdAndIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithExistingSnsIdAndIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithExistingSnsIdAndIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithExistingSnsIdAndIdentityCredentialResult(%+v)", *p)
}

type RegisterWithSnsIdArgs struct {
	// unused field # 1
	SnsIdType      SnsIdType   `thrift:"snsIdType,2" json:"snsIdType"`
	SnsAccessToken string      `thrift:"snsAccessToken,3" json:"snsAccessToken"`
	Region         string      `thrift:"region,4" json:"region"`
	UdidHash       string      `thrift:"udidHash,5" json:"udidHash"`
	DeviceInfo     *DeviceInfo `thrift:"deviceInfo,6" json:"deviceInfo"`
	Mid            string      `thrift:"mid,7" json:"mid"`
}

func NewRegisterWithSnsIdArgs() *RegisterWithSnsIdArgs {
	return &RegisterWithSnsIdArgs{}
}

func (p *RegisterWithSnsIdArgs) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}

func (p *RegisterWithSnsIdArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}

func (p *RegisterWithSnsIdArgs) GetRegion() string {
	return p.Region
}

func (p *RegisterWithSnsIdArgs) GetUdidHash() string {
	return p.UdidHash
}

var RegisterWithSnsIdArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterWithSnsIdArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterWithSnsIdArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *RegisterWithSnsIdArgs) GetMid() string {
	return p.Mid
}
func (p *RegisterWithSnsIdArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterWithSnsIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField6(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSnsIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsAccessToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return fmt.Errorf("%T.snsAccessToken (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsAccessToken: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:region: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:udidHash: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:mid: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdArgs(%+v)", *p)
}

type RegisterWithSnsIdResult struct {
	Success *RegisterWithSnsIdResult_ `thrift:"success,0" json:"success"`
	E       *TalkException            `thrift:"e,1" json:"e"`
}

func NewRegisterWithSnsIdResult() *RegisterWithSnsIdResult {
	return &RegisterWithSnsIdResult{}
}

var RegisterWithSnsIdResult_Success_DEFAULT *RegisterWithSnsIdResult_

func (p *RegisterWithSnsIdResult) GetSuccess() *RegisterWithSnsIdResult_ {
	if !p.IsSetSuccess() {
		return RegisterWithSnsIdResult_Success_DEFAULT
	}
	return p.Success
}

var RegisterWithSnsIdResult_E_DEFAULT *TalkException

func (p *RegisterWithSnsIdResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterWithSnsIdResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterWithSnsIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterWithSnsIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterWithSnsIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RegisterWithSnsIdResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSnsIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithSnsIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithSnsIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdResult(%+v)", *p)
}

type RegisterWithSnsIdAndIdentityCredentialArgs struct {
	// unused field # 1
	SnsIdType          SnsIdType           `thrift:"snsIdType,2" json:"snsIdType"`
	SnsAccessToken     string              `thrift:"snsAccessToken,3" json:"snsAccessToken"`
	IdentityCredential *IdentityCredential `thrift:"identityCredential,4" json:"identityCredential"`
	Region             string              `thrift:"region,5" json:"region"`
	UdidHash           string              `thrift:"udidHash,6" json:"udidHash"`
	DeviceInfo         *DeviceInfo         `thrift:"deviceInfo,7" json:"deviceInfo"`
}

func NewRegisterWithSnsIdAndIdentityCredentialArgs() *RegisterWithSnsIdAndIdentityCredentialArgs {
	return &RegisterWithSnsIdAndIdentityCredentialArgs{}
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetSnsAccessToken() string {
	return p.SnsAccessToken
}

var RegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
	if !p.IsSetIdentityCredential() {
		return RegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
	}
	return p.IdentityCredential
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetRegion() string {
	return p.Region
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
	return p.UdidHash
}

var RegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return RegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *RegisterWithSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
	return p.IdentityCredential != nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SnsAccessToken = v
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	p.IdentityCredential = &IdentityCredential{}
	if err := p.IdentityCredential.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IdentityCredential, err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) ReadField7(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:snsAccessToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
		return fmt.Errorf("%T.snsAccessToken (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:snsAccessToken: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:identityCredential: %s", p, err)
	}
	if err := p.IdentityCredential.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.IdentityCredential, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:identityCredential: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:region: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:udidHash: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:deviceInfo: %s", p, err)
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

type RegisterWithSnsIdAndIdentityCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRegisterWithSnsIdAndIdentityCredentialResult() *RegisterWithSnsIdAndIdentityCredentialResult {
	return &RegisterWithSnsIdAndIdentityCredentialResult{}
}

var RegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT string

func (p *RegisterWithSnsIdAndIdentityCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var RegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException

func (p *RegisterWithSnsIdAndIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterWithSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterWithSnsIdAndIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSnsIdAndIdentityCredentialResult(%+v)", *p)
}

type ReissueDeviceCredentialArgs struct {
}

func NewReissueDeviceCredentialArgs() *ReissueDeviceCredentialArgs {
	return &ReissueDeviceCredentialArgs{}
}

func (p *ReissueDeviceCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReissueDeviceCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueDeviceCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReissueDeviceCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueDeviceCredentialArgs(%+v)", *p)
}

type ReissueDeviceCredentialResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewReissueDeviceCredentialResult() *ReissueDeviceCredentialResult {
	return &ReissueDeviceCredentialResult{}
}

var ReissueDeviceCredentialResult_Success_DEFAULT string

func (p *ReissueDeviceCredentialResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ReissueDeviceCredentialResult_Success_DEFAULT
	}
	return *p.Success
}

var ReissueDeviceCredentialResult_E_DEFAULT *TalkException

func (p *ReissueDeviceCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReissueDeviceCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *ReissueDeviceCredentialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReissueDeviceCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReissueDeviceCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReissueDeviceCredentialResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ReissueDeviceCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReissueDeviceCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueDeviceCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReissueDeviceCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReissueDeviceCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReissueDeviceCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueDeviceCredentialResult(%+v)", *p)
}

type ReissueUserTicketArgs struct {
	// unused fields # 1 to 2
	ExpirationTime int64 `thrift:"expirationTime,3" json:"expirationTime"`
	MaxUseCount    int32 `thrift:"maxUseCount,4" json:"maxUseCount"`
}

func NewReissueUserTicketArgs() *ReissueUserTicketArgs {
	return &ReissueUserTicketArgs{}
}

func (p *ReissueUserTicketArgs) GetExpirationTime() int64 {
	return p.ExpirationTime
}

func (p *ReissueUserTicketArgs) GetMaxUseCount() int32 {
	return p.MaxUseCount
}
func (p *ReissueUserTicketArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReissueUserTicketArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExpirationTime = v
	}
	return nil
}

func (p *ReissueUserTicketArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxUseCount = v
	}
	return nil
}

func (p *ReissueUserTicketArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueUserTicket_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReissueUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:expirationTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
		return fmt.Errorf("%T.expirationTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:expirationTime: %s", p, err)
	}
	return err
}

func (p *ReissueUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxUseCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
		return fmt.Errorf("%T.maxUseCount (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxUseCount: %s", p, err)
	}
	return err
}

func (p *ReissueUserTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueUserTicketArgs(%+v)", *p)
}

type ReissueUserTicketResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewReissueUserTicketResult() *ReissueUserTicketResult {
	return &ReissueUserTicketResult{}
}

var ReissueUserTicketResult_Success_DEFAULT string

func (p *ReissueUserTicketResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ReissueUserTicketResult_Success_DEFAULT
	}
	return *p.Success
}

var ReissueUserTicketResult_E_DEFAULT *TalkException

func (p *ReissueUserTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReissueUserTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *ReissueUserTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReissueUserTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReissueUserTicketResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReissueUserTicketResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ReissueUserTicketResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReissueUserTicketResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reissueUserTicket_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReissueUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReissueUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReissueUserTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueUserTicketResult(%+v)", *p)
}

type RejectGroupInvitationArgs struct {
	ReqSeq  int32  `thrift:"reqSeq,1" json:"reqSeq"`
	GroupId string `thrift:"groupId,2" json:"groupId"`
}

func NewRejectGroupInvitationArgs() *RejectGroupInvitationArgs {
	return &RejectGroupInvitationArgs{}
}

func (p *RejectGroupInvitationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *RejectGroupInvitationArgs) GetGroupId() string {
	return p.GroupId
}
func (p *RejectGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RejectGroupInvitationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *RejectGroupInvitationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *RejectGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RejectGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *RejectGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return fmt.Errorf("%T.groupId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupId: %s", p, err)
	}
	return err
}

func (p *RejectGroupInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectGroupInvitationArgs(%+v)", *p)
}

type RejectGroupInvitationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRejectGroupInvitationResult() *RejectGroupInvitationResult {
	return &RejectGroupInvitationResult{}
}

var RejectGroupInvitationResult_E_DEFAULT *TalkException

func (p *RejectGroupInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RejectGroupInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *RejectGroupInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *RejectGroupInvitationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RejectGroupInvitationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RejectGroupInvitationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rejectGroupInvitation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RejectGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RejectGroupInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectGroupInvitationResult(%+v)", *p)
}

type ReleaseSessionArgs struct {
}

func NewReleaseSessionArgs() *ReleaseSessionArgs {
	return &ReleaseSessionArgs{}
}

func (p *ReleaseSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReleaseSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("releaseSession_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReleaseSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReleaseSessionArgs(%+v)", *p)
}

type ReleaseSessionResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReleaseSessionResult() *ReleaseSessionResult {
	return &ReleaseSessionResult{}
}

var ReleaseSessionResult_E_DEFAULT *TalkException

func (p *ReleaseSessionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReleaseSessionResult_E_DEFAULT
	}
	return p.E
}
func (p *ReleaseSessionResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReleaseSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReleaseSessionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReleaseSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("releaseSession_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReleaseSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReleaseSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReleaseSessionResult(%+v)", *p)
}

type RemoveAllMessagesArgs struct {
	Seq           int32  `thrift:"seq,1" json:"seq"`
	LastMessageId string `thrift:"lastMessageId,2" json:"lastMessageId"`
}

func NewRemoveAllMessagesArgs() *RemoveAllMessagesArgs {
	return &RemoveAllMessagesArgs{}
}

func (p *RemoveAllMessagesArgs) GetSeq() int32 {
	return p.Seq
}

func (p *RemoveAllMessagesArgs) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *RemoveAllMessagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveAllMessagesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *RemoveAllMessagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *RemoveAllMessagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveAllMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *RemoveAllMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:lastMessageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return fmt.Errorf("%T.lastMessageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:lastMessageId: %s", p, err)
	}
	return err
}

func (p *RemoveAllMessagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveAllMessagesArgs(%+v)", *p)
}

type RemoveAllMessagesResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRemoveAllMessagesResult() *RemoveAllMessagesResult {
	return &RemoveAllMessagesResult{}
}

var RemoveAllMessagesResult_E_DEFAULT *TalkException

func (p *RemoveAllMessagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RemoveAllMessagesResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveAllMessagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveAllMessagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveAllMessagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveAllMessagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeAllMessages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveAllMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveAllMessagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveAllMessagesResult(%+v)", *p)
}

type RemoveBuddyLocationArgs struct {
	// unused field # 1
	Mid   string `thrift:"mid,2" json:"mid"`
	Index int32  `thrift:"index,3" json:"index"`
}

func NewRemoveBuddyLocationArgs() *RemoveBuddyLocationArgs {
	return &RemoveBuddyLocationArgs{}
}

func (p *RemoveBuddyLocationArgs) GetMid() string {
	return p.Mid
}

func (p *RemoveBuddyLocationArgs) GetIndex() int32 {
	return p.Index
}
func (p *RemoveBuddyLocationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveBuddyLocationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *RemoveBuddyLocationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *RemoveBuddyLocationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeBuddyLocation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveBuddyLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *RemoveBuddyLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return fmt.Errorf("%T.index (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index: %s", p, err)
	}
	return err
}

func (p *RemoveBuddyLocationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveBuddyLocationArgs(%+v)", *p)
}

type RemoveBuddyLocationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRemoveBuddyLocationResult() *RemoveBuddyLocationResult {
	return &RemoveBuddyLocationResult{}
}

var RemoveBuddyLocationResult_E_DEFAULT *TalkException

func (p *RemoveBuddyLocationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RemoveBuddyLocationResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveBuddyLocationResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveBuddyLocationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveBuddyLocationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveBuddyLocationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeBuddyLocation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveBuddyLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveBuddyLocationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveBuddyLocationResult(%+v)", *p)
}

type RemoveMessageArgs struct {
	// unused field # 1
	MessageId string `thrift:"messageId,2" json:"messageId"`
}

func NewRemoveMessageArgs() *RemoveMessageArgs {
	return &RemoveMessageArgs{}
}

func (p *RemoveMessageArgs) GetMessageId() string {
	return p.MessageId
}
func (p *RemoveMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *RemoveMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return fmt.Errorf("%T.messageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageId: %s", p, err)
	}
	return err
}

func (p *RemoveMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveMessageArgs(%+v)", *p)
}

type RemoveMessageResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRemoveMessageResult() *RemoveMessageResult {
	return &RemoveMessageResult{}
}

var RemoveMessageResult_Success_DEFAULT bool

func (p *RemoveMessageResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoveMessageResult_Success_DEFAULT
	}
	return *p.Success
}

var RemoveMessageResult_E_DEFAULT *TalkException

func (p *RemoveMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RemoveMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveMessageResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoveMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RemoveMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveMessageResult(%+v)", *p)
}

type RemoveMessageFromMyHomeArgs struct {
	// unused field # 1
	MessageId string `thrift:"messageId,2" json:"messageId"`
}

func NewRemoveMessageFromMyHomeArgs() *RemoveMessageFromMyHomeArgs {
	return &RemoveMessageFromMyHomeArgs{}
}

func (p *RemoveMessageFromMyHomeArgs) GetMessageId() string {
	return p.MessageId
}
func (p *RemoveMessageFromMyHomeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveMessageFromMyHomeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *RemoveMessageFromMyHomeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeMessageFromMyHome_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveMessageFromMyHomeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return fmt.Errorf("%T.messageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageId: %s", p, err)
	}
	return err
}

func (p *RemoveMessageFromMyHomeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveMessageFromMyHomeArgs(%+v)", *p)
}

type RemoveMessageFromMyHomeResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRemoveMessageFromMyHomeResult() *RemoveMessageFromMyHomeResult {
	return &RemoveMessageFromMyHomeResult{}
}

var RemoveMessageFromMyHomeResult_Success_DEFAULT bool

func (p *RemoveMessageFromMyHomeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RemoveMessageFromMyHomeResult_Success_DEFAULT
	}
	return *p.Success
}

var RemoveMessageFromMyHomeResult_E_DEFAULT *TalkException

func (p *RemoveMessageFromMyHomeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RemoveMessageFromMyHomeResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveMessageFromMyHomeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveMessageFromMyHomeResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveMessageFromMyHomeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveMessageFromMyHomeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoveMessageFromMyHomeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveMessageFromMyHomeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeMessageFromMyHome_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveMessageFromMyHomeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RemoveMessageFromMyHomeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveMessageFromMyHomeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveMessageFromMyHomeResult(%+v)", *p)
}

type RemoveSnsIdArgs struct {
	// unused field # 1
	SnsIdType SnsIdType `thrift:"snsIdType,2" json:"snsIdType"`
}

func NewRemoveSnsIdArgs() *RemoveSnsIdArgs {
	return &RemoveSnsIdArgs{}
}

func (p *RemoveSnsIdArgs) GetSnsIdType() SnsIdType {
	return p.SnsIdType
}
func (p *RemoveSnsIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveSnsIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SnsIdType(v)
		p.SnsIdType = temp
	}
	return nil
}

func (p *RemoveSnsIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeSnsId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveSnsIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:snsIdType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
		return fmt.Errorf("%T.snsIdType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:snsIdType: %s", p, err)
	}
	return err
}

func (p *RemoveSnsIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveSnsIdArgs(%+v)", *p)
}

type RemoveSnsIdResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewRemoveSnsIdResult() *RemoveSnsIdResult {
	return &RemoveSnsIdResult{}
}

var RemoveSnsIdResult_Success_DEFAULT string

func (p *RemoveSnsIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return RemoveSnsIdResult_Success_DEFAULT
	}
	return *p.Success
}

var RemoveSnsIdResult_E_DEFAULT *TalkException

func (p *RemoveSnsIdResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RemoveSnsIdResult_E_DEFAULT
	}
	return p.E
}
func (p *RemoveSnsIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveSnsIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *RemoveSnsIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveSnsIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RemoveSnsIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RemoveSnsIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeSnsId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveSnsIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RemoveSnsIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RemoveSnsIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveSnsIdResult(%+v)", *p)
}

type ReportArgs struct {
	// unused field # 1
	SyncOpRevision int64        `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Category       SyncCategory `thrift:"category,3" json:"category"`
	Report         string       `thrift:"report,4" json:"report"`
}

func NewReportArgs() *ReportArgs {
	return &ReportArgs{}
}

func (p *ReportArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

func (p *ReportArgs) GetCategory() SyncCategory {
	return p.Category
}

func (p *ReportArgs) GetReport() string {
	return p.Report
}
func (p *ReportArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := SyncCategory(v)
		p.Category = temp
	}
	return nil
}

func (p *ReportArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Report = v
	}
	return nil
}

func (p *ReportArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("report_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:category: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return fmt.Errorf("%T.category (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:category: %s", p, err)
	}
	return err
}

func (p *ReportArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("report", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:report: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Report)); err != nil {
		return fmt.Errorf("%T.report (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:report: %s", p, err)
	}
	return err
}

func (p *ReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportArgs(%+v)", *p)
}

type ReportResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportResult() *ReportResult {
	return &ReportResult{}
}

var ReportResult_E_DEFAULT *TalkException

func (p *ReportResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("report_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportResult(%+v)", *p)
}

type ReportContactsArgs struct {
	// unused field # 1
	SyncOpRevision int64            `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Category       SyncCategory     `thrift:"category,3" json:"category"`
	ContactReports []*ContactReport `thrift:"contactReports,4" json:"contactReports"`
	ActionType     SyncActionType   `thrift:"actionType,5" json:"actionType"`
}

func NewReportContactsArgs() *ReportContactsArgs {
	return &ReportContactsArgs{}
}

func (p *ReportContactsArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

func (p *ReportContactsArgs) GetCategory() SyncCategory {
	return p.Category
}

func (p *ReportContactsArgs) GetContactReports() []*ContactReport {
	return p.ContactReports
}

func (p *ReportContactsArgs) GetActionType() SyncActionType {
	return p.ActionType
}
func (p *ReportContactsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportContactsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportContactsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := SyncCategory(v)
		p.Category = temp
	}
	return nil
}

func (p *ReportContactsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ContactReport, 0, size)
	p.ContactReports = tSlice
	for i := 0; i < size; i++ {
		_elem641 := &ContactReport{}
		if err := _elem641.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem641, err)
		}
		p.ContactReports = append(p.ContactReports, _elem641)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportContactsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := SyncActionType(v)
		p.ActionType = temp
	}
	return nil
}

func (p *ReportContactsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportContacts_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportContactsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:category: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return fmt.Errorf("%T.category (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:category: %s", p, err)
	}
	return err
}

func (p *ReportContactsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactReports", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:contactReports: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContactReports)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ContactReports {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:contactReports: %s", p, err)
	}
	return err
}

func (p *ReportContactsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actionType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:actionType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ActionType)); err != nil {
		return fmt.Errorf("%T.actionType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:actionType: %s", p, err)
	}
	return err
}

func (p *ReportContactsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportContactsArgs(%+v)", *p)
}

type ReportContactsResult struct {
	Success []*ContactReportResult_ `thrift:"success,0" json:"success"`
	E       *TalkException          `thrift:"e,1" json:"e"`
}

func NewReportContactsResult() *ReportContactsResult {
	return &ReportContactsResult{}
}

var ReportContactsResult_Success_DEFAULT []*ContactReportResult_

func (p *ReportContactsResult) GetSuccess() []*ContactReportResult_ {
	return p.Success
}

var ReportContactsResult_E_DEFAULT *TalkException

func (p *ReportContactsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportContactsResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportContactsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReportContactsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportContactsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportContactsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ContactReportResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem642 := &ContactReportResult_{}
		if err := _elem642.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem642, err)
		}
		p.Success = append(p.Success, _elem642)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportContactsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportContactsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportContacts_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReportContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportContactsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportContactsResult(%+v)", *p)
}

type ReportGroupsArgs struct {
	// unused field # 1
	SyncOpRevision int64    `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Groups         []*Group `thrift:"groups,3" json:"groups"`
}

func NewReportGroupsArgs() *ReportGroupsArgs {
	return &ReportGroupsArgs{}
}

func (p *ReportGroupsArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

func (p *ReportGroupsArgs) GetGroups() []*Group {
	return p.Groups
}
func (p *ReportGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportGroupsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportGroupsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		_elem643 := &Group{}
		if err := _elem643.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem643, err)
		}
		p.Groups = append(p.Groups, _elem643)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportGroups_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportGroupsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:groups: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Groups)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Groups {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:groups: %s", p, err)
	}
	return err
}

func (p *ReportGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportGroupsArgs(%+v)", *p)
}

type ReportGroupsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportGroupsResult() *ReportGroupsResult {
	return &ReportGroupsResult{}
}

var ReportGroupsResult_E_DEFAULT *TalkException

func (p *ReportGroupsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportGroupsResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportGroupsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportGroupsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportGroups_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportGroupsResult(%+v)", *p)
}

type ReportProfileArgs struct {
	// unused field # 1
	SyncOpRevision int64    `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Profile        *Profile `thrift:"profile,3" json:"profile"`
}

func NewReportProfileArgs() *ReportProfileArgs {
	return &ReportProfileArgs{}
}

func (p *ReportProfileArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

var ReportProfileArgs_Profile_DEFAULT *Profile

func (p *ReportProfileArgs) GetProfile() *Profile {
	if !p.IsSetProfile() {
		return ReportProfileArgs_Profile_DEFAULT
	}
	return p.Profile
}
func (p *ReportProfileArgs) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *ReportProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportProfileArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportProfileArgs) ReadField3(iprot thrift.TProtocol) error {
	p.Profile = &Profile{}
	if err := p.Profile.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Profile, err)
	}
	return nil
}

func (p *ReportProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportProfile_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:profile: %s", p, err)
	}
	if err := p.Profile.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Profile, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:profile: %s", p, err)
	}
	return err
}

func (p *ReportProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportProfileArgs(%+v)", *p)
}

type ReportProfileResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportProfileResult() *ReportProfileResult {
	return &ReportProfileResult{}
}

var ReportProfileResult_E_DEFAULT *TalkException

func (p *ReportProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportProfile_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportProfileResult(%+v)", *p)
}

type ReportRoomsArgs struct {
	// unused field # 1
	SyncOpRevision int64   `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Rooms          []*Room `thrift:"rooms,3" json:"rooms"`
}

func NewReportRoomsArgs() *ReportRoomsArgs {
	return &ReportRoomsArgs{}
}

func (p *ReportRoomsArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

func (p *ReportRoomsArgs) GetRooms() []*Room {
	return p.Rooms
}
func (p *ReportRoomsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportRoomsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportRoomsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Room, 0, size)
	p.Rooms = tSlice
	for i := 0; i < size; i++ {
		_elem644 := &Room{}
		if err := _elem644.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem644, err)
		}
		p.Rooms = append(p.Rooms, _elem644)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportRoomsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportRooms_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportRoomsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportRoomsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rooms", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:rooms: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rooms)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Rooms {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:rooms: %s", p, err)
	}
	return err
}

func (p *ReportRoomsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportRoomsArgs(%+v)", *p)
}

type ReportRoomsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportRoomsResult() *ReportRoomsResult {
	return &ReportRoomsResult{}
}

var ReportRoomsResult_E_DEFAULT *TalkException

func (p *ReportRoomsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportRoomsResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportRoomsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportRoomsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportRoomsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportRoomsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportRooms_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportRoomsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportRoomsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportRoomsResult(%+v)", *p)
}

type ReportSettingsArgs struct {
	// unused field # 1
	SyncOpRevision int64     `thrift:"syncOpRevision,2" json:"syncOpRevision"`
	Settings       *Settings `thrift:"settings,3" json:"settings"`
}

func NewReportSettingsArgs() *ReportSettingsArgs {
	return &ReportSettingsArgs{}
}

func (p *ReportSettingsArgs) GetSyncOpRevision() int64 {
	return p.SyncOpRevision
}

var ReportSettingsArgs_Settings_DEFAULT *Settings

func (p *ReportSettingsArgs) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return ReportSettingsArgs_Settings_DEFAULT
	}
	return p.Settings
}
func (p *ReportSettingsArgs) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *ReportSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportSettingsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SyncOpRevision = v
	}
	return nil
}

func (p *ReportSettingsArgs) ReadField3(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Settings, err)
	}
	return nil
}

func (p *ReportSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportSettings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:syncOpRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
		return fmt.Errorf("%T.syncOpRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:syncOpRevision: %s", p, err)
	}
	return err
}

func (p *ReportSettingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:settings: %s", p, err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Settings, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:settings: %s", p, err)
	}
	return err
}

func (p *ReportSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportSettingsArgs(%+v)", *p)
}

type ReportSettingsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportSettingsResult() *ReportSettingsResult {
	return &ReportSettingsResult{}
}

var ReportSettingsResult_E_DEFAULT *TalkException

func (p *ReportSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportSettingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportSettings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportSettingsResult(%+v)", *p)
}

type ReportSpammerArgs struct {
	// unused field # 1
	SpammerMid     string          `thrift:"spammerMid,2" json:"spammerMid"`
	SpammerReasons []SpammerReason `thrift:"spammerReasons,3" json:"spammerReasons"`
	SpamMessageIds []string        `thrift:"spamMessageIds,4" json:"spamMessageIds"`
}

func NewReportSpammerArgs() *ReportSpammerArgs {
	return &ReportSpammerArgs{}
}

func (p *ReportSpammerArgs) GetSpammerMid() string {
	return p.SpammerMid
}

func (p *ReportSpammerArgs) GetSpammerReasons() []SpammerReason {
	return p.SpammerReasons
}

func (p *ReportSpammerArgs) GetSpamMessageIds() []string {
	return p.SpamMessageIds
}
func (p *ReportSpammerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportSpammerArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SpammerMid = v
	}
	return nil
}

func (p *ReportSpammerArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]SpammerReason, 0, size)
	p.SpammerReasons = tSlice
	for i := 0; i < size; i++ {
		var _elem645 SpammerReason
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := SpammerReason(v)
			_elem645 = temp
		}
		p.SpammerReasons = append(p.SpammerReasons, _elem645)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportSpammerArgs) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.SpamMessageIds = tSlice
	for i := 0; i < size; i++ {
		var _elem646 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem646 = v
		}
		p.SpamMessageIds = append(p.SpamMessageIds, _elem646)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ReportSpammerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportSpammer_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportSpammerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spammerMid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:spammerMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SpammerMid)); err != nil {
		return fmt.Errorf("%T.spammerMid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:spammerMid: %s", p, err)
	}
	return err
}

func (p *ReportSpammerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spammerReasons", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:spammerReasons: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.SpammerReasons)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SpammerReasons {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:spammerReasons: %s", p, err)
	}
	return err
}

func (p *ReportSpammerArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spamMessageIds", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:spamMessageIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SpamMessageIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SpamMessageIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:spamMessageIds: %s", p, err)
	}
	return err
}

func (p *ReportSpammerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportSpammerArgs(%+v)", *p)
}

type ReportSpammerResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewReportSpammerResult() *ReportSpammerResult {
	return &ReportSpammerResult{}
}

var ReportSpammerResult_E_DEFAULT *TalkException

func (p *ReportSpammerResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReportSpammerResult_E_DEFAULT
	}
	return p.E
}
func (p *ReportSpammerResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReportSpammerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportSpammerResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReportSpammerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportSpammer_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportSpammerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReportSpammerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportSpammerResult(%+v)", *p)
}

type RequestAccountPasswordResetArgs struct {
	// unused field # 1
	Identifier string `thrift:"identifier,2" json:"identifier"`
	// unused field # 3
	Provider IdentityProvider `thrift:"provider,4" json:"provider"`
	Locale   string           `thrift:"locale,5" json:"locale"`
}

func NewRequestAccountPasswordResetArgs() *RequestAccountPasswordResetArgs {
	return &RequestAccountPasswordResetArgs{}
}

func (p *RequestAccountPasswordResetArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *RequestAccountPasswordResetArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *RequestAccountPasswordResetArgs) GetLocale() string {
	return p.Locale
}
func (p *RequestAccountPasswordResetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestAccountPasswordResetArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *RequestAccountPasswordResetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *RequestAccountPasswordResetArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *RequestAccountPasswordResetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestAccountPasswordReset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestAccountPasswordResetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identifier: %s", p, err)
	}
	return err
}

func (p *RequestAccountPasswordResetArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:provider: %s", p, err)
	}
	return err
}

func (p *RequestAccountPasswordResetArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:locale: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return fmt.Errorf("%T.locale (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:locale: %s", p, err)
	}
	return err
}

func (p *RequestAccountPasswordResetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestAccountPasswordResetArgs(%+v)", *p)
}

type RequestAccountPasswordResetResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRequestAccountPasswordResetResult() *RequestAccountPasswordResetResult {
	return &RequestAccountPasswordResetResult{}
}

var RequestAccountPasswordResetResult_E_DEFAULT *TalkException

func (p *RequestAccountPasswordResetResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RequestAccountPasswordResetResult_E_DEFAULT
	}
	return p.E
}
func (p *RequestAccountPasswordResetResult) IsSetE() bool {
	return p.E != nil
}

func (p *RequestAccountPasswordResetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestAccountPasswordResetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RequestAccountPasswordResetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestAccountPasswordReset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestAccountPasswordResetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RequestAccountPasswordResetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestAccountPasswordResetResult(%+v)", *p)
}

type RequestEmailConfirmationArgs struct {
	// unused field # 1
	EmailConfirmation *EmailConfirmation `thrift:"emailConfirmation,2" json:"emailConfirmation"`
}

func NewRequestEmailConfirmationArgs() *RequestEmailConfirmationArgs {
	return &RequestEmailConfirmationArgs{}
}

var RequestEmailConfirmationArgs_EmailConfirmation_DEFAULT *EmailConfirmation

func (p *RequestEmailConfirmationArgs) GetEmailConfirmation() *EmailConfirmation {
	if !p.IsSetEmailConfirmation() {
		return RequestEmailConfirmationArgs_EmailConfirmation_DEFAULT
	}
	return p.EmailConfirmation
}
func (p *RequestEmailConfirmationArgs) IsSetEmailConfirmation() bool {
	return p.EmailConfirmation != nil
}

func (p *RequestEmailConfirmationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestEmailConfirmationArgs) ReadField2(iprot thrift.TProtocol) error {
	p.EmailConfirmation = &EmailConfirmation{}
	if err := p.EmailConfirmation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.EmailConfirmation, err)
	}
	return nil
}

func (p *RequestEmailConfirmationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestEmailConfirmation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestEmailConfirmationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emailConfirmation", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:emailConfirmation: %s", p, err)
	}
	if err := p.EmailConfirmation.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.EmailConfirmation, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:emailConfirmation: %s", p, err)
	}
	return err
}

func (p *RequestEmailConfirmationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestEmailConfirmationArgs(%+v)", *p)
}

type RequestEmailConfirmationResult struct {
	Success *EmailConfirmationSession `thrift:"success,0" json:"success"`
	E       *TalkException            `thrift:"e,1" json:"e"`
}

func NewRequestEmailConfirmationResult() *RequestEmailConfirmationResult {
	return &RequestEmailConfirmationResult{}
}

var RequestEmailConfirmationResult_Success_DEFAULT *EmailConfirmationSession

func (p *RequestEmailConfirmationResult) GetSuccess() *EmailConfirmationSession {
	if !p.IsSetSuccess() {
		return RequestEmailConfirmationResult_Success_DEFAULT
	}
	return p.Success
}

var RequestEmailConfirmationResult_E_DEFAULT *TalkException

func (p *RequestEmailConfirmationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RequestEmailConfirmationResult_E_DEFAULT
	}
	return p.E
}
func (p *RequestEmailConfirmationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RequestEmailConfirmationResult) IsSetE() bool {
	return p.E != nil
}

func (p *RequestEmailConfirmationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestEmailConfirmationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &EmailConfirmationSession{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RequestEmailConfirmationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RequestEmailConfirmationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestEmailConfirmation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestEmailConfirmationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RequestEmailConfirmationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RequestEmailConfirmationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestEmailConfirmationResult(%+v)", *p)
}

type RequestIdentityUnbindArgs struct {
	// unused field # 1
	Identifier string `thrift:"identifier,2" json:"identifier"`
	// unused field # 3
	Provider IdentityProvider `thrift:"provider,4" json:"provider"`
}

func NewRequestIdentityUnbindArgs() *RequestIdentityUnbindArgs {
	return &RequestIdentityUnbindArgs{}
}

func (p *RequestIdentityUnbindArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *RequestIdentityUnbindArgs) GetIdentifier() string {
	return p.Identifier
}
func (p *RequestIdentityUnbindArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestIdentityUnbindArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *RequestIdentityUnbindArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *RequestIdentityUnbindArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestIdentityUnbind_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestIdentityUnbindArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identifier: %s", p, err)
	}
	return err
}

func (p *RequestIdentityUnbindArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:provider: %s", p, err)
	}
	return err
}

func (p *RequestIdentityUnbindArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestIdentityUnbindArgs(%+v)", *p)
}

type RequestIdentityUnbindResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewRequestIdentityUnbindResult() *RequestIdentityUnbindResult {
	return &RequestIdentityUnbindResult{}
}

var RequestIdentityUnbindResult_E_DEFAULT *TalkException

func (p *RequestIdentityUnbindResult) GetE() *TalkException {
	if !p.IsSetE() {
		return RequestIdentityUnbindResult_E_DEFAULT
	}
	return p.E
}
func (p *RequestIdentityUnbindResult) IsSetE() bool {
	return p.E != nil
}

func (p *RequestIdentityUnbindResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestIdentityUnbindResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RequestIdentityUnbindResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestIdentityUnbind_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestIdentityUnbindResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RequestIdentityUnbindResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestIdentityUnbindResult(%+v)", *p)
}

type ResendEmailConfirmationArgs struct {
	// unused field # 1
	Verifier string `thrift:"verifier,2" json:"verifier"`
}

func NewResendEmailConfirmationArgs() *ResendEmailConfirmationArgs {
	return &ResendEmailConfirmationArgs{}
}

func (p *ResendEmailConfirmationArgs) GetVerifier() string {
	return p.Verifier
}
func (p *ResendEmailConfirmationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendEmailConfirmationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *ResendEmailConfirmationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendEmailConfirmation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendEmailConfirmationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:verifier: %s", p, err)
	}
	return err
}

func (p *ResendEmailConfirmationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendEmailConfirmationArgs(%+v)", *p)
}

type ResendEmailConfirmationResult struct {
	Success *EmailConfirmationSession `thrift:"success,0" json:"success"`
	E       *TalkException            `thrift:"e,1" json:"e"`
}

func NewResendEmailConfirmationResult() *ResendEmailConfirmationResult {
	return &ResendEmailConfirmationResult{}
}

var ResendEmailConfirmationResult_Success_DEFAULT *EmailConfirmationSession

func (p *ResendEmailConfirmationResult) GetSuccess() *EmailConfirmationSession {
	if !p.IsSetSuccess() {
		return ResendEmailConfirmationResult_Success_DEFAULT
	}
	return p.Success
}

var ResendEmailConfirmationResult_E_DEFAULT *TalkException

func (p *ResendEmailConfirmationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ResendEmailConfirmationResult_E_DEFAULT
	}
	return p.E
}
func (p *ResendEmailConfirmationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResendEmailConfirmationResult) IsSetE() bool {
	return p.E != nil
}

func (p *ResendEmailConfirmationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendEmailConfirmationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &EmailConfirmationSession{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ResendEmailConfirmationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ResendEmailConfirmationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendEmailConfirmation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendEmailConfirmationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ResendEmailConfirmationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ResendEmailConfirmationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendEmailConfirmationResult(%+v)", *p)
}

type ResendPinCodeArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewResendPinCodeArgs() *ResendPinCodeArgs {
	return &ResendPinCodeArgs{}
}

func (p *ResendPinCodeArgs) GetSessionId() string {
	return p.SessionId
}
func (p *ResendPinCodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendPinCodeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ResendPinCodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendPinCode_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendPinCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *ResendPinCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendPinCodeArgs(%+v)", *p)
}

type ResendPinCodeResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewResendPinCodeResult() *ResendPinCodeResult {
	return &ResendPinCodeResult{}
}

var ResendPinCodeResult_E_DEFAULT *TalkException

func (p *ResendPinCodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ResendPinCodeResult_E_DEFAULT
	}
	return p.E
}
func (p *ResendPinCodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *ResendPinCodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendPinCodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ResendPinCodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendPinCode_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendPinCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ResendPinCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendPinCodeResult(%+v)", *p)
}

type ResendPinCodeBySMSArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
}

func NewResendPinCodeBySMSArgs() *ResendPinCodeBySMSArgs {
	return &ResendPinCodeBySMSArgs{}
}

func (p *ResendPinCodeBySMSArgs) GetSessionId() string {
	return p.SessionId
}
func (p *ResendPinCodeBySMSArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendPinCodeBySMSArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ResendPinCodeBySMSArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendPinCodeBySMS_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendPinCodeBySMSArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *ResendPinCodeBySMSArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendPinCodeBySMSArgs(%+v)", *p)
}

type ResendPinCodeBySMSResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewResendPinCodeBySMSResult() *ResendPinCodeBySMSResult {
	return &ResendPinCodeBySMSResult{}
}

var ResendPinCodeBySMSResult_E_DEFAULT *TalkException

func (p *ResendPinCodeBySMSResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ResendPinCodeBySMSResult_E_DEFAULT
	}
	return p.E
}
func (p *ResendPinCodeBySMSResult) IsSetE() bool {
	return p.E != nil
}

func (p *ResendPinCodeBySMSResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResendPinCodeBySMSResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ResendPinCodeBySMSResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resendPinCodeBySMS_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResendPinCodeBySMSResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ResendPinCodeBySMSResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResendPinCodeBySMSResult(%+v)", *p)
}

type SendChatCheckedArgs struct {
	Seq           int32  `thrift:"seq,1" json:"seq"`
	Consumer      string `thrift:"consumer,2" json:"consumer"`
	LastMessageId string `thrift:"lastMessageId,3" json:"lastMessageId"`
}

func NewSendChatCheckedArgs() *SendChatCheckedArgs {
	return &SendChatCheckedArgs{}
}

func (p *SendChatCheckedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *SendChatCheckedArgs) GetConsumer() string {
	return p.Consumer
}

func (p *SendChatCheckedArgs) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *SendChatCheckedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendChatCheckedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendChatCheckedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *SendChatCheckedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *SendChatCheckedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendChatCheckedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendChatCheckedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return fmt.Errorf("%T.consumer (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumer: %s", p, err)
	}
	return err
}

func (p *SendChatCheckedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastMessageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return fmt.Errorf("%T.lastMessageId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastMessageId: %s", p, err)
	}
	return err
}

func (p *SendChatCheckedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatCheckedArgs(%+v)", *p)
}

type SendChatCheckedResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendChatCheckedResult() *SendChatCheckedResult {
	return &SendChatCheckedResult{}
}

var SendChatCheckedResult_E_DEFAULT *TalkException

func (p *SendChatCheckedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendChatCheckedResult_E_DEFAULT
	}
	return p.E
}
func (p *SendChatCheckedResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendChatCheckedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendChatCheckedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendChatCheckedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatChecked_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendChatCheckedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendChatCheckedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatCheckedResult(%+v)", *p)
}

type SendChatRemovedArgs struct {
	Seq           int32  `thrift:"seq,1" json:"seq"`
	Consumer      string `thrift:"consumer,2" json:"consumer"`
	LastMessageId string `thrift:"lastMessageId,3" json:"lastMessageId"`
}

func NewSendChatRemovedArgs() *SendChatRemovedArgs {
	return &SendChatRemovedArgs{}
}

func (p *SendChatRemovedArgs) GetSeq() int32 {
	return p.Seq
}

func (p *SendChatRemovedArgs) GetConsumer() string {
	return p.Consumer
}

func (p *SendChatRemovedArgs) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *SendChatRemovedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendChatRemovedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendChatRemovedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *SendChatRemovedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *SendChatRemovedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendChatRemovedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendChatRemovedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return fmt.Errorf("%T.consumer (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumer: %s", p, err)
	}
	return err
}

func (p *SendChatRemovedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastMessageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
		return fmt.Errorf("%T.lastMessageId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastMessageId: %s", p, err)
	}
	return err
}

func (p *SendChatRemovedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatRemovedArgs(%+v)", *p)
}

type SendChatRemovedResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendChatRemovedResult() *SendChatRemovedResult {
	return &SendChatRemovedResult{}
}

var SendChatRemovedResult_E_DEFAULT *TalkException

func (p *SendChatRemovedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendChatRemovedResult_E_DEFAULT
	}
	return p.E
}
func (p *SendChatRemovedResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendChatRemovedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendChatRemovedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendChatRemovedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendChatRemoved_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendChatRemovedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendChatRemovedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendChatRemovedResult(%+v)", *p)
}

type SendContentPreviewUpdatedArgs struct {
	Esq          int32    `thrift:"esq,1" json:"esq"`
	MessageId    string   `thrift:"messageId,2" json:"messageId"`
	ReceiverMids []string `thrift:"receiverMids,3" json:"receiverMids"`
}

func NewSendContentPreviewUpdatedArgs() *SendContentPreviewUpdatedArgs {
	return &SendContentPreviewUpdatedArgs{}
}

func (p *SendContentPreviewUpdatedArgs) GetEsq() int32 {
	return p.Esq
}

func (p *SendContentPreviewUpdatedArgs) GetMessageId() string {
	return p.MessageId
}

func (p *SendContentPreviewUpdatedArgs) GetReceiverMids() []string {
	return p.ReceiverMids
}
func (p *SendContentPreviewUpdatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Esq = v
	}
	return nil
}

func (p *SendContentPreviewUpdatedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *SendContentPreviewUpdatedArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ReceiverMids = tSlice
	for i := 0; i < size; i++ {
		var _elem647 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem647 = v
		}
		p.ReceiverMids = append(p.ReceiverMids, _elem647)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentPreviewUpdated_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("esq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:esq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Esq)); err != nil {
		return fmt.Errorf("%T.esq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:esq: %s", p, err)
	}
	return err
}

func (p *SendContentPreviewUpdatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return fmt.Errorf("%T.messageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageId: %s", p, err)
	}
	return err
}

func (p *SendContentPreviewUpdatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMids", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:receiverMids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ReceiverMids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ReceiverMids {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:receiverMids: %s", p, err)
	}
	return err
}

func (p *SendContentPreviewUpdatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendContentPreviewUpdatedArgs(%+v)", *p)
}

type SendContentPreviewUpdatedResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	E       *TalkException    `thrift:"e,1" json:"e"`
}

func NewSendContentPreviewUpdatedResult() *SendContentPreviewUpdatedResult {
	return &SendContentPreviewUpdatedResult{}
}

var SendContentPreviewUpdatedResult_Success_DEFAULT map[string]string

func (p *SendContentPreviewUpdatedResult) GetSuccess() map[string]string {
	return p.Success
}

var SendContentPreviewUpdatedResult_E_DEFAULT *TalkException

func (p *SendContentPreviewUpdatedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendContentPreviewUpdatedResult_E_DEFAULT
	}
	return p.E
}
func (p *SendContentPreviewUpdatedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendContentPreviewUpdatedResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendContentPreviewUpdatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key648 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key648 = v
		}
		var _val649 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val649 = v
		}
		p.Success[_key648] = _val649
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentPreviewUpdated_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendContentPreviewUpdatedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendContentPreviewUpdatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendContentPreviewUpdatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendContentPreviewUpdatedResult(%+v)", *p)
}

type SendContentReceiptArgs struct {
	Seq       int32  `thrift:"seq,1" json:"seq"`
	Consumer  string `thrift:"consumer,2" json:"consumer"`
	MessageId string `thrift:"messageId,3" json:"messageId"`
}

func NewSendContentReceiptArgs() *SendContentReceiptArgs {
	return &SendContentReceiptArgs{}
}

func (p *SendContentReceiptArgs) GetSeq() int32 {
	return p.Seq
}

func (p *SendContentReceiptArgs) GetConsumer() string {
	return p.Consumer
}

func (p *SendContentReceiptArgs) GetMessageId() string {
	return p.MessageId
}
func (p *SendContentReceiptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendContentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendContentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *SendContentReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageId = v
	}
	return nil
}

func (p *SendContentReceiptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentReceipt_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendContentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendContentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return fmt.Errorf("%T.consumer (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumer: %s", p, err)
	}
	return err
}

func (p *SendContentReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageId)); err != nil {
		return fmt.Errorf("%T.messageId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageId: %s", p, err)
	}
	return err
}

func (p *SendContentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendContentReceiptArgs(%+v)", *p)
}

type SendContentReceiptResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendContentReceiptResult() *SendContentReceiptResult {
	return &SendContentReceiptResult{}
}

var SendContentReceiptResult_E_DEFAULT *TalkException

func (p *SendContentReceiptResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendContentReceiptResult_E_DEFAULT
	}
	return p.E
}
func (p *SendContentReceiptResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendContentReceiptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendContentReceiptResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendContentReceiptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendContentReceipt_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendContentReceiptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendContentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendContentReceiptResult(%+v)", *p)
}

type SendDummyPushArgs struct {
}

func NewSendDummyPushArgs() *SendDummyPushArgs {
	return &SendDummyPushArgs{}
}

func (p *SendDummyPushArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendDummyPushArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendDummyPush_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendDummyPushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendDummyPushArgs(%+v)", *p)
}

type SendDummyPushResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendDummyPushResult() *SendDummyPushResult {
	return &SendDummyPushResult{}
}

var SendDummyPushResult_E_DEFAULT *TalkException

func (p *SendDummyPushResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendDummyPushResult_E_DEFAULT
	}
	return p.E
}
func (p *SendDummyPushResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendDummyPushResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendDummyPushResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendDummyPushResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendDummyPush_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendDummyPushResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendDummyPushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendDummyPushResult(%+v)", *p)
}

type SendEventArgs struct {
	Seq     int32    `thrift:"seq,1" json:"seq"`
	Message *Message `thrift:"message,2" json:"message"`
}

func NewSendEventArgs() *SendEventArgs {
	return &SendEventArgs{}
}

func (p *SendEventArgs) GetSeq() int32 {
	return p.Seq
}

var SendEventArgs_Message_DEFAULT *Message

func (p *SendEventArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return SendEventArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *SendEventArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendEventArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendEventArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendEventArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *SendEventArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEvent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *SendEventArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendEventArgs(%+v)", *p)
}

type SendEventResult struct {
	Success *Message       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewSendEventResult() *SendEventResult {
	return &SendEventResult{}
}

var SendEventResult_Success_DEFAULT *Message

func (p *SendEventResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return SendEventResult_Success_DEFAULT
	}
	return p.Success
}

var SendEventResult_E_DEFAULT *TalkException

func (p *SendEventResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendEventResult_E_DEFAULT
	}
	return p.E
}
func (p *SendEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEventResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendEventResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendEventResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendEventResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendEventResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEvent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendEventResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendEventResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendEventResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendEventResult(%+v)", *p)
}

type SendMessageArgs struct {
	Seq     int32    `thrift:"seq,1" json:"seq"`
	Message *Message `thrift:"message,2" json:"message"`
}

func NewSendMessageArgs() *SendMessageArgs {
	return &SendMessageArgs{}
}

func (p *SendMessageArgs) GetSeq() int32 {
	return p.Seq
}

var SendMessageArgs_Message_DEFAULT *Message

func (p *SendMessageArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return SendMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *SendMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *SendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *SendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageArgs(%+v)", *p)
}

type SendMessageResult struct {
	Success *Message       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewSendMessageResult() *SendMessageResult {
	return &SendMessageResult{}
}

var SendMessageResult_Success_DEFAULT *Message

func (p *SendMessageResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

var SendMessageResult_E_DEFAULT *TalkException

func (p *SendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageResult(%+v)", *p)
}

type SendMessageIgnoredArgs struct {
	Seq        int32    `thrift:"seq,1" json:"seq"`
	Consumer   string   `thrift:"consumer,2" json:"consumer"`
	MessageIds []string `thrift:"messageIds,3" json:"messageIds"`
}

func NewSendMessageIgnoredArgs() *SendMessageIgnoredArgs {
	return &SendMessageIgnoredArgs{}
}

func (p *SendMessageIgnoredArgs) GetSeq() int32 {
	return p.Seq
}

func (p *SendMessageIgnoredArgs) GetConsumer() string {
	return p.Consumer
}

func (p *SendMessageIgnoredArgs) GetMessageIds() []string {
	return p.MessageIds
}
func (p *SendMessageIgnoredArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageIgnoredArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendMessageIgnoredArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *SendMessageIgnoredArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.MessageIds = tSlice
	for i := 0; i < size; i++ {
		var _elem650 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem650 = v
		}
		p.MessageIds = append(p.MessageIds, _elem650)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMessageIgnoredArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageIgnored_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageIgnoredArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendMessageIgnoredArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return fmt.Errorf("%T.consumer (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumer: %s", p, err)
	}
	return err
}

func (p *SendMessageIgnoredArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MessageIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageIds: %s", p, err)
	}
	return err
}

func (p *SendMessageIgnoredArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageIgnoredArgs(%+v)", *p)
}

type SendMessageIgnoredResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendMessageIgnoredResult() *SendMessageIgnoredResult {
	return &SendMessageIgnoredResult{}
}

var SendMessageIgnoredResult_E_DEFAULT *TalkException

func (p *SendMessageIgnoredResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendMessageIgnoredResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageIgnoredResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageIgnoredResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageIgnoredResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageIgnoredResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageIgnored_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageIgnoredResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageIgnoredResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageIgnoredResult(%+v)", *p)
}

type SendMessageReceiptArgs struct {
	Seq        int32    `thrift:"seq,1" json:"seq"`
	Consumer   string   `thrift:"consumer,2" json:"consumer"`
	MessageIds []string `thrift:"messageIds,3" json:"messageIds"`
}

func NewSendMessageReceiptArgs() *SendMessageReceiptArgs {
	return &SendMessageReceiptArgs{}
}

func (p *SendMessageReceiptArgs) GetSeq() int32 {
	return p.Seq
}

func (p *SendMessageReceiptArgs) GetConsumer() string {
	return p.Consumer
}

func (p *SendMessageReceiptArgs) GetMessageIds() []string {
	return p.MessageIds
}
func (p *SendMessageReceiptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendMessageReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Consumer = v
	}
	return nil
}

func (p *SendMessageReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.MessageIds = tSlice
	for i := 0; i < size; i++ {
		var _elem651 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem651 = v
		}
		p.MessageIds = append(p.MessageIds, _elem651)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMessageReceiptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageReceipt_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendMessageReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumer", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Consumer)); err != nil {
		return fmt.Errorf("%T.consumer (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumer: %s", p, err)
	}
	return err
}

func (p *SendMessageReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageIds", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MessageIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageIds: %s", p, err)
	}
	return err
}

func (p *SendMessageReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageReceiptArgs(%+v)", *p)
}

type SendMessageReceiptResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSendMessageReceiptResult() *SendMessageReceiptResult {
	return &SendMessageReceiptResult{}
}

var SendMessageReceiptResult_E_DEFAULT *TalkException

func (p *SendMessageReceiptResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendMessageReceiptResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageReceiptResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageReceiptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageReceiptResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageReceiptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageReceipt_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageReceiptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageReceiptResult(%+v)", *p)
}

type SendMessageToMyHomeArgs struct {
	Seq     int32    `thrift:"seq,1" json:"seq"`
	Message *Message `thrift:"message,2" json:"message"`
}

func NewSendMessageToMyHomeArgs() *SendMessageToMyHomeArgs {
	return &SendMessageToMyHomeArgs{}
}

func (p *SendMessageToMyHomeArgs) GetSeq() int32 {
	return p.Seq
}

var SendMessageToMyHomeArgs_Message_DEFAULT *Message

func (p *SendMessageToMyHomeArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return SendMessageToMyHomeArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *SendMessageToMyHomeArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SendMessageToMyHomeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageToMyHomeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *SendMessageToMyHomeArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *SendMessageToMyHomeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToMyHome_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageToMyHomeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *SendMessageToMyHomeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *SendMessageToMyHomeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageToMyHomeArgs(%+v)", *p)
}

type SendMessageToMyHomeResult struct {
	Success *Message       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewSendMessageToMyHomeResult() *SendMessageToMyHomeResult {
	return &SendMessageToMyHomeResult{}
}

var SendMessageToMyHomeResult_Success_DEFAULT *Message

func (p *SendMessageToMyHomeResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return SendMessageToMyHomeResult_Success_DEFAULT
	}
	return p.Success
}

var SendMessageToMyHomeResult_E_DEFAULT *TalkException

func (p *SendMessageToMyHomeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SendMessageToMyHomeResult_E_DEFAULT
	}
	return p.E
}
func (p *SendMessageToMyHomeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageToMyHomeResult) IsSetE() bool {
	return p.E != nil
}

func (p *SendMessageToMyHomeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageToMyHomeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *SendMessageToMyHomeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SendMessageToMyHomeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToMyHome_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageToMyHomeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToMyHomeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToMyHomeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageToMyHomeResult(%+v)", *p)
}

type SetBuddyLocationArgs struct {
	// unused field # 1
	Mid      string       `thrift:"mid,2" json:"mid"`
	Index    int32        `thrift:"index,3" json:"index"`
	Location *Geolocation `thrift:"location,4" json:"location"`
}

func NewSetBuddyLocationArgs() *SetBuddyLocationArgs {
	return &SetBuddyLocationArgs{}
}

func (p *SetBuddyLocationArgs) GetMid() string {
	return p.Mid
}

func (p *SetBuddyLocationArgs) GetIndex() int32 {
	return p.Index
}

var SetBuddyLocationArgs_Location_DEFAULT *Geolocation

func (p *SetBuddyLocationArgs) GetLocation() *Geolocation {
	if !p.IsSetLocation() {
		return SetBuddyLocationArgs_Location_DEFAULT
	}
	return p.Location
}
func (p *SetBuddyLocationArgs) IsSetLocation() bool {
	return p.Location != nil
}

func (p *SetBuddyLocationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetBuddyLocationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *SetBuddyLocationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *SetBuddyLocationArgs) ReadField4(iprot thrift.TProtocol) error {
	p.Location = &Geolocation{}
	if err := p.Location.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Location, err)
	}
	return nil
}

func (p *SetBuddyLocationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setBuddyLocation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetBuddyLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *SetBuddyLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return fmt.Errorf("%T.index (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index: %s", p, err)
	}
	return err
}

func (p *SetBuddyLocationArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:location: %s", p, err)
	}
	if err := p.Location.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Location, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:location: %s", p, err)
	}
	return err
}

func (p *SetBuddyLocationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetBuddyLocationArgs(%+v)", *p)
}

type SetBuddyLocationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSetBuddyLocationResult() *SetBuddyLocationResult {
	return &SetBuddyLocationResult{}
}

var SetBuddyLocationResult_E_DEFAULT *TalkException

func (p *SetBuddyLocationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SetBuddyLocationResult_E_DEFAULT
	}
	return p.E
}
func (p *SetBuddyLocationResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetBuddyLocationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetBuddyLocationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetBuddyLocationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setBuddyLocation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetBuddyLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetBuddyLocationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetBuddyLocationResult(%+v)", *p)
}

type SetIdentityCredentialArgs struct {
	// unused field # 1
	Identifier string           `thrift:"identifier,2" json:"identifier"`
	Verifier   string           `thrift:"verifier,3" json:"verifier"`
	Provider   IdentityProvider `thrift:"provider,4" json:"provider"`
}

func NewSetIdentityCredentialArgs() *SetIdentityCredentialArgs {
	return &SetIdentityCredentialArgs{}
}

func (p *SetIdentityCredentialArgs) GetProvider() IdentityProvider {
	return p.Provider
}

func (p *SetIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *SetIdentityCredentialArgs) GetVerifier() string {
	return p.Verifier
}
func (p *SetIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.Provider = temp
	}
	return nil
}

func (p *SetIdentityCredentialArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *SetIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *SetIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identifier: %s", p, err)
	}
	return err
}

func (p *SetIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:verifier: %s", p, err)
	}
	return err
}

func (p *SetIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("provider", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:provider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return fmt.Errorf("%T.provider (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:provider: %s", p, err)
	}
	return err
}

func (p *SetIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetIdentityCredentialArgs(%+v)", *p)
}

type SetIdentityCredentialResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSetIdentityCredentialResult() *SetIdentityCredentialResult {
	return &SetIdentityCredentialResult{}
}

var SetIdentityCredentialResult_E_DEFAULT *TalkException

func (p *SetIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SetIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *SetIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetIdentityCredentialResult(%+v)", *p)
}

type SetNotificationsEnabledArgs struct {
	ReqSeq     int32   `thrift:"reqSeq,1" json:"reqSeq"`
	TypeA1     MIDType `thrift:"type,2" json:"type"`
	Target     string  `thrift:"target,3" json:"target"`
	Enablement bool    `thrift:"enablement,4" json:"enablement"`
}

func NewSetNotificationsEnabledArgs() *SetNotificationsEnabledArgs {
	return &SetNotificationsEnabledArgs{}
}

func (p *SetNotificationsEnabledArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *SetNotificationsEnabledArgs) GetTypeA1() MIDType {
	return p.TypeA1
}

func (p *SetNotificationsEnabledArgs) GetTarget() string {
	return p.Target
}

func (p *SetNotificationsEnabledArgs) GetEnablement() bool {
	return p.Enablement
}
func (p *SetNotificationsEnabledArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := MIDType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Target = v
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Enablement = v
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNotificationsEnabled_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetNotificationsEnabledArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *SetNotificationsEnabledArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *SetNotificationsEnabledArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:target: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Target)); err != nil {
		return fmt.Errorf("%T.target (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:target: %s", p, err)
	}
	return err
}

func (p *SetNotificationsEnabledArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enablement", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:enablement: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enablement)); err != nil {
		return fmt.Errorf("%T.enablement (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:enablement: %s", p, err)
	}
	return err
}

func (p *SetNotificationsEnabledArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetNotificationsEnabledArgs(%+v)", *p)
}

type SetNotificationsEnabledResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewSetNotificationsEnabledResult() *SetNotificationsEnabledResult {
	return &SetNotificationsEnabledResult{}
}

var SetNotificationsEnabledResult_E_DEFAULT *TalkException

func (p *SetNotificationsEnabledResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SetNotificationsEnabledResult_E_DEFAULT
	}
	return p.E
}
func (p *SetNotificationsEnabledResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetNotificationsEnabledResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetNotificationsEnabledResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetNotificationsEnabledResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNotificationsEnabled_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetNotificationsEnabledResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetNotificationsEnabledResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetNotificationsEnabledResult(%+v)", *p)
}

type StartUpdateVerificationArgs struct {
	// unused field # 1
	Region      string      `thrift:"region,2" json:"region"`
	Carrier     CarrierCode `thrift:"carrier,3" json:"carrier"`
	Phone       string      `thrift:"phone,4" json:"phone"`
	UdidHash    string      `thrift:"udidHash,5" json:"udidHash"`
	DeviceInfo  *DeviceInfo `thrift:"deviceInfo,6" json:"deviceInfo"`
	NetworkCode string      `thrift:"networkCode,7" json:"networkCode"`
	Locale      string      `thrift:"locale,8" json:"locale"`
}

func NewStartUpdateVerificationArgs() *StartUpdateVerificationArgs {
	return &StartUpdateVerificationArgs{}
}

func (p *StartUpdateVerificationArgs) GetRegion() string {
	return p.Region
}

func (p *StartUpdateVerificationArgs) GetCarrier() CarrierCode {
	return p.Carrier
}

func (p *StartUpdateVerificationArgs) GetPhone() string {
	return p.Phone
}

func (p *StartUpdateVerificationArgs) GetUdidHash() string {
	return p.UdidHash
}

var StartUpdateVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *StartUpdateVerificationArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return StartUpdateVerificationArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *StartUpdateVerificationArgs) GetNetworkCode() string {
	return p.NetworkCode
}

func (p *StartUpdateVerificationArgs) GetLocale() string {
	return p.Locale
}
func (p *StartUpdateVerificationArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *StartUpdateVerificationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := CarrierCode(v)
		p.Carrier = temp
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField6(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.NetworkCode = v
	}
	return nil
}

func (p *StartUpdateVerificationArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *StartUpdateVerificationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startUpdateVerification_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartUpdateVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:region: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrier", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:carrier: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Carrier)); err != nil {
		return fmt.Errorf("%T.carrier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:carrier: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:phone: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:udidHash: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:deviceInfo: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("networkCode", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:networkCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NetworkCode)); err != nil {
		return fmt.Errorf("%T.networkCode (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:networkCode: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:locale: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return fmt.Errorf("%T.locale (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:locale: %s", p, err)
	}
	return err
}

func (p *StartUpdateVerificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartUpdateVerificationArgs(%+v)", *p)
}

type StartUpdateVerificationResult struct {
	Success *VerificationSessionData `thrift:"success,0" json:"success"`
	E       *TalkException           `thrift:"e,1" json:"e"`
}

func NewStartUpdateVerificationResult() *StartUpdateVerificationResult {
	return &StartUpdateVerificationResult{}
}

var StartUpdateVerificationResult_Success_DEFAULT *VerificationSessionData

func (p *StartUpdateVerificationResult) GetSuccess() *VerificationSessionData {
	if !p.IsSetSuccess() {
		return StartUpdateVerificationResult_Success_DEFAULT
	}
	return p.Success
}

var StartUpdateVerificationResult_E_DEFAULT *TalkException

func (p *StartUpdateVerificationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return StartUpdateVerificationResult_E_DEFAULT
	}
	return p.E
}
func (p *StartUpdateVerificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StartUpdateVerificationResult) IsSetE() bool {
	return p.E != nil
}

func (p *StartUpdateVerificationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartUpdateVerificationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VerificationSessionData{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *StartUpdateVerificationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StartUpdateVerificationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startUpdateVerification_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartUpdateVerificationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *StartUpdateVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StartUpdateVerificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartUpdateVerificationResult(%+v)", *p)
}

type StartVerificationArgs struct {
	// unused field # 1
	Region      string      `thrift:"region,2" json:"region"`
	Carrier     CarrierCode `thrift:"carrier,3" json:"carrier"`
	Phone       string      `thrift:"phone,4" json:"phone"`
	UdidHash    string      `thrift:"udidHash,5" json:"udidHash"`
	DeviceInfo  *DeviceInfo `thrift:"deviceInfo,6" json:"deviceInfo"`
	NetworkCode string      `thrift:"networkCode,7" json:"networkCode"`
	Mid         string      `thrift:"mid,8" json:"mid"`
	Locale      string      `thrift:"locale,9" json:"locale"`
}

func NewStartVerificationArgs() *StartVerificationArgs {
	return &StartVerificationArgs{}
}

func (p *StartVerificationArgs) GetRegion() string {
	return p.Region
}

func (p *StartVerificationArgs) GetCarrier() CarrierCode {
	return p.Carrier
}

func (p *StartVerificationArgs) GetPhone() string {
	return p.Phone
}

func (p *StartVerificationArgs) GetUdidHash() string {
	return p.UdidHash
}

var StartVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *StartVerificationArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return StartVerificationArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}

func (p *StartVerificationArgs) GetNetworkCode() string {
	return p.NetworkCode
}

func (p *StartVerificationArgs) GetMid() string {
	return p.Mid
}

func (p *StartVerificationArgs) GetLocale() string {
	return p.Locale
}
func (p *StartVerificationArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *StartVerificationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartVerificationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *StartVerificationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := CarrierCode(v)
		p.Carrier = temp
	}
	return nil
}

func (p *StartVerificationArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *StartVerificationArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *StartVerificationArgs) ReadField6(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *StartVerificationArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.NetworkCode = v
	}
	return nil
}

func (p *StartVerificationArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *StartVerificationArgs) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Locale = v
	}
	return nil
}

func (p *StartVerificationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startVerification_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:region: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrier", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:carrier: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Carrier)); err != nil {
		return fmt.Errorf("%T.carrier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:carrier: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:phone: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:udidHash: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:deviceInfo: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("networkCode", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:networkCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NetworkCode)); err != nil {
		return fmt.Errorf("%T.networkCode (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:networkCode: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:mid: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locale", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:locale: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Locale)); err != nil {
		return fmt.Errorf("%T.locale (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:locale: %s", p, err)
	}
	return err
}

func (p *StartVerificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartVerificationArgs(%+v)", *p)
}

type StartVerificationResult struct {
	Success *VerificationSessionData `thrift:"success,0" json:"success"`
	E       *TalkException           `thrift:"e,1" json:"e"`
}

func NewStartVerificationResult() *StartVerificationResult {
	return &StartVerificationResult{}
}

var StartVerificationResult_Success_DEFAULT *VerificationSessionData

func (p *StartVerificationResult) GetSuccess() *VerificationSessionData {
	if !p.IsSetSuccess() {
		return StartVerificationResult_Success_DEFAULT
	}
	return p.Success
}

var StartVerificationResult_E_DEFAULT *TalkException

func (p *StartVerificationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return StartVerificationResult_E_DEFAULT
	}
	return p.E
}
func (p *StartVerificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StartVerificationResult) IsSetE() bool {
	return p.E != nil
}

func (p *StartVerificationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StartVerificationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VerificationSessionData{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *StartVerificationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StartVerificationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("startVerification_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StartVerificationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *StartVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StartVerificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartVerificationResult(%+v)", *p)
}

type StoreUpdateProfileAttributeArgs struct {
	Seq              int32            `thrift:"seq,1" json:"seq"`
	ProfileAttribute ProfileAttribute `thrift:"profileAttribute,2" json:"profileAttribute"`
	Value            string           `thrift:"value,3" json:"value"`
}

func NewStoreUpdateProfileAttributeArgs() *StoreUpdateProfileAttributeArgs {
	return &StoreUpdateProfileAttributeArgs{}
}

func (p *StoreUpdateProfileAttributeArgs) GetSeq() int32 {
	return p.Seq
}

func (p *StoreUpdateProfileAttributeArgs) GetProfileAttribute() ProfileAttribute {
	return p.ProfileAttribute
}

func (p *StoreUpdateProfileAttributeArgs) GetValue() string {
	return p.Value
}
func (p *StoreUpdateProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreUpdateProfileAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *StoreUpdateProfileAttributeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := ProfileAttribute(v)
		p.ProfileAttribute = temp
	}
	return nil
}

func (p *StoreUpdateProfileAttributeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *StoreUpdateProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeUpdateProfileAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreUpdateProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *StoreUpdateProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profileAttribute", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:profileAttribute: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProfileAttribute)); err != nil {
		return fmt.Errorf("%T.profileAttribute (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:profileAttribute: %s", p, err)
	}
	return err
}

func (p *StoreUpdateProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *StoreUpdateProfileAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreUpdateProfileAttributeArgs(%+v)", *p)
}

type StoreUpdateProfileAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewStoreUpdateProfileAttributeResult() *StoreUpdateProfileAttributeResult {
	return &StoreUpdateProfileAttributeResult{}
}

var StoreUpdateProfileAttributeResult_E_DEFAULT *TalkException

func (p *StoreUpdateProfileAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return StoreUpdateProfileAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *StoreUpdateProfileAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *StoreUpdateProfileAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StoreUpdateProfileAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *StoreUpdateProfileAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("storeUpdateProfileAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StoreUpdateProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *StoreUpdateProfileAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StoreUpdateProfileAttributeResult(%+v)", *p)
}

type SyncContactBySnsIdsArgs struct {
	ReqSeq        int32                    `thrift:"reqSeq,1" json:"reqSeq"`
	Modifications []*SnsFriendModification `thrift:"modifications,2" json:"modifications"`
}

func NewSyncContactBySnsIdsArgs() *SyncContactBySnsIdsArgs {
	return &SyncContactBySnsIdsArgs{}
}

func (p *SyncContactBySnsIdsArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *SyncContactBySnsIdsArgs) GetModifications() []*SnsFriendModification {
	return p.Modifications
}
func (p *SyncContactBySnsIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncContactBySnsIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *SyncContactBySnsIdsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SnsFriendModification, 0, size)
	p.Modifications = tSlice
	for i := 0; i < size; i++ {
		_elem652 := &SnsFriendModification{}
		if err := _elem652.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem652, err)
		}
		p.Modifications = append(p.Modifications, _elem652)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SyncContactBySnsIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("syncContactBySnsIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncContactBySnsIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *SyncContactBySnsIdsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("modifications", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:modifications: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Modifications)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Modifications {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:modifications: %s", p, err)
	}
	return err
}

func (p *SyncContactBySnsIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncContactBySnsIdsArgs(%+v)", *p)
}

type SyncContactBySnsIdsResult struct {
	Success []*SnsFriendContactRegistration `thrift:"success,0" json:"success"`
	E       *TalkException                  `thrift:"e,1" json:"e"`
}

func NewSyncContactBySnsIdsResult() *SyncContactBySnsIdsResult {
	return &SyncContactBySnsIdsResult{}
}

var SyncContactBySnsIdsResult_Success_DEFAULT []*SnsFriendContactRegistration

func (p *SyncContactBySnsIdsResult) GetSuccess() []*SnsFriendContactRegistration {
	return p.Success
}

var SyncContactBySnsIdsResult_E_DEFAULT *TalkException

func (p *SyncContactBySnsIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SyncContactBySnsIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *SyncContactBySnsIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncContactBySnsIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *SyncContactBySnsIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncContactBySnsIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SnsFriendContactRegistration, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem653 := &SnsFriendContactRegistration{}
		if err := _elem653.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem653, err)
		}
		p.Success = append(p.Success, _elem653)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SyncContactBySnsIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SyncContactBySnsIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("syncContactBySnsIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncContactBySnsIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SyncContactBySnsIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SyncContactBySnsIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncContactBySnsIdsResult(%+v)", *p)
}

type SyncContactsArgs struct {
	ReqSeq        int32                  `thrift:"reqSeq,1" json:"reqSeq"`
	LocalContacts []*ContactModification `thrift:"localContacts,2" json:"localContacts"`
}

func NewSyncContactsArgs() *SyncContactsArgs {
	return &SyncContactsArgs{}
}

func (p *SyncContactsArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *SyncContactsArgs) GetLocalContacts() []*ContactModification {
	return p.LocalContacts
}
func (p *SyncContactsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncContactsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *SyncContactsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ContactModification, 0, size)
	p.LocalContacts = tSlice
	for i := 0; i < size; i++ {
		_elem654 := &ContactModification{}
		if err := _elem654.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem654, err)
		}
		p.LocalContacts = append(p.LocalContacts, _elem654)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SyncContactsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("syncContacts_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncContactsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *SyncContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localContacts", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:localContacts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LocalContacts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.LocalContacts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:localContacts: %s", p, err)
	}
	return err
}

func (p *SyncContactsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncContactsArgs(%+v)", *p)
}

type SyncContactsResult struct {
	Success map[string]*ContactRegistration `thrift:"success,0" json:"success"`
	E       *TalkException                  `thrift:"e,1" json:"e"`
}

func NewSyncContactsResult() *SyncContactsResult {
	return &SyncContactsResult{}
}

var SyncContactsResult_Success_DEFAULT map[string]*ContactRegistration

func (p *SyncContactsResult) GetSuccess() map[string]*ContactRegistration {
	return p.Success
}

var SyncContactsResult_E_DEFAULT *TalkException

func (p *SyncContactsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return SyncContactsResult_E_DEFAULT
	}
	return p.E
}
func (p *SyncContactsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncContactsResult) IsSetE() bool {
	return p.E != nil
}

func (p *SyncContactsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncContactsResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*ContactRegistration, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key655 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key655 = v
		}
		_val656 := &ContactRegistration{}
		if err := _val656.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val656, err)
		}
		p.Success[_key655] = _val656
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SyncContactsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SyncContactsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("syncContacts_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SyncContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SyncContactsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncContactsResult(%+v)", *p)
}

type TrySendMessageArgs struct {
	Seq     int32    `thrift:"seq,1" json:"seq"`
	Message *Message `thrift:"message,2" json:"message"`
}

func NewTrySendMessageArgs() *TrySendMessageArgs {
	return &TrySendMessageArgs{}
}

func (p *TrySendMessageArgs) GetSeq() int32 {
	return p.Seq
}

var TrySendMessageArgs_Message_DEFAULT *Message

func (p *TrySendMessageArgs) GetMessage() *Message {
	if !p.IsSetMessage() {
		return TrySendMessageArgs_Message_DEFAULT
	}
	return p.Message
}
func (p *TrySendMessageArgs) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TrySendMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TrySendMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *TrySendMessageArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *TrySendMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("trySendMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TrySendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:seq: %s", p, err)
	}
	return err
}

func (p *TrySendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *TrySendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrySendMessageArgs(%+v)", *p)
}

type TrySendMessageResult struct {
	Success *Message       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewTrySendMessageResult() *TrySendMessageResult {
	return &TrySendMessageResult{}
}

var TrySendMessageResult_Success_DEFAULT *Message

func (p *TrySendMessageResult) GetSuccess() *Message {
	if !p.IsSetSuccess() {
		return TrySendMessageResult_Success_DEFAULT
	}
	return p.Success
}

var TrySendMessageResult_E_DEFAULT *TalkException

func (p *TrySendMessageResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TrySendMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *TrySendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TrySendMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *TrySendMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TrySendMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Message{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *TrySendMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *TrySendMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("trySendMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TrySendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *TrySendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *TrySendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrySendMessageResult(%+v)", *p)
}

type UnblockContactArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Id     string `thrift:"id,2" json:"id"`
}

func NewUnblockContactArgs() *UnblockContactArgs {
	return &UnblockContactArgs{}
}

func (p *UnblockContactArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UnblockContactArgs) GetId() string {
	return p.Id
}
func (p *UnblockContactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnblockContactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UnblockContactArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *UnblockContactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnblockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UnblockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *UnblockContactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockContactArgs(%+v)", *p)
}

type UnblockContactResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUnblockContactResult() *UnblockContactResult {
	return &UnblockContactResult{}
}

var UnblockContactResult_E_DEFAULT *TalkException

func (p *UnblockContactResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UnblockContactResult_E_DEFAULT
	}
	return p.E
}
func (p *UnblockContactResult) IsSetE() bool {
	return p.E != nil
}

func (p *UnblockContactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnblockContactResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UnblockContactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockContact_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnblockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UnblockContactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockContactResult(%+v)", *p)
}

type UnblockRecommendationArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Id     string `thrift:"id,2" json:"id"`
}

func NewUnblockRecommendationArgs() *UnblockRecommendationArgs {
	return &UnblockRecommendationArgs{}
}

func (p *UnblockRecommendationArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UnblockRecommendationArgs) GetId() string {
	return p.Id
}
func (p *UnblockRecommendationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnblockRecommendationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UnblockRecommendationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *UnblockRecommendationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnblockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UnblockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *UnblockRecommendationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockRecommendationArgs(%+v)", *p)
}

type UnblockRecommendationResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUnblockRecommendationResult() *UnblockRecommendationResult {
	return &UnblockRecommendationResult{}
}

var UnblockRecommendationResult_E_DEFAULT *TalkException

func (p *UnblockRecommendationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UnblockRecommendationResult_E_DEFAULT
	}
	return p.E
}
func (p *UnblockRecommendationResult) IsSetE() bool {
	return p.E != nil
}

func (p *UnblockRecommendationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnblockRecommendationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UnblockRecommendationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unblockRecommendation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnblockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UnblockRecommendationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnblockRecommendationResult(%+v)", *p)
}

type UnregisterUserAndDeviceArgs struct {
}

func NewUnregisterUserAndDeviceArgs() *UnregisterUserAndDeviceArgs {
	return &UnregisterUserAndDeviceArgs{}
}

func (p *UnregisterUserAndDeviceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnregisterUserAndDeviceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unregisterUserAndDevice_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnregisterUserAndDeviceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnregisterUserAndDeviceArgs(%+v)", *p)
}

type UnregisterUserAndDeviceResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewUnregisterUserAndDeviceResult() *UnregisterUserAndDeviceResult {
	return &UnregisterUserAndDeviceResult{}
}

var UnregisterUserAndDeviceResult_Success_DEFAULT string

func (p *UnregisterUserAndDeviceResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UnregisterUserAndDeviceResult_Success_DEFAULT
	}
	return *p.Success
}

var UnregisterUserAndDeviceResult_E_DEFAULT *TalkException

func (p *UnregisterUserAndDeviceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UnregisterUserAndDeviceResult_E_DEFAULT
	}
	return p.E
}
func (p *UnregisterUserAndDeviceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnregisterUserAndDeviceResult) IsSetE() bool {
	return p.E != nil
}

func (p *UnregisterUserAndDeviceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnregisterUserAndDeviceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UnregisterUserAndDeviceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UnregisterUserAndDeviceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unregisterUserAndDevice_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnregisterUserAndDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UnregisterUserAndDeviceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UnregisterUserAndDeviceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnregisterUserAndDeviceResult(%+v)", *p)
}

type UpdateApnsDeviceTokenArgs struct {
	// unused field # 1
	ApnsDeviceToken []byte `thrift:"apnsDeviceToken,2" json:"apnsDeviceToken"`
}

func NewUpdateApnsDeviceTokenArgs() *UpdateApnsDeviceTokenArgs {
	return &UpdateApnsDeviceTokenArgs{}
}

func (p *UpdateApnsDeviceTokenArgs) GetApnsDeviceToken() []byte {
	return p.ApnsDeviceToken
}
func (p *UpdateApnsDeviceTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateApnsDeviceTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ApnsDeviceToken = v
	}
	return nil
}

func (p *UpdateApnsDeviceTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateApnsDeviceToken_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateApnsDeviceTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apnsDeviceToken", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:apnsDeviceToken: %s", p, err)
	}
	if err := oprot.WriteBinary(p.ApnsDeviceToken); err != nil {
		return fmt.Errorf("%T.apnsDeviceToken (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:apnsDeviceToken: %s", p, err)
	}
	return err
}

func (p *UpdateApnsDeviceTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateApnsDeviceTokenArgs(%+v)", *p)
}

type UpdateApnsDeviceTokenResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateApnsDeviceTokenResult() *UpdateApnsDeviceTokenResult {
	return &UpdateApnsDeviceTokenResult{}
}

var UpdateApnsDeviceTokenResult_E_DEFAULT *TalkException

func (p *UpdateApnsDeviceTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateApnsDeviceTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateApnsDeviceTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateApnsDeviceTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateApnsDeviceTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateApnsDeviceTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateApnsDeviceToken_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateApnsDeviceTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateApnsDeviceTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateApnsDeviceTokenResult(%+v)", *p)
}

type UpdateBuddySettingArgs struct {
	// unused field # 1
	Key   string `thrift:"key,2" json:"key"`
	Value string `thrift:"value,3" json:"value"`
}

func NewUpdateBuddySettingArgs() *UpdateBuddySettingArgs {
	return &UpdateBuddySettingArgs{}
}

func (p *UpdateBuddySettingArgs) GetKey() string {
	return p.Key
}

func (p *UpdateBuddySettingArgs) GetValue() string {
	return p.Value
}
func (p *UpdateBuddySettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateBuddySettingArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *UpdateBuddySettingArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *UpdateBuddySettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateBuddySetting_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateBuddySettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *UpdateBuddySettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *UpdateBuddySettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuddySettingArgs(%+v)", *p)
}

type UpdateBuddySettingResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateBuddySettingResult() *UpdateBuddySettingResult {
	return &UpdateBuddySettingResult{}
}

var UpdateBuddySettingResult_E_DEFAULT *TalkException

func (p *UpdateBuddySettingResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateBuddySettingResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateBuddySettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateBuddySettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateBuddySettingResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateBuddySettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateBuddySetting_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateBuddySettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateBuddySettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuddySettingResult(%+v)", *p)
}

type UpdateC2DMRegistrationIdArgs struct {
	// unused field # 1
	RegistrationId string `thrift:"registrationId,2" json:"registrationId"`
}

func NewUpdateC2DMRegistrationIdArgs() *UpdateC2DMRegistrationIdArgs {
	return &UpdateC2DMRegistrationIdArgs{}
}

func (p *UpdateC2DMRegistrationIdArgs) GetRegistrationId() string {
	return p.RegistrationId
}
func (p *UpdateC2DMRegistrationIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RegistrationId = v
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateC2DMRegistrationId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registrationId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:registrationId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RegistrationId)); err != nil {
		return fmt.Errorf("%T.registrationId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:registrationId: %s", p, err)
	}
	return err
}

func (p *UpdateC2DMRegistrationIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateC2DMRegistrationIdArgs(%+v)", *p)
}

type UpdateC2DMRegistrationIdResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateC2DMRegistrationIdResult() *UpdateC2DMRegistrationIdResult {
	return &UpdateC2DMRegistrationIdResult{}
}

var UpdateC2DMRegistrationIdResult_E_DEFAULT *TalkException

func (p *UpdateC2DMRegistrationIdResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateC2DMRegistrationIdResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateC2DMRegistrationIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateC2DMRegistrationIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateC2DMRegistrationId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateC2DMRegistrationIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateC2DMRegistrationIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateC2DMRegistrationIdResult(%+v)", *p)
}

type UpdateContactSettingArgs struct {
	ReqSeq int32          `thrift:"reqSeq,1" json:"reqSeq"`
	Mid    string         `thrift:"mid,2" json:"mid"`
	Flag   ContactSetting `thrift:"flag,3" json:"flag"`
	Value  string         `thrift:"value,4" json:"value"`
}

func NewUpdateContactSettingArgs() *UpdateContactSettingArgs {
	return &UpdateContactSettingArgs{}
}

func (p *UpdateContactSettingArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UpdateContactSettingArgs) GetMid() string {
	return p.Mid
}

func (p *UpdateContactSettingArgs) GetFlag() ContactSetting {
	return p.Flag
}

func (p *UpdateContactSettingArgs) GetValue() string {
	return p.Value
}
func (p *UpdateContactSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateContactSettingArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateContactSettingArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *UpdateContactSettingArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := ContactSetting(v)
		p.Flag = temp
	}
	return nil
}

func (p *UpdateContactSettingArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *UpdateContactSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateContactSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateContactSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mid: %s", p, err)
	}
	return err
}

func (p *UpdateContactSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:flag: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Flag)); err != nil {
		return fmt.Errorf("%T.flag (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:flag: %s", p, err)
	}
	return err
}

func (p *UpdateContactSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:value: %s", p, err)
	}
	return err
}

func (p *UpdateContactSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateContactSettingArgs(%+v)", *p)
}

type UpdateContactSettingResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateContactSettingResult() *UpdateContactSettingResult {
	return &UpdateContactSettingResult{}
}

var UpdateContactSettingResult_E_DEFAULT *TalkException

func (p *UpdateContactSettingResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateContactSettingResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateContactSettingResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateContactSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateContactSettingResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateContactSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateContactSetting_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateContactSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateContactSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateContactSettingResult(%+v)", *p)
}

type UpdateCustomModeSettingsArgs struct {
	// unused field # 1
	CustomMode CustomMode        `thrift:"customMode,2" json:"customMode"`
	ParamMap   map[string]string `thrift:"paramMap,3" json:"paramMap"`
}

func NewUpdateCustomModeSettingsArgs() *UpdateCustomModeSettingsArgs {
	return &UpdateCustomModeSettingsArgs{}
}

func (p *UpdateCustomModeSettingsArgs) GetCustomMode() CustomMode {
	return p.CustomMode
}

func (p *UpdateCustomModeSettingsArgs) GetParamMap() map[string]string {
	return p.ParamMap
}
func (p *UpdateCustomModeSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := CustomMode(v)
		p.CustomMode = temp
	}
	return nil
}

func (p *UpdateCustomModeSettingsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMap = tMap
	for i := 0; i < size; i++ {
		var _key657 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key657 = v
		}
		var _val658 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val658 = v
		}
		p.ParamMap[_key657] = _val658
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateCustomModeSettings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customMode", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:customMode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CustomMode)); err != nil {
		return fmt.Errorf("%T.customMode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:customMode: %s", p, err)
	}
	return err
}

func (p *UpdateCustomModeSettingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:paramMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:paramMap: %s", p, err)
	}
	return err
}

func (p *UpdateCustomModeSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCustomModeSettingsArgs(%+v)", *p)
}

type UpdateCustomModeSettingsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateCustomModeSettingsResult() *UpdateCustomModeSettingsResult {
	return &UpdateCustomModeSettingsResult{}
}

var UpdateCustomModeSettingsResult_E_DEFAULT *TalkException

func (p *UpdateCustomModeSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateCustomModeSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateCustomModeSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateCustomModeSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateCustomModeSettings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateCustomModeSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateCustomModeSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCustomModeSettingsResult(%+v)", *p)
}

type UpdateDeviceInfoArgs struct {
	// unused field # 1
	DeviceUid  string      `thrift:"deviceUid,2" json:"deviceUid"`
	DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" json:"deviceInfo"`
}

func NewUpdateDeviceInfoArgs() *UpdateDeviceInfoArgs {
	return &UpdateDeviceInfoArgs{}
}

func (p *UpdateDeviceInfoArgs) GetDeviceUid() string {
	return p.DeviceUid
}

var UpdateDeviceInfoArgs_DeviceInfo_DEFAULT *DeviceInfo

func (p *UpdateDeviceInfoArgs) GetDeviceInfo() *DeviceInfo {
	if !p.IsSetDeviceInfo() {
		return UpdateDeviceInfoArgs_DeviceInfo_DEFAULT
	}
	return p.DeviceInfo
}
func (p *UpdateDeviceInfoArgs) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *UpdateDeviceInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateDeviceInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeviceUid = v
	}
	return nil
}

func (p *UpdateDeviceInfoArgs) ReadField3(iprot thrift.TProtocol) error {
	p.DeviceInfo = &DeviceInfo{}
	if err := p.DeviceInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeviceInfo, err)
	}
	return nil
}

func (p *UpdateDeviceInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDeviceInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateDeviceInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceUid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deviceUid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeviceUid)); err != nil {
		return fmt.Errorf("%T.deviceUid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deviceUid: %s", p, err)
	}
	return err
}

func (p *UpdateDeviceInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deviceInfo: %s", p, err)
	}
	if err := p.DeviceInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeviceInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deviceInfo: %s", p, err)
	}
	return err
}

func (p *UpdateDeviceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDeviceInfoArgs(%+v)", *p)
}

type UpdateDeviceInfoResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateDeviceInfoResult() *UpdateDeviceInfoResult {
	return &UpdateDeviceInfoResult{}
}

var UpdateDeviceInfoResult_E_DEFAULT *TalkException

func (p *UpdateDeviceInfoResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateDeviceInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateDeviceInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateDeviceInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateDeviceInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateDeviceInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDeviceInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateDeviceInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateDeviceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDeviceInfoResult(%+v)", *p)
}

type UpdateGroupArgs struct {
	ReqSeq int32  `thrift:"reqSeq,1" json:"reqSeq"`
	Group  *Group `thrift:"group,2" json:"group"`
}

func NewUpdateGroupArgs() *UpdateGroupArgs {
	return &UpdateGroupArgs{}
}

func (p *UpdateGroupArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateGroupArgs_Group_DEFAULT *Group

func (p *UpdateGroupArgs) GetGroup() *Group {
	if !p.IsSetGroup() {
		return UpdateGroupArgs_Group_DEFAULT
	}
	return p.Group
}
func (p *UpdateGroupArgs) IsSetGroup() bool {
	return p.Group != nil
}

func (p *UpdateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Group = &Group{}
	if err := p.Group.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Group, err)
	}
	return nil
}

func (p *UpdateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:group: %s", p, err)
	}
	if err := p.Group.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Group, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:group: %s", p, err)
	}
	return err
}

func (p *UpdateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateGroupArgs(%+v)", *p)
}

type UpdateGroupResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateGroupResult() *UpdateGroupResult {
	return &UpdateGroupResult{}
}

var UpdateGroupResult_E_DEFAULT *TalkException

func (p *UpdateGroupResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateGroupResult(%+v)", *p)
}

type UpdateNotificationTokenArgs struct {
	// unused field # 1
	Token  string           `thrift:"token,2" json:"token"`
	TypeA1 NotificationType `thrift:"type,3" json:"type"`
}

func NewUpdateNotificationTokenArgs() *UpdateNotificationTokenArgs {
	return &UpdateNotificationTokenArgs{}
}

func (p *UpdateNotificationTokenArgs) GetTypeA1() NotificationType {
	return p.TypeA1
}

func (p *UpdateNotificationTokenArgs) GetToken() string {
	return p.Token
}
func (p *UpdateNotificationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotificationTokenArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := NotificationType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *UpdateNotificationTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *UpdateNotificationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotificationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:token: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return fmt.Errorf("%T.token (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:token: %s", p, err)
	}
	return err
}

func (p *UpdateNotificationTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *UpdateNotificationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotificationTokenArgs(%+v)", *p)
}

type UpdateNotificationTokenResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateNotificationTokenResult() *UpdateNotificationTokenResult {
	return &UpdateNotificationTokenResult{}
}

var UpdateNotificationTokenResult_E_DEFAULT *TalkException

func (p *UpdateNotificationTokenResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateNotificationTokenResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateNotificationTokenResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateNotificationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotificationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateNotificationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationToken_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotificationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotificationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotificationTokenResult(%+v)", *p)
}

type UpdateNotificationTokenWithBytesArgs struct {
	// unused field # 1
	Token  []byte           `thrift:"token,2" json:"token"`
	TypeA1 NotificationType `thrift:"type,3" json:"type"`
}

func NewUpdateNotificationTokenWithBytesArgs() *UpdateNotificationTokenWithBytesArgs {
	return &UpdateNotificationTokenWithBytesArgs{}
}

func (p *UpdateNotificationTokenWithBytesArgs) GetTypeA1() NotificationType {
	return p.TypeA1
}

func (p *UpdateNotificationTokenWithBytesArgs) GetToken() []byte {
	return p.Token
}
func (p *UpdateNotificationTokenWithBytesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := NotificationType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationTokenWithBytes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:token: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Token); err != nil {
		return fmt.Errorf("%T.token (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:token: %s", p, err)
	}
	return err
}

func (p *UpdateNotificationTokenWithBytesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *UpdateNotificationTokenWithBytesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotificationTokenWithBytesArgs(%+v)", *p)
}

type UpdateNotificationTokenWithBytesResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateNotificationTokenWithBytesResult() *UpdateNotificationTokenWithBytesResult {
	return &UpdateNotificationTokenWithBytesResult{}
}

var UpdateNotificationTokenWithBytesResult_E_DEFAULT *TalkException

func (p *UpdateNotificationTokenWithBytesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateNotificationTokenWithBytesResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateNotificationTokenWithBytesResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateNotificationTokenWithBytesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotificationTokenWithBytes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotificationTokenWithBytesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotificationTokenWithBytesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotificationTokenWithBytesResult(%+v)", *p)
}

type UpdateProfileArgs struct {
	ReqSeq  int32    `thrift:"reqSeq,1" json:"reqSeq"`
	Profile *Profile `thrift:"profile,2" json:"profile"`
}

func NewUpdateProfileArgs() *UpdateProfileArgs {
	return &UpdateProfileArgs{}
}

func (p *UpdateProfileArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateProfileArgs_Profile_DEFAULT *Profile

func (p *UpdateProfileArgs) GetProfile() *Profile {
	if !p.IsSetProfile() {
		return UpdateProfileArgs_Profile_DEFAULT
	}
	return p.Profile
}
func (p *UpdateProfileArgs) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *UpdateProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateProfileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateProfileArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Profile = &Profile{}
	if err := p.Profile.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Profile, err)
	}
	return nil
}

func (p *UpdateProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:profile: %s", p, err)
	}
	if err := p.Profile.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Profile, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:profile: %s", p, err)
	}
	return err
}

func (p *UpdateProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProfileArgs(%+v)", *p)
}

type UpdateProfileResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateProfileResult() *UpdateProfileResult {
	return &UpdateProfileResult{}
}

var UpdateProfileResult_E_DEFAULT *TalkException

func (p *UpdateProfileResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateProfileResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateProfileResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateProfileResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfile_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProfileResult(%+v)", *p)
}

type UpdateProfileAttributeArgs struct {
	ReqSeq int32            `thrift:"reqSeq,1" json:"reqSeq"`
	Attr   ProfileAttribute `thrift:"attr,2" json:"attr"`
	Value  string           `thrift:"value,3" json:"value"`
}

func NewUpdateProfileAttributeArgs() *UpdateProfileAttributeArgs {
	return &UpdateProfileAttributeArgs{}
}

func (p *UpdateProfileAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UpdateProfileAttributeArgs) GetAttr() ProfileAttribute {
	return p.Attr
}

func (p *UpdateProfileAttributeArgs) GetValue() string {
	return p.Value
}
func (p *UpdateProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateProfileAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateProfileAttributeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := ProfileAttribute(v)
		p.Attr = temp
	}
	return nil
}

func (p *UpdateProfileAttributeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *UpdateProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:attr: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return fmt.Errorf("%T.attr (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:attr: %s", p, err)
	}
	return err
}

func (p *UpdateProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *UpdateProfileAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProfileAttributeArgs(%+v)", *p)
}

type UpdateProfileAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateProfileAttributeResult() *UpdateProfileAttributeResult {
	return &UpdateProfileAttributeResult{}
}

var UpdateProfileAttributeResult_E_DEFAULT *TalkException

func (p *UpdateProfileAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateProfileAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateProfileAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateProfileAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateProfileAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateProfileAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateProfileAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateProfileAttributeResult(%+v)", *p)
}

type UpdateRegionArgs struct {
	// unused field # 1
	Region string `thrift:"region,2" json:"region"`
}

func NewUpdateRegionArgs() *UpdateRegionArgs {
	return &UpdateRegionArgs{}
}

func (p *UpdateRegionArgs) GetRegion() string {
	return p.Region
}
func (p *UpdateRegionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateRegionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *UpdateRegionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRegion_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateRegionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:region: %s", p, err)
	}
	return err
}

func (p *UpdateRegionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRegionArgs(%+v)", *p)
}

type UpdateRegionResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateRegionResult() *UpdateRegionResult {
	return &UpdateRegionResult{}
}

var UpdateRegionResult_E_DEFAULT *TalkException

func (p *UpdateRegionResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateRegionResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateRegionResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateRegionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateRegionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateRegionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRegion_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateRegionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateRegionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRegionResult(%+v)", *p)
}

type UpdateSettingsArgs struct {
	ReqSeq   int32     `thrift:"reqSeq,1" json:"reqSeq"`
	Settings *Settings `thrift:"settings,2" json:"settings"`
}

func NewUpdateSettingsArgs() *UpdateSettingsArgs {
	return &UpdateSettingsArgs{}
}

func (p *UpdateSettingsArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateSettingsArgs_Settings_DEFAULT *Settings

func (p *UpdateSettingsArgs) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return UpdateSettingsArgs_Settings_DEFAULT
	}
	return p.Settings
}
func (p *UpdateSettingsArgs) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *UpdateSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateSettingsArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Settings, err)
	}
	return nil
}

func (p *UpdateSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:settings: %s", p, err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Settings, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:settings: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsArgs(%+v)", *p)
}

type UpdateSettingsResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateSettingsResult() *UpdateSettingsResult {
	return &UpdateSettingsResult{}
}

var UpdateSettingsResult_E_DEFAULT *TalkException

func (p *UpdateSettingsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateSettingsResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSettingsResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsResult(%+v)", *p)
}

type UpdateSettings2Args struct {
	ReqSeq   int32     `thrift:"reqSeq,1" json:"reqSeq"`
	Settings *Settings `thrift:"settings,2" json:"settings"`
}

func NewUpdateSettings2Args() *UpdateSettings2Args {
	return &UpdateSettings2Args{}
}

func (p *UpdateSettings2Args) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateSettings2Args_Settings_DEFAULT *Settings

func (p *UpdateSettings2Args) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return UpdateSettings2Args_Settings_DEFAULT
	}
	return p.Settings
}
func (p *UpdateSettings2Args) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *UpdateSettings2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettings2Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateSettings2Args) ReadField2(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Settings, err)
	}
	return nil
}

func (p *UpdateSettings2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings2_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettings2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateSettings2Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:settings: %s", p, err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Settings, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:settings: %s", p, err)
	}
	return err
}

func (p *UpdateSettings2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettings2Args(%+v)", *p)
}

type UpdateSettings2Result struct {
	Success *int32         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateSettings2Result() *UpdateSettings2Result {
	return &UpdateSettings2Result{}
}

var UpdateSettings2Result_Success_DEFAULT int32

func (p *UpdateSettings2Result) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return UpdateSettings2Result_Success_DEFAULT
	}
	return *p.Success
}

var UpdateSettings2Result_E_DEFAULT *TalkException

func (p *UpdateSettings2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateSettings2Result_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSettings2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSettings2Result) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSettings2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettings2Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UpdateSettings2Result) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSettings2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettings2_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettings2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettings2Result) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettings2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettings2Result(%+v)", *p)
}

type UpdateSettingsAttributeArgs struct {
	ReqSeq int32             `thrift:"reqSeq,1" json:"reqSeq"`
	Attr   SettingsAttribute `thrift:"attr,2" json:"attr"`
	Value  string            `thrift:"value,3" json:"value"`
}

func NewUpdateSettingsAttributeArgs() *UpdateSettingsAttributeArgs {
	return &UpdateSettingsAttributeArgs{}
}

func (p *UpdateSettingsAttributeArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UpdateSettingsAttributeArgs) GetAttr() SettingsAttribute {
	return p.Attr
}

func (p *UpdateSettingsAttributeArgs) GetValue() string {
	return p.Value
}
func (p *UpdateSettingsAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateSettingsAttributeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := SettingsAttribute(v)
		p.Attr = temp
	}
	return nil
}

func (p *UpdateSettingsAttributeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *UpdateSettingsAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:attr: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Attr)); err != nil {
		return fmt.Errorf("%T.attr (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:attr: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsAttributeArgs(%+v)", *p)
}

type UpdateSettingsAttributeResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateSettingsAttributeResult() *UpdateSettingsAttributeResult {
	return &UpdateSettingsAttributeResult{}
}

var UpdateSettingsAttributeResult_E_DEFAULT *TalkException

func (p *UpdateSettingsAttributeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateSettingsAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSettingsAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSettingsAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSettingsAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettingsAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsAttributeResult(%+v)", *p)
}

type UpdateSettingsAttributesArgs struct {
	ReqSeq     int32     `thrift:"reqSeq,1" json:"reqSeq"`
	AttrBitset int32     `thrift:"attrBitset,2" json:"attrBitset"`
	Settings   *Settings `thrift:"settings,3" json:"settings"`
}

func NewUpdateSettingsAttributesArgs() *UpdateSettingsAttributesArgs {
	return &UpdateSettingsAttributesArgs{}
}

func (p *UpdateSettingsAttributesArgs) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *UpdateSettingsAttributesArgs) GetAttrBitset() int32 {
	return p.AttrBitset
}

var UpdateSettingsAttributesArgs_Settings_DEFAULT *Settings

func (p *UpdateSettingsAttributesArgs) GetSettings() *Settings {
	if !p.IsSetSettings() {
		return UpdateSettingsAttributesArgs_Settings_DEFAULT
	}
	return p.Settings
}
func (p *UpdateSettingsAttributesArgs) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *UpdateSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsAttributesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateSettingsAttributesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AttrBitset = v
	}
	return nil
}

func (p *UpdateSettingsAttributesArgs) ReadField3(iprot thrift.TProtocol) error {
	p.Settings = &Settings{}
	if err := p.Settings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Settings, err)
	}
	return nil
}

func (p *UpdateSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reqSeq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
		return fmt.Errorf("%T.reqSeq (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reqSeq: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:attrBitset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
		return fmt.Errorf("%T.attrBitset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:attrBitset: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:settings: %s", p, err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Settings, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:settings: %s", p, err)
	}
	return err
}

func (p *UpdateSettingsAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsAttributesArgs(%+v)", *p)
}

type UpdateSettingsAttributesResult struct {
	Success *int32         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewUpdateSettingsAttributesResult() *UpdateSettingsAttributesResult {
	return &UpdateSettingsAttributesResult{}
}

var UpdateSettingsAttributesResult_Success_DEFAULT int32

func (p *UpdateSettingsAttributesResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return UpdateSettingsAttributesResult_Success_DEFAULT
	}
	return *p.Success
}

var UpdateSettingsAttributesResult_E_DEFAULT *TalkException

func (p *UpdateSettingsAttributesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return UpdateSettingsAttributesResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSettingsAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSettingsAttributesResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSettingsAttributesResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UpdateSettingsAttributesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSettingsAttributes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSettingsAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSettingsAttributesResult(%+v)", *p)
}

type VerifyIdentityCredentialArgs struct {
	// unused fields # 1 to 2
	Identifier string `thrift:"identifier,3" json:"identifier"`
	Password   string `thrift:"password,4" json:"password"`
	// unused fields # 5 to 7
	IdentityProvider IdentityProvider `thrift:"identityProvider,8" json:"identityProvider"`
}

func NewVerifyIdentityCredentialArgs() *VerifyIdentityCredentialArgs {
	return &VerifyIdentityCredentialArgs{}
}

func (p *VerifyIdentityCredentialArgs) GetIdentityProvider() IdentityProvider {
	return p.IdentityProvider
}

func (p *VerifyIdentityCredentialArgs) GetIdentifier() string {
	return p.Identifier
}

func (p *VerifyIdentityCredentialArgs) GetPassword() string {
	return p.Password
}
func (p *VerifyIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := IdentityProvider(v)
		p.IdentityProvider = temp
	}
	return nil
}

func (p *VerifyIdentityCredentialArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *VerifyIdentityCredentialArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *VerifyIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredential_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:identifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return fmt.Errorf("%T.identifier (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:identifier: %s", p, err)
	}
	return err
}

func (p *VerifyIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:password: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return fmt.Errorf("%T.password (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:password: %s", p, err)
	}
	return err
}

func (p *VerifyIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:identityProvider: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
		return fmt.Errorf("%T.identityProvider (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:identityProvider: %s", p, err)
	}
	return err
}

func (p *VerifyIdentityCredentialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyIdentityCredentialArgs(%+v)", *p)
}

type VerifyIdentityCredentialResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewVerifyIdentityCredentialResult() *VerifyIdentityCredentialResult {
	return &VerifyIdentityCredentialResult{}
}

var VerifyIdentityCredentialResult_E_DEFAULT *TalkException

func (p *VerifyIdentityCredentialResult) GetE() *TalkException {
	if !p.IsSetE() {
		return VerifyIdentityCredentialResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyIdentityCredentialResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredential_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyIdentityCredentialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyIdentityCredentialResult(%+v)", *p)
}

type VerifyIdentityCredentialWithResultArgs struct {
	// unused field # 1
	IdentityCredential *IdentityCredential `thrift:"identityCredential,2" json:"identityCredential"`
}

func NewVerifyIdentityCredentialWithResultArgs() *VerifyIdentityCredentialWithResultArgs {
	return &VerifyIdentityCredentialWithResultArgs{}
}

var VerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT *IdentityCredential

func (p *VerifyIdentityCredentialWithResultArgs) GetIdentityCredential() *IdentityCredential {
	if !p.IsSetIdentityCredential() {
		return VerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT
	}
	return p.IdentityCredential
}
func (p *VerifyIdentityCredentialWithResultArgs) IsSetIdentityCredential() bool {
	return p.IdentityCredential != nil
}

func (p *VerifyIdentityCredentialWithResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultArgs) ReadField2(iprot thrift.TProtocol) error {
	p.IdentityCredential = &IdentityCredential{}
	if err := p.IdentityCredential.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IdentityCredential, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:identityCredential: %s", p, err)
	}
	if err := p.IdentityCredential.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.IdentityCredential, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:identityCredential: %s", p, err)
	}
	return err
}

func (p *VerifyIdentityCredentialWithResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyIdentityCredentialWithResultArgs(%+v)", *p)
}

type VerifyIdentityCredentialWithResultResult struct {
	Success *UserAuthStatus `thrift:"success,0" json:"success"`
	E       *TalkException  `thrift:"e,1" json:"e"`
}

func NewVerifyIdentityCredentialWithResultResult() *VerifyIdentityCredentialWithResultResult {
	return &VerifyIdentityCredentialWithResultResult{}
}

var VerifyIdentityCredentialWithResultResult_Success_DEFAULT *UserAuthStatus

func (p *VerifyIdentityCredentialWithResultResult) GetSuccess() *UserAuthStatus {
	if !p.IsSetSuccess() {
		return VerifyIdentityCredentialWithResultResult_Success_DEFAULT
	}
	return p.Success
}

var VerifyIdentityCredentialWithResultResult_E_DEFAULT *TalkException

func (p *VerifyIdentityCredentialWithResultResult) GetE() *TalkException {
	if !p.IsSetE() {
		return VerifyIdentityCredentialWithResultResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyIdentityCredentialWithResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyIdentityCredentialWithResultResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyIdentityCredentialWithResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAuthStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyIdentityCredentialWithResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *VerifyIdentityCredentialWithResultResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyIdentityCredentialWithResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyIdentityCredentialWithResultResult(%+v)", *p)
}

type VerifyPhoneArgs struct {
	// unused field # 1
	SessionId string `thrift:"sessionId,2" json:"sessionId"`
	PinCode   string `thrift:"pinCode,3" json:"pinCode"`
	UdidHash  string `thrift:"udidHash,4" json:"udidHash"`
}

func NewVerifyPhoneArgs() *VerifyPhoneArgs {
	return &VerifyPhoneArgs{}
}

func (p *VerifyPhoneArgs) GetSessionId() string {
	return p.SessionId
}

func (p *VerifyPhoneArgs) GetPinCode() string {
	return p.PinCode
}

func (p *VerifyPhoneArgs) GetUdidHash() string {
	return p.UdidHash
}
func (p *VerifyPhoneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyPhoneArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *VerifyPhoneArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *VerifyPhoneArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UdidHash = v
	}
	return nil
}

func (p *VerifyPhoneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyPhone_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.sessionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sessionId: %s", p, err)
	}
	return err
}

func (p *VerifyPhoneArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pinCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return fmt.Errorf("%T.pinCode (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pinCode: %s", p, err)
	}
	return err
}

func (p *VerifyPhoneArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:udidHash: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UdidHash)); err != nil {
		return fmt.Errorf("%T.udidHash (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:udidHash: %s", p, err)
	}
	return err
}

func (p *VerifyPhoneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyPhoneArgs(%+v)", *p)
}

type VerifyPhoneResult struct {
	Success *VerificationResult_ `thrift:"success,0" json:"success"`
	E       *TalkException       `thrift:"e,1" json:"e"`
}

func NewVerifyPhoneResult() *VerifyPhoneResult {
	return &VerifyPhoneResult{}
}

var VerifyPhoneResult_Success_DEFAULT VerificationResult_

func (p *VerifyPhoneResult) GetSuccess() VerificationResult_ {
	if !p.IsSetSuccess() {
		return VerifyPhoneResult_Success_DEFAULT
	}
	return *p.Success
}

var VerifyPhoneResult_E_DEFAULT *TalkException

func (p *VerifyPhoneResult) GetE() *TalkException {
	if !p.IsSetE() {
		return VerifyPhoneResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyPhoneResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyPhoneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyPhoneResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		temp := VerificationResult_(v)
		p.Success = &temp
	}
	return nil
}

func (p *VerifyPhoneResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyPhoneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyPhone_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *VerifyPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyPhoneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyPhoneResult(%+v)", *p)
}

type VerifyQrcodeArgs struct {
	// unused field # 1
	Verifier string `thrift:"verifier,2" json:"verifier"`
	PinCode  string `thrift:"pinCode,3" json:"pinCode"`
}

func NewVerifyQrcodeArgs() *VerifyQrcodeArgs {
	return &VerifyQrcodeArgs{}
}

func (p *VerifyQrcodeArgs) GetVerifier() string {
	return p.Verifier
}

func (p *VerifyQrcodeArgs) GetPinCode() string {
	return p.PinCode
}
func (p *VerifyQrcodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyQrcodeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Verifier = v
	}
	return nil
}

func (p *VerifyQrcodeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PinCode = v
	}
	return nil
}

func (p *VerifyQrcodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcode_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:verifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Verifier)); err != nil {
		return fmt.Errorf("%T.verifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:verifier: %s", p, err)
	}
	return err
}

func (p *VerifyQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pinCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PinCode)); err != nil {
		return fmt.Errorf("%T.pinCode (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pinCode: %s", p, err)
	}
	return err
}

func (p *VerifyQrcodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyQrcodeArgs(%+v)", *p)
}

type VerifyQrcodeResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewVerifyQrcodeResult() *VerifyQrcodeResult {
	return &VerifyQrcodeResult{}
}

var VerifyQrcodeResult_Success_DEFAULT string

func (p *VerifyQrcodeResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return VerifyQrcodeResult_Success_DEFAULT
	}
	return *p.Success
}

var VerifyQrcodeResult_E_DEFAULT *TalkException

func (p *VerifyQrcodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return VerifyQrcodeResult_E_DEFAULT
	}
	return p.E
}
func (p *VerifyQrcodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VerifyQrcodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *VerifyQrcodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerifyQrcodeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *VerifyQrcodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *VerifyQrcodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("verifyQrcode_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *VerifyQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *VerifyQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *VerifyQrcodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyQrcodeResult(%+v)", *p)
}
