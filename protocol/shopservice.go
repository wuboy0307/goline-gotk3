// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ShopService interface {
	// Parameters:
	//  - PaymentReservation
	BuyCoinProduct(paymentReservation *PaymentReservation) (err error)
	// Parameters:
	//  - ReceiverMid
	//  - ProductId
	//  - MessageTemplate
	//  - Language
	//  - Country
	//  - PackageId
	BuyFreeProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64) (err error)
	// Parameters:
	//  - ReceiverMid
	//  - ProductId
	//  - MessageTemplate
	//  - Language
	//  - Country
	//  - PackageId
	//  - SerialNumber
	BuyMustbuyProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64, serialNumber string) (err error)
	// Parameters:
	//  - RecipientMid
	//  - PackageId
	//  - Language
	//  - Country
	CheckCanReceivePresent(recipientMid string, packageId int64, language string, country string) (err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetActivePurchases(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetActivePurchaseVersions(start int64, size int32, language string, country string) (r *ProductSimpleList, err error)
	// Parameters:
	//  - AppStoreCode
	//  - Country
	//  - Language
	GetCoinProducts(appStoreCode PaymentType, country string, language string) (r []*CoinProductItem, err error)
	// Parameters:
	//  - AppStoreCode
	//  - PgCode
	//  - Country
	//  - Language
	GetCoinProductsByPgCode(appStoreCode PaymentType, pgCode PaymentPgType, country string, language string) (r []*CoinProductItem, err error)
	// Parameters:
	//  - Request
	GetCoinPurchaseHistory(request *CoinHistoryCondition) (r *CoinHistoryResult_, err error)
	// Parameters:
	//  - Request
	GetCoinUseAndRefundHistory(request *CoinHistoryCondition) (r *CoinHistoryResult_, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetDownloads(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetEventPackages(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetNewlyReleasedPackages(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetPopularPackages(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetPresentsReceived(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetPresentsSent(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - PackageID
	//  - Language
	//  - Country
	GetProduct(packageID int64, language string, country string) (r *Product, err error)
	// Parameters:
	//  - ProductIdList
	//  - Language
	//  - Country
	GetProductList(productIdList []string, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - ProductIdList
	//  - Language
	//  - Country
	//  - CarrierCode
	GetProductListWithCarrier(productIdList []string, language string, country string, carrierCode string) (r *ProductList, err error)
	// Parameters:
	//  - PackageID
	//  - Language
	//  - Country
	//  - CarrierCode
	GetProductWithCarrier(packageID int64, language string, country string, carrierCode string) (r *Product, err error)
	// Parameters:
	//  - Start
	//  - Size
	//  - Language
	//  - Country
	GetPurchaseHistory(start int64, size int32, language string, country string) (r *ProductList, err error)
	// Parameters:
	//  - AppStoreCode
	GetTotalBalance(appStoreCode PaymentType) (r *Coin, err error)
	// Parameters:
	//  - PackageId
	//  - Language
	NotifyDownloaded(packageId int64, language string) (r int64, err error)
	// Parameters:
	//  - Request
	ReserveCoinPurchase(request *CoinPurchaseReservation) (r *PaymentReservationResult_, err error)
	// Parameters:
	//  - PaymentReservation
	ReservePayment(paymentReservation *PaymentReservation) (r *PaymentReservationResult_, err error)
}

type ShopServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewShopServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ShopServiceClient {
	return &ShopServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewShopServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ShopServiceClient {
	return &ShopServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - PaymentReservation
func (p *ShopServiceClient) BuyCoinProduct(paymentReservation *PaymentReservation) (err error) {
	if err = p.sendBuyCoinProduct(paymentReservation); err != nil {
		return
	}
	return p.recvBuyCoinProduct()
}

func (p *ShopServiceClient) sendBuyCoinProduct(paymentReservation *PaymentReservation) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("buyCoinProduct", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BuyCoinProductArgs{
		PaymentReservation: paymentReservation,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvBuyCoinProduct() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buyCoinProduct failed: out of sequence response")
		return
	}
	result := BuyCoinProductResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReceiverMid
//  - ProductId
//  - MessageTemplate
//  - Language
//  - Country
//  - PackageId
func (p *ShopServiceClient) BuyFreeProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64) (err error) {
	if err = p.sendBuyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId); err != nil {
		return
	}
	return p.recvBuyFreeProduct()
}

func (p *ShopServiceClient) sendBuyFreeProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("buyFreeProduct", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BuyFreeProductArgs{
		ReceiverMid:     receiverMid,
		ProductId:       productId,
		MessageTemplate: messageTemplate,
		Language:        language,
		Country:         country,
		PackageId:       packageId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvBuyFreeProduct() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buyFreeProduct failed: out of sequence response")
		return
	}
	result := BuyFreeProductResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ReceiverMid
//  - ProductId
//  - MessageTemplate
//  - Language
//  - Country
//  - PackageId
//  - SerialNumber
func (p *ShopServiceClient) BuyMustbuyProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64, serialNumber string) (err error) {
	if err = p.sendBuyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber); err != nil {
		return
	}
	return p.recvBuyMustbuyProduct()
}

func (p *ShopServiceClient) sendBuyMustbuyProduct(receiverMid string, productId string, messageTemplate int32, language string, country string, packageId int64, serialNumber string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("buyMustbuyProduct", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BuyMustbuyProductArgs{
		ReceiverMid:     receiverMid,
		ProductId:       productId,
		MessageTemplate: messageTemplate,
		Language:        language,
		Country:         country,
		PackageId:       packageId,
		SerialNumber:    serialNumber,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvBuyMustbuyProduct() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buyMustbuyProduct failed: out of sequence response")
		return
	}
	result := BuyMustbuyProductResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - RecipientMid
//  - PackageId
//  - Language
//  - Country
func (p *ShopServiceClient) CheckCanReceivePresent(recipientMid string, packageId int64, language string, country string) (err error) {
	if err = p.sendCheckCanReceivePresent(recipientMid, packageId, language, country); err != nil {
		return
	}
	return p.recvCheckCanReceivePresent()
}

func (p *ShopServiceClient) sendCheckCanReceivePresent(recipientMid string, packageId int64, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkCanReceivePresent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CheckCanReceivePresentArgs{
		RecipientMid: recipientMid,
		PackageId:    packageId,
		Language:     language,
		Country:      country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvCheckCanReceivePresent() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkCanReceivePresent failed: out of sequence response")
		return
	}
	result := CheckCanReceivePresentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetActivePurchases(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetActivePurchases(start, size, language, country); err != nil {
		return
	}
	return p.recvGetActivePurchases()
}

func (p *ShopServiceClient) sendGetActivePurchases(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActivePurchases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetActivePurchasesArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetActivePurchases() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActivePurchases failed: out of sequence response")
		return
	}
	result := GetActivePurchasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetActivePurchaseVersions(start int64, size int32, language string, country string) (r *ProductSimpleList, err error) {
	if err = p.sendGetActivePurchaseVersions(start, size, language, country); err != nil {
		return
	}
	return p.recvGetActivePurchaseVersions()
}

func (p *ShopServiceClient) sendGetActivePurchaseVersions(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActivePurchaseVersions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetActivePurchaseVersionsArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetActivePurchaseVersions() (value *ProductSimpleList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActivePurchaseVersions failed: out of sequence response")
		return
	}
	result := GetActivePurchaseVersionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AppStoreCode
//  - Country
//  - Language
func (p *ShopServiceClient) GetCoinProducts(appStoreCode PaymentType, country string, language string) (r []*CoinProductItem, err error) {
	if err = p.sendGetCoinProducts(appStoreCode, country, language); err != nil {
		return
	}
	return p.recvGetCoinProducts()
}

func (p *ShopServiceClient) sendGetCoinProducts(appStoreCode PaymentType, country string, language string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCoinProducts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCoinProductsArgs{
		AppStoreCode: appStoreCode,
		Country:      country,
		Language:     language,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetCoinProducts() (value []*CoinProductItem, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCoinProducts failed: out of sequence response")
		return
	}
	result := GetCoinProductsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AppStoreCode
//  - PgCode
//  - Country
//  - Language
func (p *ShopServiceClient) GetCoinProductsByPgCode(appStoreCode PaymentType, pgCode PaymentPgType, country string, language string) (r []*CoinProductItem, err error) {
	if err = p.sendGetCoinProductsByPgCode(appStoreCode, pgCode, country, language); err != nil {
		return
	}
	return p.recvGetCoinProductsByPgCode()
}

func (p *ShopServiceClient) sendGetCoinProductsByPgCode(appStoreCode PaymentType, pgCode PaymentPgType, country string, language string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCoinProductsByPgCode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCoinProductsByPgCodeArgs{
		AppStoreCode: appStoreCode,
		PgCode:       pgCode,
		Country:      country,
		Language:     language,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetCoinProductsByPgCode() (value []*CoinProductItem, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCoinProductsByPgCode failed: out of sequence response")
		return
	}
	result := GetCoinProductsByPgCodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ShopServiceClient) GetCoinPurchaseHistory(request *CoinHistoryCondition) (r *CoinHistoryResult_, err error) {
	if err = p.sendGetCoinPurchaseHistory(request); err != nil {
		return
	}
	return p.recvGetCoinPurchaseHistory()
}

func (p *ShopServiceClient) sendGetCoinPurchaseHistory(request *CoinHistoryCondition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCoinPurchaseHistory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCoinPurchaseHistoryArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetCoinPurchaseHistory() (value *CoinHistoryResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCoinPurchaseHistory failed: out of sequence response")
		return
	}
	result := GetCoinPurchaseHistoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ShopServiceClient) GetCoinUseAndRefundHistory(request *CoinHistoryCondition) (r *CoinHistoryResult_, err error) {
	if err = p.sendGetCoinUseAndRefundHistory(request); err != nil {
		return
	}
	return p.recvGetCoinUseAndRefundHistory()
}

func (p *ShopServiceClient) sendGetCoinUseAndRefundHistory(request *CoinHistoryCondition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCoinUseAndRefundHistory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCoinUseAndRefundHistoryArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetCoinUseAndRefundHistory() (value *CoinHistoryResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCoinUseAndRefundHistory failed: out of sequence response")
		return
	}
	result := GetCoinUseAndRefundHistoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetDownloads(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetDownloads(start, size, language, country); err != nil {
		return
	}
	return p.recvGetDownloads()
}

func (p *ShopServiceClient) sendGetDownloads(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDownloads", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDownloadsArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetDownloads() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDownloads failed: out of sequence response")
		return
	}
	result := GetDownloadsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetEventPackages(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetEventPackages(start, size, language, country); err != nil {
		return
	}
	return p.recvGetEventPackages()
}

func (p *ShopServiceClient) sendGetEventPackages(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getEventPackages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetEventPackagesArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetEventPackages() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getEventPackages failed: out of sequence response")
		return
	}
	result := GetEventPackagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetNewlyReleasedPackages(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetNewlyReleasedPackages(start, size, language, country); err != nil {
		return
	}
	return p.recvGetNewlyReleasedPackages()
}

func (p *ShopServiceClient) sendGetNewlyReleasedPackages(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNewlyReleasedPackages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetNewlyReleasedPackagesArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetNewlyReleasedPackages() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNewlyReleasedPackages failed: out of sequence response")
		return
	}
	result := GetNewlyReleasedPackagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetPopularPackages(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetPopularPackages(start, size, language, country); err != nil {
		return
	}
	return p.recvGetPopularPackages()
}

func (p *ShopServiceClient) sendGetPopularPackages(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPopularPackages", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPopularPackagesArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetPopularPackages() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPopularPackages failed: out of sequence response")
		return
	}
	result := GetPopularPackagesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetPresentsReceived(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetPresentsReceived(start, size, language, country); err != nil {
		return
	}
	return p.recvGetPresentsReceived()
}

func (p *ShopServiceClient) sendGetPresentsReceived(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPresentsReceived", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPresentsReceivedArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetPresentsReceived() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPresentsReceived failed: out of sequence response")
		return
	}
	result := GetPresentsReceivedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetPresentsSent(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetPresentsSent(start, size, language, country); err != nil {
		return
	}
	return p.recvGetPresentsSent()
}

func (p *ShopServiceClient) sendGetPresentsSent(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPresentsSent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPresentsSentArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetPresentsSent() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPresentsSent failed: out of sequence response")
		return
	}
	result := GetPresentsSentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PackageID
//  - Language
//  - Country
func (p *ShopServiceClient) GetProduct(packageID int64, language string, country string) (r *Product, err error) {
	if err = p.sendGetProduct(packageID, language, country); err != nil {
		return
	}
	return p.recvGetProduct()
}

func (p *ShopServiceClient) sendGetProduct(packageID int64, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProduct", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProductArgs{
		PackageID: packageID,
		Language:  language,
		Country:   country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetProduct() (value *Product, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProduct failed: out of sequence response")
		return
	}
	result := GetProductResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProductIdList
//  - Language
//  - Country
func (p *ShopServiceClient) GetProductList(productIdList []string, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetProductList(productIdList, language, country); err != nil {
		return
	}
	return p.recvGetProductList()
}

func (p *ShopServiceClient) sendGetProductList(productIdList []string, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProductList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProductListArgs{
		ProductIdList: productIdList,
		Language:      language,
		Country:       country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetProductList() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProductList failed: out of sequence response")
		return
	}
	result := GetProductListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProductIdList
//  - Language
//  - Country
//  - CarrierCode
func (p *ShopServiceClient) GetProductListWithCarrier(productIdList []string, language string, country string, carrierCode string) (r *ProductList, err error) {
	if err = p.sendGetProductListWithCarrier(productIdList, language, country, carrierCode); err != nil {
		return
	}
	return p.recvGetProductListWithCarrier()
}

func (p *ShopServiceClient) sendGetProductListWithCarrier(productIdList []string, language string, country string, carrierCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProductListWithCarrier", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProductListWithCarrierArgs{
		ProductIdList: productIdList,
		Language:      language,
		Country:       country,
		CarrierCode:   carrierCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetProductListWithCarrier() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProductListWithCarrier failed: out of sequence response")
		return
	}
	result := GetProductListWithCarrierResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PackageID
//  - Language
//  - Country
//  - CarrierCode
func (p *ShopServiceClient) GetProductWithCarrier(packageID int64, language string, country string, carrierCode string) (r *Product, err error) {
	if err = p.sendGetProductWithCarrier(packageID, language, country, carrierCode); err != nil {
		return
	}
	return p.recvGetProductWithCarrier()
}

func (p *ShopServiceClient) sendGetProductWithCarrier(packageID int64, language string, country string, carrierCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getProductWithCarrier", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetProductWithCarrierArgs{
		PackageID:   packageID,
		Language:    language,
		Country:     country,
		CarrierCode: carrierCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetProductWithCarrier() (value *Product, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProductWithCarrier failed: out of sequence response")
		return
	}
	result := GetProductWithCarrierResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetPurchaseHistory(start int64, size int32, language string, country string) (r *ProductList, err error) {
	if err = p.sendGetPurchaseHistory(start, size, language, country); err != nil {
		return
	}
	return p.recvGetPurchaseHistory()
}

func (p *ShopServiceClient) sendGetPurchaseHistory(start int64, size int32, language string, country string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPurchaseHistory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPurchaseHistoryArgs{
		Start:    start,
		Size:     size,
		Language: language,
		Country:  country,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetPurchaseHistory() (value *ProductList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPurchaseHistory failed: out of sequence response")
		return
	}
	result := GetPurchaseHistoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - AppStoreCode
func (p *ShopServiceClient) GetTotalBalance(appStoreCode PaymentType) (r *Coin, err error) {
	if err = p.sendGetTotalBalance(appStoreCode); err != nil {
		return
	}
	return p.recvGetTotalBalance()
}

func (p *ShopServiceClient) sendGetTotalBalance(appStoreCode PaymentType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTotalBalance", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTotalBalanceArgs{
		AppStoreCode: appStoreCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvGetTotalBalance() (value *Coin, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTotalBalance failed: out of sequence response")
		return
	}
	result := GetTotalBalanceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PackageId
//  - Language
func (p *ShopServiceClient) NotifyDownloaded(packageId int64, language string) (r int64, err error) {
	if err = p.sendNotifyDownloaded(packageId, language); err != nil {
		return
	}
	return p.recvNotifyDownloaded()
}

func (p *ShopServiceClient) sendNotifyDownloaded(packageId int64, language string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notifyDownloaded", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyDownloadedArgs{
		PackageId: packageId,
		Language:  language,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvNotifyDownloaded() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notifyDownloaded failed: out of sequence response")
		return
	}
	result := NotifyDownloadedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *ShopServiceClient) ReserveCoinPurchase(request *CoinPurchaseReservation) (r *PaymentReservationResult_, err error) {
	if err = p.sendReserveCoinPurchase(request); err != nil {
		return
	}
	return p.recvReserveCoinPurchase()
}

func (p *ShopServiceClient) sendReserveCoinPurchase(request *CoinPurchaseReservation) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reserveCoinPurchase", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReserveCoinPurchaseArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvReserveCoinPurchase() (value *PaymentReservationResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reserveCoinPurchase failed: out of sequence response")
		return
	}
	result := ReserveCoinPurchaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PaymentReservation
func (p *ShopServiceClient) ReservePayment(paymentReservation *PaymentReservation) (r *PaymentReservationResult_, err error) {
	if err = p.sendReservePayment(paymentReservation); err != nil {
		return
	}
	return p.recvReservePayment()
}

func (p *ShopServiceClient) sendReservePayment(paymentReservation *PaymentReservation) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reservePayment", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ReservePaymentArgs{
		PaymentReservation: paymentReservation,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ShopServiceClient) recvReservePayment() (value *PaymentReservationResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reservePayment failed: out of sequence response")
		return
	}
	result := ReservePaymentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type ShopServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ShopService
}

func (p *ShopServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ShopServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ShopServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewShopServiceProcessor(handler ShopService) *ShopServiceProcessor {

	self76 := &ShopServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self76.processorMap["buyCoinProduct"] = &shopServiceProcessorBuyCoinProduct{handler: handler}
	self76.processorMap["buyFreeProduct"] = &shopServiceProcessorBuyFreeProduct{handler: handler}
	self76.processorMap["buyMustbuyProduct"] = &shopServiceProcessorBuyMustbuyProduct{handler: handler}
	self76.processorMap["checkCanReceivePresent"] = &shopServiceProcessorCheckCanReceivePresent{handler: handler}
	self76.processorMap["getActivePurchases"] = &shopServiceProcessorGetActivePurchases{handler: handler}
	self76.processorMap["getActivePurchaseVersions"] = &shopServiceProcessorGetActivePurchaseVersions{handler: handler}
	self76.processorMap["getCoinProducts"] = &shopServiceProcessorGetCoinProducts{handler: handler}
	self76.processorMap["getCoinProductsByPgCode"] = &shopServiceProcessorGetCoinProductsByPgCode{handler: handler}
	self76.processorMap["getCoinPurchaseHistory"] = &shopServiceProcessorGetCoinPurchaseHistory{handler: handler}
	self76.processorMap["getCoinUseAndRefundHistory"] = &shopServiceProcessorGetCoinUseAndRefundHistory{handler: handler}
	self76.processorMap["getDownloads"] = &shopServiceProcessorGetDownloads{handler: handler}
	self76.processorMap["getEventPackages"] = &shopServiceProcessorGetEventPackages{handler: handler}
	self76.processorMap["getNewlyReleasedPackages"] = &shopServiceProcessorGetNewlyReleasedPackages{handler: handler}
	self76.processorMap["getPopularPackages"] = &shopServiceProcessorGetPopularPackages{handler: handler}
	self76.processorMap["getPresentsReceived"] = &shopServiceProcessorGetPresentsReceived{handler: handler}
	self76.processorMap["getPresentsSent"] = &shopServiceProcessorGetPresentsSent{handler: handler}
	self76.processorMap["getProduct"] = &shopServiceProcessorGetProduct{handler: handler}
	self76.processorMap["getProductList"] = &shopServiceProcessorGetProductList{handler: handler}
	self76.processorMap["getProductListWithCarrier"] = &shopServiceProcessorGetProductListWithCarrier{handler: handler}
	self76.processorMap["getProductWithCarrier"] = &shopServiceProcessorGetProductWithCarrier{handler: handler}
	self76.processorMap["getPurchaseHistory"] = &shopServiceProcessorGetPurchaseHistory{handler: handler}
	self76.processorMap["getTotalBalance"] = &shopServiceProcessorGetTotalBalance{handler: handler}
	self76.processorMap["notifyDownloaded"] = &shopServiceProcessorNotifyDownloaded{handler: handler}
	self76.processorMap["reserveCoinPurchase"] = &shopServiceProcessorReserveCoinPurchase{handler: handler}
	self76.processorMap["reservePayment"] = &shopServiceProcessorReservePayment{handler: handler}
	return self76
}

func (p *ShopServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x77 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x77.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x77

}

type shopServiceProcessorBuyCoinProduct struct {
	handler ShopService
}

func (p *shopServiceProcessorBuyCoinProduct) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BuyCoinProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("buyCoinProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BuyCoinProductResult{}
	var err2 error
	if err2 = p.handler.BuyCoinProduct(args.PaymentReservation); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buyCoinProduct: "+err2.Error())
			oprot.WriteMessageBegin("buyCoinProduct", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("buyCoinProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorBuyFreeProduct struct {
	handler ShopService
}

func (p *shopServiceProcessorBuyFreeProduct) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BuyFreeProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("buyFreeProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BuyFreeProductResult{}
	var err2 error
	if err2 = p.handler.BuyFreeProduct(args.ReceiverMid, args.ProductId, args.MessageTemplate, args.Language, args.Country, args.PackageId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buyFreeProduct: "+err2.Error())
			oprot.WriteMessageBegin("buyFreeProduct", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("buyFreeProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorBuyMustbuyProduct struct {
	handler ShopService
}

func (p *shopServiceProcessorBuyMustbuyProduct) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BuyMustbuyProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("buyMustbuyProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BuyMustbuyProductResult{}
	var err2 error
	if err2 = p.handler.BuyMustbuyProduct(args.ReceiverMid, args.ProductId, args.MessageTemplate, args.Language, args.Country, args.PackageId, args.SerialNumber); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buyMustbuyProduct: "+err2.Error())
			oprot.WriteMessageBegin("buyMustbuyProduct", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("buyMustbuyProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorCheckCanReceivePresent struct {
	handler ShopService
}

func (p *shopServiceProcessorCheckCanReceivePresent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckCanReceivePresentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkCanReceivePresent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CheckCanReceivePresentResult{}
	var err2 error
	if err2 = p.handler.CheckCanReceivePresent(args.RecipientMid, args.PackageId, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkCanReceivePresent: "+err2.Error())
			oprot.WriteMessageBegin("checkCanReceivePresent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("checkCanReceivePresent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetActivePurchases struct {
	handler ShopService
}

func (p *shopServiceProcessorGetActivePurchases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetActivePurchasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActivePurchases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetActivePurchasesResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetActivePurchases(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActivePurchases: "+err2.Error())
			oprot.WriteMessageBegin("getActivePurchases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActivePurchases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetActivePurchaseVersions struct {
	handler ShopService
}

func (p *shopServiceProcessorGetActivePurchaseVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetActivePurchaseVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActivePurchaseVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetActivePurchaseVersionsResult{}
	var retval *ProductSimpleList
	var err2 error
	if retval, err2 = p.handler.GetActivePurchaseVersions(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActivePurchaseVersions: "+err2.Error())
			oprot.WriteMessageBegin("getActivePurchaseVersions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActivePurchaseVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetCoinProducts struct {
	handler ShopService
}

func (p *shopServiceProcessorGetCoinProducts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCoinProductsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCoinProducts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCoinProductsResult{}
	var retval []*CoinProductItem
	var err2 error
	if retval, err2 = p.handler.GetCoinProducts(args.AppStoreCode, args.Country, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCoinProducts: "+err2.Error())
			oprot.WriteMessageBegin("getCoinProducts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCoinProducts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetCoinProductsByPgCode struct {
	handler ShopService
}

func (p *shopServiceProcessorGetCoinProductsByPgCode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCoinProductsByPgCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCoinProductsByPgCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCoinProductsByPgCodeResult{}
	var retval []*CoinProductItem
	var err2 error
	if retval, err2 = p.handler.GetCoinProductsByPgCode(args.AppStoreCode, args.PgCode, args.Country, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCoinProductsByPgCode: "+err2.Error())
			oprot.WriteMessageBegin("getCoinProductsByPgCode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCoinProductsByPgCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetCoinPurchaseHistory struct {
	handler ShopService
}

func (p *shopServiceProcessorGetCoinPurchaseHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCoinPurchaseHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCoinPurchaseHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCoinPurchaseHistoryResult{}
	var retval *CoinHistoryResult_
	var err2 error
	if retval, err2 = p.handler.GetCoinPurchaseHistory(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCoinPurchaseHistory: "+err2.Error())
			oprot.WriteMessageBegin("getCoinPurchaseHistory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCoinPurchaseHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetCoinUseAndRefundHistory struct {
	handler ShopService
}

func (p *shopServiceProcessorGetCoinUseAndRefundHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCoinUseAndRefundHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCoinUseAndRefundHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCoinUseAndRefundHistoryResult{}
	var retval *CoinHistoryResult_
	var err2 error
	if retval, err2 = p.handler.GetCoinUseAndRefundHistory(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCoinUseAndRefundHistory: "+err2.Error())
			oprot.WriteMessageBegin("getCoinUseAndRefundHistory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCoinUseAndRefundHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetDownloads struct {
	handler ShopService
}

func (p *shopServiceProcessorGetDownloads) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDownloadsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDownloads", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDownloadsResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetDownloads(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDownloads: "+err2.Error())
			oprot.WriteMessageBegin("getDownloads", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDownloads", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetEventPackages struct {
	handler ShopService
}

func (p *shopServiceProcessorGetEventPackages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetEventPackagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getEventPackages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetEventPackagesResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetEventPackages(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEventPackages: "+err2.Error())
			oprot.WriteMessageBegin("getEventPackages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getEventPackages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetNewlyReleasedPackages struct {
	handler ShopService
}

func (p *shopServiceProcessorGetNewlyReleasedPackages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetNewlyReleasedPackagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNewlyReleasedPackages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetNewlyReleasedPackagesResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetNewlyReleasedPackages(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNewlyReleasedPackages: "+err2.Error())
			oprot.WriteMessageBegin("getNewlyReleasedPackages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNewlyReleasedPackages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetPopularPackages struct {
	handler ShopService
}

func (p *shopServiceProcessorGetPopularPackages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPopularPackagesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPopularPackages", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPopularPackagesResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetPopularPackages(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPopularPackages: "+err2.Error())
			oprot.WriteMessageBegin("getPopularPackages", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPopularPackages", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetPresentsReceived struct {
	handler ShopService
}

func (p *shopServiceProcessorGetPresentsReceived) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPresentsReceivedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPresentsReceived", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPresentsReceivedResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetPresentsReceived(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPresentsReceived: "+err2.Error())
			oprot.WriteMessageBegin("getPresentsReceived", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPresentsReceived", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetPresentsSent struct {
	handler ShopService
}

func (p *shopServiceProcessorGetPresentsSent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPresentsSentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPresentsSent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPresentsSentResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetPresentsSent(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPresentsSent: "+err2.Error())
			oprot.WriteMessageBegin("getPresentsSent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPresentsSent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetProduct struct {
	handler ShopService
}

func (p *shopServiceProcessorGetProduct) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProductArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProduct", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProductResult{}
	var retval *Product
	var err2 error
	if retval, err2 = p.handler.GetProduct(args.PackageID, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProduct: "+err2.Error())
			oprot.WriteMessageBegin("getProduct", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProduct", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetProductList struct {
	handler ShopService
}

func (p *shopServiceProcessorGetProductList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProductListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProductList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProductListResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetProductList(args.ProductIdList, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductList: "+err2.Error())
			oprot.WriteMessageBegin("getProductList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProductList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetProductListWithCarrier struct {
	handler ShopService
}

func (p *shopServiceProcessorGetProductListWithCarrier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProductListWithCarrierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProductListWithCarrier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProductListWithCarrierResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetProductListWithCarrier(args.ProductIdList, args.Language, args.Country, args.CarrierCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductListWithCarrier: "+err2.Error())
			oprot.WriteMessageBegin("getProductListWithCarrier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProductListWithCarrier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetProductWithCarrier struct {
	handler ShopService
}

func (p *shopServiceProcessorGetProductWithCarrier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetProductWithCarrierArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getProductWithCarrier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetProductWithCarrierResult{}
	var retval *Product
	var err2 error
	if retval, err2 = p.handler.GetProductWithCarrier(args.PackageID, args.Language, args.Country, args.CarrierCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductWithCarrier: "+err2.Error())
			oprot.WriteMessageBegin("getProductWithCarrier", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getProductWithCarrier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetPurchaseHistory struct {
	handler ShopService
}

func (p *shopServiceProcessorGetPurchaseHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPurchaseHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPurchaseHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPurchaseHistoryResult{}
	var retval *ProductList
	var err2 error
	if retval, err2 = p.handler.GetPurchaseHistory(args.Start, args.Size, args.Language, args.Country); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPurchaseHistory: "+err2.Error())
			oprot.WriteMessageBegin("getPurchaseHistory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPurchaseHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorGetTotalBalance struct {
	handler ShopService
}

func (p *shopServiceProcessorGetTotalBalance) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTotalBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTotalBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTotalBalanceResult{}
	var retval *Coin
	var err2 error
	if retval, err2 = p.handler.GetTotalBalance(args.AppStoreCode); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalBalance: "+err2.Error())
			oprot.WriteMessageBegin("getTotalBalance", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTotalBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorNotifyDownloaded struct {
	handler ShopService
}

func (p *shopServiceProcessorNotifyDownloaded) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyDownloadedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notifyDownloaded", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyDownloadedResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.NotifyDownloaded(args.PackageId, args.Language); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyDownloaded: "+err2.Error())
			oprot.WriteMessageBegin("notifyDownloaded", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("notifyDownloaded", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorReserveCoinPurchase struct {
	handler ShopService
}

func (p *shopServiceProcessorReserveCoinPurchase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReserveCoinPurchaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reserveCoinPurchase", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReserveCoinPurchaseResult{}
	var retval *PaymentReservationResult_
	var err2 error
	if retval, err2 = p.handler.ReserveCoinPurchase(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reserveCoinPurchase: "+err2.Error())
			oprot.WriteMessageBegin("reserveCoinPurchase", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reserveCoinPurchase", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type shopServiceProcessorReservePayment struct {
	handler ShopService
}

func (p *shopServiceProcessorReservePayment) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReservePaymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reservePayment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ReservePaymentResult{}
	var retval *PaymentReservationResult_
	var err2 error
	if retval, err2 = p.handler.ReservePayment(args.PaymentReservation); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reservePayment: "+err2.Error())
			oprot.WriteMessageBegin("reservePayment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reservePayment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type BuyCoinProductArgs struct {
	// unused field # 1
	PaymentReservation *PaymentReservation `thrift:"paymentReservation,2" json:"paymentReservation"`
}

func NewBuyCoinProductArgs() *BuyCoinProductArgs {
	return &BuyCoinProductArgs{}
}

var BuyCoinProductArgs_PaymentReservation_DEFAULT *PaymentReservation

func (p *BuyCoinProductArgs) GetPaymentReservation() *PaymentReservation {
	if !p.IsSetPaymentReservation() {
		return BuyCoinProductArgs_PaymentReservation_DEFAULT
	}
	return p.PaymentReservation
}
func (p *BuyCoinProductArgs) IsSetPaymentReservation() bool {
	return p.PaymentReservation != nil
}

func (p *BuyCoinProductArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyCoinProductArgs) ReadField2(iprot thrift.TProtocol) error {
	p.PaymentReservation = &PaymentReservation{}
	if err := p.PaymentReservation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PaymentReservation, err)
	}
	return nil
}

func (p *BuyCoinProductArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyCoinProduct_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyCoinProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentReservation", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:paymentReservation: %s", p, err)
	}
	if err := p.PaymentReservation.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.PaymentReservation, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:paymentReservation: %s", p, err)
	}
	return err
}

func (p *BuyCoinProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyCoinProductArgs(%+v)", *p)
}

type BuyCoinProductResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewBuyCoinProductResult() *BuyCoinProductResult {
	return &BuyCoinProductResult{}
}

var BuyCoinProductResult_E_DEFAULT *TalkException

func (p *BuyCoinProductResult) GetE() *TalkException {
	if !p.IsSetE() {
		return BuyCoinProductResult_E_DEFAULT
	}
	return p.E
}
func (p *BuyCoinProductResult) IsSetE() bool {
	return p.E != nil
}

func (p *BuyCoinProductResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyCoinProductResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *BuyCoinProductResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyCoinProduct_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyCoinProductResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *BuyCoinProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyCoinProductResult(%+v)", *p)
}

type BuyFreeProductArgs struct {
	// unused field # 1
	ReceiverMid     string `thrift:"receiverMid,2" json:"receiverMid"`
	ProductId       string `thrift:"productId,3" json:"productId"`
	MessageTemplate int32  `thrift:"messageTemplate,4" json:"messageTemplate"`
	Language        string `thrift:"language,5" json:"language"`
	Country         string `thrift:"country,6" json:"country"`
	PackageId       int64  `thrift:"packageId,7" json:"packageId"`
}

func NewBuyFreeProductArgs() *BuyFreeProductArgs {
	return &BuyFreeProductArgs{}
}

func (p *BuyFreeProductArgs) GetReceiverMid() string {
	return p.ReceiverMid
}

func (p *BuyFreeProductArgs) GetProductId() string {
	return p.ProductId
}

func (p *BuyFreeProductArgs) GetMessageTemplate() int32 {
	return p.MessageTemplate
}

func (p *BuyFreeProductArgs) GetLanguage() string {
	return p.Language
}

func (p *BuyFreeProductArgs) GetCountry() string {
	return p.Country
}

func (p *BuyFreeProductArgs) GetPackageId() int64 {
	return p.PackageId
}
func (p *BuyFreeProductArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiverMid = v
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageTemplate = v
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *BuyFreeProductArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *BuyFreeProductArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyFreeProduct_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyFreeProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiverMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiverMid)); err != nil {
		return fmt.Errorf("%T.receiverMid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiverMid: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:productId: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageTemplate", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageTemplate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageTemplate)); err != nil {
		return fmt.Errorf("%T.messageTemplate (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageTemplate: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:language: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:country: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:packageId: %s", p, err)
	}
	return err
}

func (p *BuyFreeProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyFreeProductArgs(%+v)", *p)
}

type BuyFreeProductResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewBuyFreeProductResult() *BuyFreeProductResult {
	return &BuyFreeProductResult{}
}

var BuyFreeProductResult_E_DEFAULT *TalkException

func (p *BuyFreeProductResult) GetE() *TalkException {
	if !p.IsSetE() {
		return BuyFreeProductResult_E_DEFAULT
	}
	return p.E
}
func (p *BuyFreeProductResult) IsSetE() bool {
	return p.E != nil
}

func (p *BuyFreeProductResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyFreeProductResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *BuyFreeProductResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyFreeProduct_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyFreeProductResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *BuyFreeProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyFreeProductResult(%+v)", *p)
}

type BuyMustbuyProductArgs struct {
	// unused field # 1
	ReceiverMid     string `thrift:"receiverMid,2" json:"receiverMid"`
	ProductId       string `thrift:"productId,3" json:"productId"`
	MessageTemplate int32  `thrift:"messageTemplate,4" json:"messageTemplate"`
	Language        string `thrift:"language,5" json:"language"`
	Country         string `thrift:"country,6" json:"country"`
	PackageId       int64  `thrift:"packageId,7" json:"packageId"`
	SerialNumber    string `thrift:"serialNumber,8" json:"serialNumber"`
}

func NewBuyMustbuyProductArgs() *BuyMustbuyProductArgs {
	return &BuyMustbuyProductArgs{}
}

func (p *BuyMustbuyProductArgs) GetReceiverMid() string {
	return p.ReceiverMid
}

func (p *BuyMustbuyProductArgs) GetProductId() string {
	return p.ProductId
}

func (p *BuyMustbuyProductArgs) GetMessageTemplate() int32 {
	return p.MessageTemplate
}

func (p *BuyMustbuyProductArgs) GetLanguage() string {
	return p.Language
}

func (p *BuyMustbuyProductArgs) GetCountry() string {
	return p.Country
}

func (p *BuyMustbuyProductArgs) GetPackageId() int64 {
	return p.PackageId
}

func (p *BuyMustbuyProductArgs) GetSerialNumber() string {
	return p.SerialNumber
}
func (p *BuyMustbuyProductArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReceiverMid = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ProductId = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageTemplate = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.SerialNumber = v
	}
	return nil
}

func (p *BuyMustbuyProductArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyMustbuyProduct_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyMustbuyProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverMid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:receiverMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReceiverMid)); err != nil {
		return fmt.Errorf("%T.receiverMid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:receiverMid: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:productId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ProductId)); err != nil {
		return fmt.Errorf("%T.productId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:productId: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageTemplate", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageTemplate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageTemplate)); err != nil {
		return fmt.Errorf("%T.messageTemplate (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageTemplate: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:language: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:country: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:packageId: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serialNumber", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:serialNumber: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SerialNumber)); err != nil {
		return fmt.Errorf("%T.serialNumber (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:serialNumber: %s", p, err)
	}
	return err
}

func (p *BuyMustbuyProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyMustbuyProductArgs(%+v)", *p)
}

type BuyMustbuyProductResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewBuyMustbuyProductResult() *BuyMustbuyProductResult {
	return &BuyMustbuyProductResult{}
}

var BuyMustbuyProductResult_E_DEFAULT *TalkException

func (p *BuyMustbuyProductResult) GetE() *TalkException {
	if !p.IsSetE() {
		return BuyMustbuyProductResult_E_DEFAULT
	}
	return p.E
}
func (p *BuyMustbuyProductResult) IsSetE() bool {
	return p.E != nil
}

func (p *BuyMustbuyProductResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BuyMustbuyProductResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *BuyMustbuyProductResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buyMustbuyProduct_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BuyMustbuyProductResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *BuyMustbuyProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuyMustbuyProductResult(%+v)", *p)
}

type CheckCanReceivePresentArgs struct {
	// unused field # 1
	RecipientMid string `thrift:"recipientMid,2" json:"recipientMid"`
	PackageId    int64  `thrift:"packageId,3" json:"packageId"`
	Language     string `thrift:"language,4" json:"language"`
	Country      string `thrift:"country,5" json:"country"`
}

func NewCheckCanReceivePresentArgs() *CheckCanReceivePresentArgs {
	return &CheckCanReceivePresentArgs{}
}

func (p *CheckCanReceivePresentArgs) GetRecipientMid() string {
	return p.RecipientMid
}

func (p *CheckCanReceivePresentArgs) GetPackageId() int64 {
	return p.PackageId
}

func (p *CheckCanReceivePresentArgs) GetLanguage() string {
	return p.Language
}

func (p *CheckCanReceivePresentArgs) GetCountry() string {
	return p.Country
}
func (p *CheckCanReceivePresentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RecipientMid = v
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkCanReceivePresent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckCanReceivePresentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recipientMid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:recipientMid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RecipientMid)); err != nil {
		return fmt.Errorf("%T.recipientMid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:recipientMid: %s", p, err)
	}
	return err
}

func (p *CheckCanReceivePresentArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:packageId: %s", p, err)
	}
	return err
}

func (p *CheckCanReceivePresentArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *CheckCanReceivePresentArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *CheckCanReceivePresentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCanReceivePresentArgs(%+v)", *p)
}

type CheckCanReceivePresentResult struct {
	E *TalkException `thrift:"e,1" json:"e"`
}

func NewCheckCanReceivePresentResult() *CheckCanReceivePresentResult {
	return &CheckCanReceivePresentResult{}
}

var CheckCanReceivePresentResult_E_DEFAULT *TalkException

func (p *CheckCanReceivePresentResult) GetE() *TalkException {
	if !p.IsSetE() {
		return CheckCanReceivePresentResult_E_DEFAULT
	}
	return p.E
}
func (p *CheckCanReceivePresentResult) IsSetE() bool {
	return p.E != nil
}

func (p *CheckCanReceivePresentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckCanReceivePresentResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CheckCanReceivePresentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkCanReceivePresent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckCanReceivePresentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CheckCanReceivePresentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCanReceivePresentResult(%+v)", *p)
}

type GetActivePurchasesArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetActivePurchasesArgs() *GetActivePurchasesArgs {
	return &GetActivePurchasesArgs{}
}

func (p *GetActivePurchasesArgs) GetStart() int64 {
	return p.Start
}

func (p *GetActivePurchasesArgs) GetSize() int32 {
	return p.Size
}

func (p *GetActivePurchasesArgs) GetLanguage() string {
	return p.Language
}

func (p *GetActivePurchasesArgs) GetCountry() string {
	return p.Country
}
func (p *GetActivePurchasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActivePurchasesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetActivePurchasesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetActivePurchasesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetActivePurchasesArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetActivePurchasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivePurchases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActivePurchasesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetActivePurchasesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetActivePurchasesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetActivePurchasesArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetActivePurchasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivePurchasesArgs(%+v)", *p)
}

type GetActivePurchasesResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetActivePurchasesResult() *GetActivePurchasesResult {
	return &GetActivePurchasesResult{}
}

var GetActivePurchasesResult_Success_DEFAULT *ProductList

func (p *GetActivePurchasesResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetActivePurchasesResult_Success_DEFAULT
	}
	return p.Success
}

var GetActivePurchasesResult_E_DEFAULT *TalkException

func (p *GetActivePurchasesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetActivePurchasesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetActivePurchasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivePurchasesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetActivePurchasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActivePurchasesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetActivePurchasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetActivePurchasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivePurchases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActivePurchasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetActivePurchasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetActivePurchasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivePurchasesResult(%+v)", *p)
}

type GetActivePurchaseVersionsArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetActivePurchaseVersionsArgs() *GetActivePurchaseVersionsArgs {
	return &GetActivePurchaseVersionsArgs{}
}

func (p *GetActivePurchaseVersionsArgs) GetStart() int64 {
	return p.Start
}

func (p *GetActivePurchaseVersionsArgs) GetSize() int32 {
	return p.Size
}

func (p *GetActivePurchaseVersionsArgs) GetLanguage() string {
	return p.Language
}

func (p *GetActivePurchaseVersionsArgs) GetCountry() string {
	return p.Country
}
func (p *GetActivePurchaseVersionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivePurchaseVersions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetActivePurchaseVersionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetActivePurchaseVersionsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetActivePurchaseVersionsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetActivePurchaseVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivePurchaseVersionsArgs(%+v)", *p)
}

type GetActivePurchaseVersionsResult struct {
	Success *ProductSimpleList `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetActivePurchaseVersionsResult() *GetActivePurchaseVersionsResult {
	return &GetActivePurchaseVersionsResult{}
}

var GetActivePurchaseVersionsResult_Success_DEFAULT *ProductSimpleList

func (p *GetActivePurchaseVersionsResult) GetSuccess() *ProductSimpleList {
	if !p.IsSetSuccess() {
		return GetActivePurchaseVersionsResult_Success_DEFAULT
	}
	return p.Success
}

var GetActivePurchaseVersionsResult_E_DEFAULT *TalkException

func (p *GetActivePurchaseVersionsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetActivePurchaseVersionsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetActivePurchaseVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivePurchaseVersionsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetActivePurchaseVersionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductSimpleList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivePurchaseVersions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetActivePurchaseVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetActivePurchaseVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetActivePurchaseVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivePurchaseVersionsResult(%+v)", *p)
}

type GetCoinProductsArgs struct {
	// unused field # 1
	AppStoreCode PaymentType `thrift:"appStoreCode,2" json:"appStoreCode"`
	Country      string      `thrift:"country,3" json:"country"`
	Language     string      `thrift:"language,4" json:"language"`
}

func NewGetCoinProductsArgs() *GetCoinProductsArgs {
	return &GetCoinProductsArgs{}
}

func (p *GetCoinProductsArgs) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}

func (p *GetCoinProductsArgs) GetCountry() string {
	return p.Country
}

func (p *GetCoinProductsArgs) GetLanguage() string {
	return p.Language
}
func (p *GetCoinProductsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinProductsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *GetCoinProductsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetCoinProductsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetCoinProductsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinProducts_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinProductsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appStoreCode: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:country: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinProductsArgs(%+v)", *p)
}

type GetCoinProductsResult struct {
	Success []*CoinProductItem `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetCoinProductsResult() *GetCoinProductsResult {
	return &GetCoinProductsResult{}
}

var GetCoinProductsResult_Success_DEFAULT []*CoinProductItem

func (p *GetCoinProductsResult) GetSuccess() []*CoinProductItem {
	return p.Success
}

var GetCoinProductsResult_E_DEFAULT *TalkException

func (p *GetCoinProductsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCoinProductsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCoinProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCoinProductsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCoinProductsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinProductsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*CoinProductItem, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem78 := &CoinProductItem{}
		if err := _elem78.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem78, err)
		}
		p.Success = append(p.Success, _elem78)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetCoinProductsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCoinProductsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinProducts_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinProductsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinProductsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinProductsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinProductsResult(%+v)", *p)
}

type GetCoinProductsByPgCodeArgs struct {
	// unused field # 1
	AppStoreCode PaymentType   `thrift:"appStoreCode,2" json:"appStoreCode"`
	PgCode       PaymentPgType `thrift:"pgCode,3" json:"pgCode"`
	Country      string        `thrift:"country,4" json:"country"`
	Language     string        `thrift:"language,5" json:"language"`
}

func NewGetCoinProductsByPgCodeArgs() *GetCoinProductsByPgCodeArgs {
	return &GetCoinProductsByPgCodeArgs{}
}

func (p *GetCoinProductsByPgCodeArgs) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}

func (p *GetCoinProductsByPgCodeArgs) GetPgCode() PaymentPgType {
	return p.PgCode
}

func (p *GetCoinProductsByPgCodeArgs) GetCountry() string {
	return p.Country
}

func (p *GetCoinProductsByPgCodeArgs) GetLanguage() string {
	return p.Language
}
func (p *GetCoinProductsByPgCodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PaymentPgType(v)
		p.PgCode = temp
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinProductsByPgCode_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appStoreCode: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsByPgCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pgCode", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:pgCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PgCode)); err != nil {
		return fmt.Errorf("%T.pgCode (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:pgCode: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsByPgCodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:country: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsByPgCodeArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:language: %s", p, err)
	}
	return err
}

func (p *GetCoinProductsByPgCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinProductsByPgCodeArgs(%+v)", *p)
}

type GetCoinProductsByPgCodeResult struct {
	Success []*CoinProductItem `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewGetCoinProductsByPgCodeResult() *GetCoinProductsByPgCodeResult {
	return &GetCoinProductsByPgCodeResult{}
}

var GetCoinProductsByPgCodeResult_Success_DEFAULT []*CoinProductItem

func (p *GetCoinProductsByPgCodeResult) GetSuccess() []*CoinProductItem {
	return p.Success
}

var GetCoinProductsByPgCodeResult_E_DEFAULT *TalkException

func (p *GetCoinProductsByPgCodeResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCoinProductsByPgCodeResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCoinProductsByPgCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCoinProductsByPgCodeResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCoinProductsByPgCodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*CoinProductItem, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem79 := &CoinProductItem{}
		if err := _elem79.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem79, err)
		}
		p.Success = append(p.Success, _elem79)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinProductsByPgCode_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinProductsByPgCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinProductsByPgCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinProductsByPgCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinProductsByPgCodeResult(%+v)", *p)
}

type GetCoinPurchaseHistoryArgs struct {
	// unused field # 1
	Request *CoinHistoryCondition `thrift:"request,2" json:"request"`
}

func NewGetCoinPurchaseHistoryArgs() *GetCoinPurchaseHistoryArgs {
	return &GetCoinPurchaseHistoryArgs{}
}

var GetCoinPurchaseHistoryArgs_Request_DEFAULT *CoinHistoryCondition

func (p *GetCoinPurchaseHistoryArgs) GetRequest() *CoinHistoryCondition {
	if !p.IsSetRequest() {
		return GetCoinPurchaseHistoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetCoinPurchaseHistoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetCoinPurchaseHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &CoinHistoryCondition{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinPurchaseHistory_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:request: %s", p, err)
	}
	return err
}

func (p *GetCoinPurchaseHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinPurchaseHistoryArgs(%+v)", *p)
}

type GetCoinPurchaseHistoryResult struct {
	Success *CoinHistoryResult_ `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewGetCoinPurchaseHistoryResult() *GetCoinPurchaseHistoryResult {
	return &GetCoinPurchaseHistoryResult{}
}

var GetCoinPurchaseHistoryResult_Success_DEFAULT *CoinHistoryResult_

func (p *GetCoinPurchaseHistoryResult) GetSuccess() *CoinHistoryResult_ {
	if !p.IsSetSuccess() {
		return GetCoinPurchaseHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var GetCoinPurchaseHistoryResult_E_DEFAULT *TalkException

func (p *GetCoinPurchaseHistoryResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCoinPurchaseHistoryResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCoinPurchaseHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCoinPurchaseHistoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCoinPurchaseHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CoinHistoryResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinPurchaseHistory_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinPurchaseHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinPurchaseHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinPurchaseHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinPurchaseHistoryResult(%+v)", *p)
}

type GetCoinUseAndRefundHistoryArgs struct {
	// unused field # 1
	Request *CoinHistoryCondition `thrift:"request,2" json:"request"`
}

func NewGetCoinUseAndRefundHistoryArgs() *GetCoinUseAndRefundHistoryArgs {
	return &GetCoinUseAndRefundHistoryArgs{}
}

var GetCoinUseAndRefundHistoryArgs_Request_DEFAULT *CoinHistoryCondition

func (p *GetCoinUseAndRefundHistoryArgs) GetRequest() *CoinHistoryCondition {
	if !p.IsSetRequest() {
		return GetCoinUseAndRefundHistoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetCoinUseAndRefundHistoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetCoinUseAndRefundHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &CoinHistoryCondition{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinUseAndRefundHistory_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:request: %s", p, err)
	}
	return err
}

func (p *GetCoinUseAndRefundHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinUseAndRefundHistoryArgs(%+v)", *p)
}

type GetCoinUseAndRefundHistoryResult struct {
	Success *CoinHistoryResult_ `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewGetCoinUseAndRefundHistoryResult() *GetCoinUseAndRefundHistoryResult {
	return &GetCoinUseAndRefundHistoryResult{}
}

var GetCoinUseAndRefundHistoryResult_Success_DEFAULT *CoinHistoryResult_

func (p *GetCoinUseAndRefundHistoryResult) GetSuccess() *CoinHistoryResult_ {
	if !p.IsSetSuccess() {
		return GetCoinUseAndRefundHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var GetCoinUseAndRefundHistoryResult_E_DEFAULT *TalkException

func (p *GetCoinUseAndRefundHistoryResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetCoinUseAndRefundHistoryResult_E_DEFAULT
	}
	return p.E
}
func (p *GetCoinUseAndRefundHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCoinUseAndRefundHistoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetCoinUseAndRefundHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CoinHistoryResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCoinUseAndRefundHistory_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCoinUseAndRefundHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinUseAndRefundHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetCoinUseAndRefundHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCoinUseAndRefundHistoryResult(%+v)", *p)
}

type GetDownloadsArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetDownloadsArgs() *GetDownloadsArgs {
	return &GetDownloadsArgs{}
}

func (p *GetDownloadsArgs) GetStart() int64 {
	return p.Start
}

func (p *GetDownloadsArgs) GetSize() int32 {
	return p.Size
}

func (p *GetDownloadsArgs) GetLanguage() string {
	return p.Language
}

func (p *GetDownloadsArgs) GetCountry() string {
	return p.Country
}
func (p *GetDownloadsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDownloadsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetDownloadsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetDownloadsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetDownloadsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetDownloadsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDownloads_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDownloadsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetDownloadsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetDownloadsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetDownloadsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetDownloadsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadsArgs(%+v)", *p)
}

type GetDownloadsResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetDownloadsResult() *GetDownloadsResult {
	return &GetDownloadsResult{}
}

var GetDownloadsResult_Success_DEFAULT *ProductList

func (p *GetDownloadsResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetDownloadsResult_Success_DEFAULT
	}
	return p.Success
}

var GetDownloadsResult_E_DEFAULT *TalkException

func (p *GetDownloadsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetDownloadsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetDownloadsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDownloadsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetDownloadsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDownloadsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDownloadsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetDownloadsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDownloads_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDownloadsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDownloadsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetDownloadsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDownloadsResult(%+v)", *p)
}

type GetEventPackagesArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetEventPackagesArgs() *GetEventPackagesArgs {
	return &GetEventPackagesArgs{}
}

func (p *GetEventPackagesArgs) GetStart() int64 {
	return p.Start
}

func (p *GetEventPackagesArgs) GetSize() int32 {
	return p.Size
}

func (p *GetEventPackagesArgs) GetLanguage() string {
	return p.Language
}

func (p *GetEventPackagesArgs) GetCountry() string {
	return p.Country
}
func (p *GetEventPackagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetEventPackagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetEventPackagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetEventPackagesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetEventPackagesArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetEventPackagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getEventPackages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetEventPackagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetEventPackagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetEventPackagesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetEventPackagesArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetEventPackagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEventPackagesArgs(%+v)", *p)
}

type GetEventPackagesResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetEventPackagesResult() *GetEventPackagesResult {
	return &GetEventPackagesResult{}
}

var GetEventPackagesResult_Success_DEFAULT *ProductList

func (p *GetEventPackagesResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetEventPackagesResult_Success_DEFAULT
	}
	return p.Success
}

var GetEventPackagesResult_E_DEFAULT *TalkException

func (p *GetEventPackagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetEventPackagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetEventPackagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetEventPackagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetEventPackagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetEventPackagesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetEventPackagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetEventPackagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getEventPackages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetEventPackagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetEventPackagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetEventPackagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEventPackagesResult(%+v)", *p)
}

type GetNewlyReleasedPackagesArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetNewlyReleasedPackagesArgs() *GetNewlyReleasedPackagesArgs {
	return &GetNewlyReleasedPackagesArgs{}
}

func (p *GetNewlyReleasedPackagesArgs) GetStart() int64 {
	return p.Start
}

func (p *GetNewlyReleasedPackagesArgs) GetSize() int32 {
	return p.Size
}

func (p *GetNewlyReleasedPackagesArgs) GetLanguage() string {
	return p.Language
}

func (p *GetNewlyReleasedPackagesArgs) GetCountry() string {
	return p.Country
}
func (p *GetNewlyReleasedPackagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewlyReleasedPackages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetNewlyReleasedPackagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetNewlyReleasedPackagesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetNewlyReleasedPackagesArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetNewlyReleasedPackagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNewlyReleasedPackagesArgs(%+v)", *p)
}

type GetNewlyReleasedPackagesResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetNewlyReleasedPackagesResult() *GetNewlyReleasedPackagesResult {
	return &GetNewlyReleasedPackagesResult{}
}

var GetNewlyReleasedPackagesResult_Success_DEFAULT *ProductList

func (p *GetNewlyReleasedPackagesResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetNewlyReleasedPackagesResult_Success_DEFAULT
	}
	return p.Success
}

var GetNewlyReleasedPackagesResult_E_DEFAULT *TalkException

func (p *GetNewlyReleasedPackagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetNewlyReleasedPackagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetNewlyReleasedPackagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNewlyReleasedPackagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetNewlyReleasedPackagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewlyReleasedPackages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNewlyReleasedPackagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNewlyReleasedPackagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetNewlyReleasedPackagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNewlyReleasedPackagesResult(%+v)", *p)
}

type GetPopularPackagesArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetPopularPackagesArgs() *GetPopularPackagesArgs {
	return &GetPopularPackagesArgs{}
}

func (p *GetPopularPackagesArgs) GetStart() int64 {
	return p.Start
}

func (p *GetPopularPackagesArgs) GetSize() int32 {
	return p.Size
}

func (p *GetPopularPackagesArgs) GetLanguage() string {
	return p.Language
}

func (p *GetPopularPackagesArgs) GetCountry() string {
	return p.Country
}
func (p *GetPopularPackagesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPopularPackagesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetPopularPackagesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetPopularPackagesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetPopularPackagesArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetPopularPackagesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPopularPackages_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPopularPackagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetPopularPackagesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetPopularPackagesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetPopularPackagesArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetPopularPackagesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularPackagesArgs(%+v)", *p)
}

type GetPopularPackagesResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetPopularPackagesResult() *GetPopularPackagesResult {
	return &GetPopularPackagesResult{}
}

var GetPopularPackagesResult_Success_DEFAULT *ProductList

func (p *GetPopularPackagesResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetPopularPackagesResult_Success_DEFAULT
	}
	return p.Success
}

var GetPopularPackagesResult_E_DEFAULT *TalkException

func (p *GetPopularPackagesResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetPopularPackagesResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPopularPackagesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPopularPackagesResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPopularPackagesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPopularPackagesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPopularPackagesResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPopularPackagesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPopularPackages_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPopularPackagesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPopularPackagesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPopularPackagesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularPackagesResult(%+v)", *p)
}

type GetPresentsReceivedArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetPresentsReceivedArgs() *GetPresentsReceivedArgs {
	return &GetPresentsReceivedArgs{}
}

func (p *GetPresentsReceivedArgs) GetStart() int64 {
	return p.Start
}

func (p *GetPresentsReceivedArgs) GetSize() int32 {
	return p.Size
}

func (p *GetPresentsReceivedArgs) GetLanguage() string {
	return p.Language
}

func (p *GetPresentsReceivedArgs) GetCountry() string {
	return p.Country
}
func (p *GetPresentsReceivedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPresentsReceivedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetPresentsReceivedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetPresentsReceivedArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetPresentsReceivedArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetPresentsReceivedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPresentsReceived_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPresentsReceivedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetPresentsReceivedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetPresentsReceivedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetPresentsReceivedArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetPresentsReceivedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPresentsReceivedArgs(%+v)", *p)
}

type GetPresentsReceivedResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetPresentsReceivedResult() *GetPresentsReceivedResult {
	return &GetPresentsReceivedResult{}
}

var GetPresentsReceivedResult_Success_DEFAULT *ProductList

func (p *GetPresentsReceivedResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetPresentsReceivedResult_Success_DEFAULT
	}
	return p.Success
}

var GetPresentsReceivedResult_E_DEFAULT *TalkException

func (p *GetPresentsReceivedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetPresentsReceivedResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPresentsReceivedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPresentsReceivedResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPresentsReceivedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPresentsReceivedResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPresentsReceivedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPresentsReceivedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPresentsReceived_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPresentsReceivedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPresentsReceivedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPresentsReceivedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPresentsReceivedResult(%+v)", *p)
}

type GetPresentsSentArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetPresentsSentArgs() *GetPresentsSentArgs {
	return &GetPresentsSentArgs{}
}

func (p *GetPresentsSentArgs) GetStart() int64 {
	return p.Start
}

func (p *GetPresentsSentArgs) GetSize() int32 {
	return p.Size
}

func (p *GetPresentsSentArgs) GetLanguage() string {
	return p.Language
}

func (p *GetPresentsSentArgs) GetCountry() string {
	return p.Country
}
func (p *GetPresentsSentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPresentsSentArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetPresentsSentArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetPresentsSentArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetPresentsSentArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetPresentsSentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPresentsSent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPresentsSentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetPresentsSentArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetPresentsSentArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetPresentsSentArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetPresentsSentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPresentsSentArgs(%+v)", *p)
}

type GetPresentsSentResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetPresentsSentResult() *GetPresentsSentResult {
	return &GetPresentsSentResult{}
}

var GetPresentsSentResult_Success_DEFAULT *ProductList

func (p *GetPresentsSentResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetPresentsSentResult_Success_DEFAULT
	}
	return p.Success
}

var GetPresentsSentResult_E_DEFAULT *TalkException

func (p *GetPresentsSentResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetPresentsSentResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPresentsSentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPresentsSentResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPresentsSentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPresentsSentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPresentsSentResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPresentsSentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPresentsSent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPresentsSentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPresentsSentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPresentsSentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPresentsSentResult(%+v)", *p)
}

type GetProductArgs struct {
	// unused field # 1
	PackageID int64  `thrift:"packageID,2" json:"packageID"`
	Language  string `thrift:"language,3" json:"language"`
	Country   string `thrift:"country,4" json:"country"`
}

func NewGetProductArgs() *GetProductArgs {
	return &GetProductArgs{}
}

func (p *GetProductArgs) GetPackageID() int64 {
	return p.PackageID
}

func (p *GetProductArgs) GetLanguage() string {
	return p.Language
}

func (p *GetProductArgs) GetCountry() string {
	return p.Country
}
func (p *GetProductArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageID = v
	}
	return nil
}

func (p *GetProductArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetProductArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetProductArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProduct_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageID", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:packageID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageID)); err != nil {
		return fmt.Errorf("%T.packageID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:packageID: %s", p, err)
	}
	return err
}

func (p *GetProductArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *GetProductArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:country: %s", p, err)
	}
	return err
}

func (p *GetProductArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductArgs(%+v)", *p)
}

type GetProductResult struct {
	Success *Product       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetProductResult() *GetProductResult {
	return &GetProductResult{}
}

var GetProductResult_Success_DEFAULT *Product

func (p *GetProductResult) GetSuccess() *Product {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

var GetProductResult_E_DEFAULT *TalkException

func (p *GetProductResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProductResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProductResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Product{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProductResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProductResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProduct_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProductResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProductResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductResult(%+v)", *p)
}

type GetProductListArgs struct {
	// unused field # 1
	ProductIdList []string `thrift:"productIdList,2" json:"productIdList"`
	Language      string   `thrift:"language,3" json:"language"`
	Country       string   `thrift:"country,4" json:"country"`
}

func NewGetProductListArgs() *GetProductListArgs {
	return &GetProductListArgs{}
}

func (p *GetProductListArgs) GetProductIdList() []string {
	return p.ProductIdList
}

func (p *GetProductListArgs) GetLanguage() string {
	return p.Language
}

func (p *GetProductListArgs) GetCountry() string {
	return p.Country
}
func (p *GetProductListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductListArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ProductIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem80 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem80 = v
		}
		p.ProductIdList = append(p.ProductIdList, _elem80)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetProductListArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetProductListArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetProductListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductList_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productIdList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:productIdList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIdList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ProductIdList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:productIdList: %s", p, err)
	}
	return err
}

func (p *GetProductListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *GetProductListArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:country: %s", p, err)
	}
	return err
}

func (p *GetProductListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductListArgs(%+v)", *p)
}

type GetProductListResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetProductListResult() *GetProductListResult {
	return &GetProductListResult{}
}

var GetProductListResult_Success_DEFAULT *ProductList

func (p *GetProductListResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetProductListResult_Success_DEFAULT
	}
	return p.Success
}

var GetProductListResult_E_DEFAULT *TalkException

func (p *GetProductListResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProductListResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductListResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProductListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProductListResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProductListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductList_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProductListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProductListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductListResult(%+v)", *p)
}

type GetProductListWithCarrierArgs struct {
	// unused field # 1
	ProductIdList []string `thrift:"productIdList,2" json:"productIdList"`
	Language      string   `thrift:"language,3" json:"language"`
	Country       string   `thrift:"country,4" json:"country"`
	CarrierCode   string   `thrift:"carrierCode,5" json:"carrierCode"`
}

func NewGetProductListWithCarrierArgs() *GetProductListWithCarrierArgs {
	return &GetProductListWithCarrierArgs{}
}

func (p *GetProductListWithCarrierArgs) GetProductIdList() []string {
	return p.ProductIdList
}

func (p *GetProductListWithCarrierArgs) GetLanguage() string {
	return p.Language
}

func (p *GetProductListWithCarrierArgs) GetCountry() string {
	return p.Country
}

func (p *GetProductListWithCarrierArgs) GetCarrierCode() string {
	return p.CarrierCode
}
func (p *GetProductListWithCarrierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ProductIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem81 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem81 = v
		}
		p.ProductIdList = append(p.ProductIdList, _elem81)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CarrierCode = v
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductListWithCarrier_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductListWithCarrierArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productIdList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:productIdList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIdList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ProductIdList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:productIdList: %s", p, err)
	}
	return err
}

func (p *GetProductListWithCarrierArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *GetProductListWithCarrierArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:country: %s", p, err)
	}
	return err
}

func (p *GetProductListWithCarrierArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierCode", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:carrierCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CarrierCode)); err != nil {
		return fmt.Errorf("%T.carrierCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:carrierCode: %s", p, err)
	}
	return err
}

func (p *GetProductListWithCarrierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductListWithCarrierArgs(%+v)", *p)
}

type GetProductListWithCarrierResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetProductListWithCarrierResult() *GetProductListWithCarrierResult {
	return &GetProductListWithCarrierResult{}
}

var GetProductListWithCarrierResult_Success_DEFAULT *ProductList

func (p *GetProductListWithCarrierResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetProductListWithCarrierResult_Success_DEFAULT
	}
	return p.Success
}

var GetProductListWithCarrierResult_E_DEFAULT *TalkException

func (p *GetProductListWithCarrierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProductListWithCarrierResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProductListWithCarrierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductListWithCarrierResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProductListWithCarrierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductListWithCarrierResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProductListWithCarrierResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProductListWithCarrierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductListWithCarrier_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductListWithCarrierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProductListWithCarrierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProductListWithCarrierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductListWithCarrierResult(%+v)", *p)
}

type GetProductWithCarrierArgs struct {
	// unused field # 1
	PackageID   int64  `thrift:"packageID,2" json:"packageID"`
	Language    string `thrift:"language,3" json:"language"`
	Country     string `thrift:"country,4" json:"country"`
	CarrierCode string `thrift:"carrierCode,5" json:"carrierCode"`
}

func NewGetProductWithCarrierArgs() *GetProductWithCarrierArgs {
	return &GetProductWithCarrierArgs{}
}

func (p *GetProductWithCarrierArgs) GetPackageID() int64 {
	return p.PackageID
}

func (p *GetProductWithCarrierArgs) GetLanguage() string {
	return p.Language
}

func (p *GetProductWithCarrierArgs) GetCountry() string {
	return p.Country
}

func (p *GetProductWithCarrierArgs) GetCarrierCode() string {
	return p.CarrierCode
}
func (p *GetProductWithCarrierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductWithCarrierArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageID = v
	}
	return nil
}

func (p *GetProductWithCarrierArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetProductWithCarrierArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetProductWithCarrierArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CarrierCode = v
	}
	return nil
}

func (p *GetProductWithCarrierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductWithCarrier_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductWithCarrierArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageID", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:packageID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageID)); err != nil {
		return fmt.Errorf("%T.packageID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:packageID: %s", p, err)
	}
	return err
}

func (p *GetProductWithCarrierArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *GetProductWithCarrierArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:country: %s", p, err)
	}
	return err
}

func (p *GetProductWithCarrierArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrierCode", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:carrierCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CarrierCode)); err != nil {
		return fmt.Errorf("%T.carrierCode (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:carrierCode: %s", p, err)
	}
	return err
}

func (p *GetProductWithCarrierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductWithCarrierArgs(%+v)", *p)
}

type GetProductWithCarrierResult struct {
	Success *Product       `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetProductWithCarrierResult() *GetProductWithCarrierResult {
	return &GetProductWithCarrierResult{}
}

var GetProductWithCarrierResult_Success_DEFAULT *Product

func (p *GetProductWithCarrierResult) GetSuccess() *Product {
	if !p.IsSetSuccess() {
		return GetProductWithCarrierResult_Success_DEFAULT
	}
	return p.Success
}

var GetProductWithCarrierResult_E_DEFAULT *TalkException

func (p *GetProductWithCarrierResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetProductWithCarrierResult_E_DEFAULT
	}
	return p.E
}
func (p *GetProductWithCarrierResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductWithCarrierResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetProductWithCarrierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetProductWithCarrierResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Product{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetProductWithCarrierResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetProductWithCarrierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getProductWithCarrier_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetProductWithCarrierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetProductWithCarrierResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetProductWithCarrierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetProductWithCarrierResult(%+v)", *p)
}

type GetPurchaseHistoryArgs struct {
	// unused field # 1
	Start    int64  `thrift:"start,2" json:"start"`
	Size     int32  `thrift:"size,3" json:"size"`
	Language string `thrift:"language,4" json:"language"`
	Country  string `thrift:"country,5" json:"country"`
}

func NewGetPurchaseHistoryArgs() *GetPurchaseHistoryArgs {
	return &GetPurchaseHistoryArgs{}
}

func (p *GetPurchaseHistoryArgs) GetStart() int64 {
	return p.Start
}

func (p *GetPurchaseHistoryArgs) GetSize() int32 {
	return p.Size
}

func (p *GetPurchaseHistoryArgs) GetLanguage() string {
	return p.Language
}

func (p *GetPurchaseHistoryArgs) GetCountry() string {
	return p.Country
}
func (p *GetPurchaseHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPurchaseHistory_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPurchaseHistoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:start: %s", p, err)
	}
	return err
}

func (p *GetPurchaseHistoryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:size: %s", p, err)
	}
	return err
}

func (p *GetPurchaseHistoryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:language: %s", p, err)
	}
	return err
}

func (p *GetPurchaseHistoryArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:country: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return fmt.Errorf("%T.country (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:country: %s", p, err)
	}
	return err
}

func (p *GetPurchaseHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPurchaseHistoryArgs(%+v)", *p)
}

type GetPurchaseHistoryResult struct {
	Success *ProductList   `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetPurchaseHistoryResult() *GetPurchaseHistoryResult {
	return &GetPurchaseHistoryResult{}
}

var GetPurchaseHistoryResult_Success_DEFAULT *ProductList

func (p *GetPurchaseHistoryResult) GetSuccess() *ProductList {
	if !p.IsSetSuccess() {
		return GetPurchaseHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var GetPurchaseHistoryResult_E_DEFAULT *TalkException

func (p *GetPurchaseHistoryResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetPurchaseHistoryResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPurchaseHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPurchaseHistoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPurchaseHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPurchaseHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ProductList{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPurchaseHistoryResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPurchaseHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPurchaseHistory_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPurchaseHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPurchaseHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPurchaseHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPurchaseHistoryResult(%+v)", *p)
}

type GetTotalBalanceArgs struct {
	// unused field # 1
	AppStoreCode PaymentType `thrift:"appStoreCode,2" json:"appStoreCode"`
}

func NewGetTotalBalanceArgs() *GetTotalBalanceArgs {
	return &GetTotalBalanceArgs{}
}

func (p *GetTotalBalanceArgs) GetAppStoreCode() PaymentType {
	return p.AppStoreCode
}
func (p *GetTotalBalanceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTotalBalanceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PaymentType(v)
		p.AppStoreCode = temp
	}
	return nil
}

func (p *GetTotalBalanceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalBalance_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTotalBalanceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appStoreCode", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:appStoreCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AppStoreCode)); err != nil {
		return fmt.Errorf("%T.appStoreCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:appStoreCode: %s", p, err)
	}
	return err
}

func (p *GetTotalBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTotalBalanceArgs(%+v)", *p)
}

type GetTotalBalanceResult struct {
	Success *Coin          `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewGetTotalBalanceResult() *GetTotalBalanceResult {
	return &GetTotalBalanceResult{}
}

var GetTotalBalanceResult_Success_DEFAULT *Coin

func (p *GetTotalBalanceResult) GetSuccess() *Coin {
	if !p.IsSetSuccess() {
		return GetTotalBalanceResult_Success_DEFAULT
	}
	return p.Success
}

var GetTotalBalanceResult_E_DEFAULT *TalkException

func (p *GetTotalBalanceResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetTotalBalanceResult_E_DEFAULT
	}
	return p.E
}
func (p *GetTotalBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTotalBalanceResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetTotalBalanceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTotalBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Coin{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTotalBalanceResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetTotalBalanceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTotalBalance_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTotalBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTotalBalanceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetTotalBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTotalBalanceResult(%+v)", *p)
}

type NotifyDownloadedArgs struct {
	// unused field # 1
	PackageId int64  `thrift:"packageId,2" json:"packageId"`
	Language  string `thrift:"language,3" json:"language"`
}

func NewNotifyDownloadedArgs() *NotifyDownloadedArgs {
	return &NotifyDownloadedArgs{}
}

func (p *NotifyDownloadedArgs) GetPackageId() int64 {
	return p.PackageId
}

func (p *NotifyDownloadedArgs) GetLanguage() string {
	return p.Language
}
func (p *NotifyDownloadedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyDownloadedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *NotifyDownloadedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *NotifyDownloadedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyDownloaded_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyDownloadedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:packageId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PackageId)); err != nil {
		return fmt.Errorf("%T.packageId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:packageId: %s", p, err)
	}
	return err
}

func (p *NotifyDownloadedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("language", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return fmt.Errorf("%T.language (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:language: %s", p, err)
	}
	return err
}

func (p *NotifyDownloadedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyDownloadedArgs(%+v)", *p)
}

type NotifyDownloadedResult struct {
	Success *int64         `thrift:"success,0" json:"success"`
	E       *TalkException `thrift:"e,1" json:"e"`
}

func NewNotifyDownloadedResult() *NotifyDownloadedResult {
	return &NotifyDownloadedResult{}
}

var NotifyDownloadedResult_Success_DEFAULT int64

func (p *NotifyDownloadedResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return NotifyDownloadedResult_Success_DEFAULT
	}
	return *p.Success
}

var NotifyDownloadedResult_E_DEFAULT *TalkException

func (p *NotifyDownloadedResult) GetE() *TalkException {
	if !p.IsSetE() {
		return NotifyDownloadedResult_E_DEFAULT
	}
	return p.E
}
func (p *NotifyDownloadedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NotifyDownloadedResult) IsSetE() bool {
	return p.E != nil
}

func (p *NotifyDownloadedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyDownloadedResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NotifyDownloadedResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *NotifyDownloadedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notifyDownloaded_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyDownloadedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *NotifyDownloadedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *NotifyDownloadedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyDownloadedResult(%+v)", *p)
}

type ReserveCoinPurchaseArgs struct {
	// unused field # 1
	Request *CoinPurchaseReservation `thrift:"request,2" json:"request"`
}

func NewReserveCoinPurchaseArgs() *ReserveCoinPurchaseArgs {
	return &ReserveCoinPurchaseArgs{}
}

var ReserveCoinPurchaseArgs_Request_DEFAULT *CoinPurchaseReservation

func (p *ReserveCoinPurchaseArgs) GetRequest() *CoinPurchaseReservation {
	if !p.IsSetRequest() {
		return ReserveCoinPurchaseArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ReserveCoinPurchaseArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ReserveCoinPurchaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReserveCoinPurchaseArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Request = &CoinPurchaseReservation{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ReserveCoinPurchaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reserveCoinPurchase_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReserveCoinPurchaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:request: %s", p, err)
	}
	return err
}

func (p *ReserveCoinPurchaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReserveCoinPurchaseArgs(%+v)", *p)
}

type ReserveCoinPurchaseResult struct {
	Success *PaymentReservationResult_ `thrift:"success,0" json:"success"`
	E       *TalkException             `thrift:"e,1" json:"e"`
}

func NewReserveCoinPurchaseResult() *ReserveCoinPurchaseResult {
	return &ReserveCoinPurchaseResult{}
}

var ReserveCoinPurchaseResult_Success_DEFAULT *PaymentReservationResult_

func (p *ReserveCoinPurchaseResult) GetSuccess() *PaymentReservationResult_ {
	if !p.IsSetSuccess() {
		return ReserveCoinPurchaseResult_Success_DEFAULT
	}
	return p.Success
}

var ReserveCoinPurchaseResult_E_DEFAULT *TalkException

func (p *ReserveCoinPurchaseResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReserveCoinPurchaseResult_E_DEFAULT
	}
	return p.E
}
func (p *ReserveCoinPurchaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReserveCoinPurchaseResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReserveCoinPurchaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReserveCoinPurchaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaymentReservationResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ReserveCoinPurchaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReserveCoinPurchaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reserveCoinPurchase_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReserveCoinPurchaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReserveCoinPurchaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReserveCoinPurchaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReserveCoinPurchaseResult(%+v)", *p)
}

type ReservePaymentArgs struct {
	// unused field # 1
	PaymentReservation *PaymentReservation `thrift:"paymentReservation,2" json:"paymentReservation"`
}

func NewReservePaymentArgs() *ReservePaymentArgs {
	return &ReservePaymentArgs{}
}

var ReservePaymentArgs_PaymentReservation_DEFAULT *PaymentReservation

func (p *ReservePaymentArgs) GetPaymentReservation() *PaymentReservation {
	if !p.IsSetPaymentReservation() {
		return ReservePaymentArgs_PaymentReservation_DEFAULT
	}
	return p.PaymentReservation
}
func (p *ReservePaymentArgs) IsSetPaymentReservation() bool {
	return p.PaymentReservation != nil
}

func (p *ReservePaymentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReservePaymentArgs) ReadField2(iprot thrift.TProtocol) error {
	p.PaymentReservation = &PaymentReservation{}
	if err := p.PaymentReservation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PaymentReservation, err)
	}
	return nil
}

func (p *ReservePaymentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reservePayment_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReservePaymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paymentReservation", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:paymentReservation: %s", p, err)
	}
	if err := p.PaymentReservation.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.PaymentReservation, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:paymentReservation: %s", p, err)
	}
	return err
}

func (p *ReservePaymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReservePaymentArgs(%+v)", *p)
}

type ReservePaymentResult struct {
	Success *PaymentReservationResult_ `thrift:"success,0" json:"success"`
	E       *TalkException             `thrift:"e,1" json:"e"`
}

func NewReservePaymentResult() *ReservePaymentResult {
	return &ReservePaymentResult{}
}

var ReservePaymentResult_Success_DEFAULT *PaymentReservationResult_

func (p *ReservePaymentResult) GetSuccess() *PaymentReservationResult_ {
	if !p.IsSetSuccess() {
		return ReservePaymentResult_Success_DEFAULT
	}
	return p.Success
}

var ReservePaymentResult_E_DEFAULT *TalkException

func (p *ReservePaymentResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ReservePaymentResult_E_DEFAULT
	}
	return p.E
}
func (p *ReservePaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReservePaymentResult) IsSetE() bool {
	return p.E != nil
}

func (p *ReservePaymentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReservePaymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PaymentReservationResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ReservePaymentResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ReservePaymentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reservePayment_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReservePaymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ReservePaymentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ReservePaymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReservePaymentResult(%+v)", *p)
}
